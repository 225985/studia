<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="17:BaseAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x10bcee4a0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x10b52f618"/></to>
    </wire>
    <wire loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x10b52f618"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x10b79e6c0"/></to>
    </wire>
    <wire loc="18:BaseAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x10bceeaa8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x10bcb3080"/></to>
    </wire>
    <wire loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x10bcb3080"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x10bcaf930"/></to>
    </wire>
    <wire loc="19:BaseAppC.nc">
      <from><interface-ref name="Timer0" scoped="" ref="0x10bce25c8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x10bd58a60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x10bd58a60"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x10bd7e6a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="20:BaseAppC.nc">
      <from><interface-ref name="Timer1" scoped="" ref="0x10bd0d7d8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x10befd020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x10befd020"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x10bd7e6a0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="21:BaseAppC.nc">
      <from><interface-ref name="Timer2" scoped="" ref="0x10bd08900"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x10bf2d550"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x10bf2d550"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x10bd7e6a0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="22:BaseAppC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x10bd02930"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x10c849578"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x10c849578"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x10cd23d60"/></to>
    </wire>
    <wire loc="23:BaseAppC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x10bd01610"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x10c848268"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x10c848268"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x10cd22940"/></to>
    </wire>
    <wire loc="24:BaseAppC.nc">
      <from><interface-ref name="AMControl" scoped="" ref="0x10bcfe060"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x10bf818e0"/></to>
    </wire>
    <wire loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x10bf818e0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x10bf97af8"/></to>
    </wire>
    <wire loc="25:BaseAppC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x10bd00c18"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x10c84a8d8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMSend" scoped="" ref="0x10c84a8d8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x10cd231a8"/></to>
    </wire>
    <wire loc="26:BaseAppC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x10bcff910"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x10c83dc20"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Receive" scoped="" ref="0x10c83dc20"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x10bf37300"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="28:BaseAppC.nc">
      <from><interface-ref name="RadioRSSI" scoped="" ref="0x10bcfd270"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x10bf6b020"/></to>
    </wire>
    <wire loc="86:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x10bf6b020"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x10bfa4348"/></to>
    </wire>
    <wire loc="29:BaseAppC.nc">
      <from><interface-ref name="RadioLQI" scoped="" ref="0x10bd245b0"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x10bf756a0"/></to>
    </wire>
    <wire loc="84:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x10bf756a0"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x10bfabb78"/></to>
    </wire>
    <wire loc="31:BaseAppC.nc">
      <from><interface-ref name="SerialSend" scoped="" ref="0x10bd227b0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x10b7ba788"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="32:BaseAppC.nc">
      <from><interface-ref name="SerialReceive" scoped="" ref="0x10bd206c8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x10b7b0300"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="33:BaseAppC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x10bd20de8"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x10b7ac1e0"/></to>
    </wire>
    <wire loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x10b7ac1e0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x10b83d2e8"/></to>
    </wire>
    <wire loc="34:BaseAppC.nc">
      <from><interface-ref name="SerialPacket" scoped="" ref="0x10bd1f9a8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x10b7cce08"/></to>
    </wire>
    <wire loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x10b7cce08"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x10b846020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x10b53ca30"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10ce14020"/></to>
    </wire>
    <wire loc="102:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x10b53ca30"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x10c4c6ca8"/></to>
    </wire>
    <wire loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x10b53ca30"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10c3e46a0"/></to>
    </wire>
    <wire loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x10b53ca30"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x10c3697f0"/></to>
    </wire>
    <wire loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x10b53ca30"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10c2b3150"/></to>
    </wire>
    <wire loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x10b53ca30"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10c2924d8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x10b53ca30"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10cd96140"/></to>
    </wire>
    <wire loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x10b53ca30"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10bd750f0"/></to>
    </wire>
    <wire loc="63:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x10b53ca30"/></from>
      <to><interface-ref name="Uart0Init" scoped="" ref="0x10ba52020"/></to>
    </wire>
    <wire loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x10b53ca30"/></from>
      <to><interface-ref name="Uart1Init" scoped="" ref="0x10ba50e30"/></to>
    </wire>
    <wire loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x10b53ca30"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10b9cc120"/></to>
    </wire>
    <wire loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x10b53ca30"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10b841ba8"/></to>
    </wire>
    <wire loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x10b79e6c0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x10bc859c0"/></to>
    </wire>
    <wire loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x10b6e88b0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x10b410b30"/></to>
    </wire>
    <wire loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x10b410b30"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x10b4f3d88"/></to>
    </wire>
    <wire loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x10b6e7398"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x10c5edb40"/></to>
    </wire>
    <wire loc="105:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x10b6e7398"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x10c4c61f0"/></to>
    </wire>
    <wire loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x10b6e7398"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10b53a8e8"/></to>
    </wire>
    <wire loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x10b53a8e8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10b53e020"/></to>
    </wire>
    <wire loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/MainC.nc">
      <from><interface-ref name="MainBoot" scoped="" ref="0x10b79d1f0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x10b6e8278"/></to>
    </wire>
    <wire loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x10b6e7a60"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x10b53ca30"/></to>
    </wire>
    <wire loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x10b538508"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10c79e770"/></to>
    </wire>
    <wire loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x10b538508"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10bb73940"/></to>
    </wire>
    <wire loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x10b541790"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x10b6c9158"/></to>
    </wire>
    <wire loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x10b53ed88"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10b6caaf8"/></to>
    </wire>
    <wire loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x10b53e6c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10bcb8460"/></to>
    </wire>
    <wire loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x10b53e6c0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x10b540690"/></to>
    </wire>
    <wire loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x10b540690"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x10b54d0e0"/></to>
    </wire>
    <wire loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x10b540d20"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x10b538508"/></to>
    </wire>
    <wire loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SerialIdPin" scoped="" ref="0x10b554388"/></from>
      <to><interface-ref name="PortA4" scoped="" ref="0x10b559e00"/></to>
    </wire>
    <wire loc="132:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x10b559e00"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x10b5e6740"/></to>
    </wire>
    <wire loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x10b54c4f8"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x10b540d20"/></to>
    </wire>
    <wire loc="182:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x10b595968"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10b677520"/></to>
    </wire>
    <wire loc="156:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x10b57f4d0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x10b604020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x10b604020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c9bf710"/></to>
    </wire>
    <wire loc="167:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x10b5844d0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x10b618d60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x10b618d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10ca15710"/></to>
    </wire>
    <wire loc="176:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x10b58a1a0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x10b62c8c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x10b62c8c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10ca75710"/></to>
    </wire>
    <wire loc="134:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x10b5651a0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x10b5e4a50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x10b5e4a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c8b1970"/></to>
    </wire>
    <wire loc="174:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x10b58de00"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x10b62f5b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x10b62f5b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10ca7b710"/></to>
    </wire>
    <wire loc="137:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x10b5634d0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x10b5eebd0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x10b5eebd0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c9156a8"/></to>
    </wire>
    <wire loc="148:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x10b577658"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x10b600740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x10b600740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c964710"/></to>
    </wire>
    <wire loc="159:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x10b57c968"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x10b613430"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x10b613430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c9b6710"/></to>
    </wire>
    <wire loc="170:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x10b580968"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x10b625120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x10b625120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10ca6e710"/></to>
    </wire>
    <wire loc="129:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x10b55c968"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x10b5d82a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x10b5d82a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c8c0970"/></to>
    </wire>
    <wire loc="140:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x10b560968"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x10b5ea020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x10b5ea020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c90c710"/></to>
    </wire>
    <wire loc="151:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x10b574af0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x10b5fdbd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x10b5fdbd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c95b710"/></to>
    </wire>
    <wire loc="162:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x10b579e00"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x10b6108c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x10b6108c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10ca0e710"/></to>
    </wire>
    <wire loc="179:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x10b597658"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x10b629d60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x10b629d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10cad0710"/></to>
    </wire>
    <wire loc="185:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x10b591348"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10b67cc38"/></to>
    </wire>
    <wire loc="165:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x10b5861a0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x10b61aa50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x10b61aa50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10ca1b710"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x10b5e6740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c8b7970"/></to>
    </wire>
    <wire loc="143:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x10b56b020"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x10b5f8430"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x10b5f8430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c903710"/></to>
    </wire>
    <wire loc="183:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x10b593020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10b672cd8"/></to>
    </wire>
    <wire loc="146:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x10b569348"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x10b603500"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x10b603500"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c96a6a8"/></to>
    </wire>
    <wire loc="157:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x10b57e658"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x10b615120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x10b615120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c9bc710"/></to>
    </wire>
    <wire loc="168:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x10b583658"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x10b617e18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x10b617e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10ca12710"/></to>
    </wire>
    <wire loc="177:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x10b589348"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x10b62ba50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x10b62ba50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10cad6710"/></to>
    </wire>
    <wire loc="135:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x10b564348"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x10b5e2bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x10b5e2bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c8ae970"/></to>
    </wire>
    <wire loc="138:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x10b562658"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x10b5edd60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x10b5edd60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c912710"/></to>
    </wire>
    <wire loc="149:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x10b5767e0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x10b5ff8c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x10b5ff8c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c961710"/></to>
    </wire>
    <wire loc="160:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x10b57baf0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x10b6125b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x10b6125b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c9b3710"/></to>
    </wire>
    <wire loc="171:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x10b58faf0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x10b6242a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x10b6242a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10ca6b710"/></to>
    </wire>
    <wire loc="130:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x10b55baf0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x10b5e8430"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x10b5e8430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c8bd970"/></to>
    </wire>
    <wire loc="141:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x10b56faf0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x10b5fa120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x10b5fa120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c909710"/></to>
    </wire>
    <wire loc="152:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x10b573c78"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x10b5fcd60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x10b5fcd60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c958710"/></to>
    </wire>
    <wire loc="180:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x10b5967e0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x10b628e18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x10b628e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10cacd710"/></to>
    </wire>
    <wire loc="155:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x10b570020"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x10b606e40"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x10b606e40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c9c26a8"/></to>
    </wire>
    <wire loc="166:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x10b585348"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x10b619bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x10b619bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10ca18710"/></to>
    </wire>
    <wire loc="175:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x10b58b020"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x10b62e740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x10b62e740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10ca78710"/></to>
    </wire>
    <wire loc="186:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x10b5904d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10b68a3e0"/></to>
    </wire>
    <wire loc="133:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x10b566020"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x10b5e58c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x10b5e58c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c8b4970"/></to>
    </wire>
    <wire loc="144:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x10b56a1a0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x10b5f75b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x10b5f75b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c900710"/></to>
    </wire>
    <wire loc="173:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x10b58ec78"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x10b630500"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x10b630500"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10ca7f6a8"/></to>
    </wire>
    <wire loc="147:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x10b5684d0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x10b6015b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x10b6015b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c967710"/></to>
    </wire>
    <wire loc="158:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x10b57d7e0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x10b6142a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x10b6142a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c9b9710"/></to>
    </wire>
    <wire loc="169:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x10b5817e0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x10b627020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x10b627020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10ca71710"/></to>
    </wire>
    <wire loc="178:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x10b5884d0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x10b62abd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x10b62abd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10cad3710"/></to>
    </wire>
    <wire loc="128:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x10b54f7e0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x10b5d91e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x10b5d91e8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c8c3970"/></to>
    </wire>
    <wire loc="139:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x10b5617e0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x10b5ece18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x10b5ece18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c90f710"/></to>
    </wire>
    <wire loc="150:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x10b575968"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x10b5fea50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x10b5fea50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c95e710"/></to>
    </wire>
    <wire loc="161:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x10b57ac78"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x10b611740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x10b611740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c9b0710"/></to>
    </wire>
    <wire loc="184:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x10b5921a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10b6803e0"/></to>
    </wire>
    <wire loc="164:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x10b587020"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x10b61b930"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x10b61b930"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10ca1f6a8"/></to>
    </wire>
    <wire loc="153:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x10b572e00"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x10b5fbe18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x10b5fbe18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c955710"/></to>
    </wire>
    <wire loc="131:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x10b55ac78"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x10b5e75b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x10b5e75b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c8ba970"/></to>
    </wire>
    <wire loc="142:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x10b56ee00"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x10b5f92a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x10b5f92a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x10c906710"/></to>
    </wire>
    <wire loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b4f2c58"/></to>
    </wire>
    <wire loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x10b4fb168"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x10b41ae30"/></to>
    </wire>
    <wire loc="81:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x10b5152b0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x10be24578"/></to>
    </wire>
    <wire loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="MainBoot" scoped="" ref="0x10bc84118"/></from>
      <to><interface-ref name="MainBoot" scoped="" ref="0x10b79d1f0"/></to>
    </wire>
    <wire loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x10bc847f8"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x10b7ac1e0"/></to>
    </wire>
    <wire loc="63:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x10bc83468"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x10bc59d50"/></to>
    </wire>
    <wire loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x10bc7f700"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x10bc341d0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMSend" scoped="" ref="0x10bc341d0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x10cc441f0"/></to>
    </wire>
    <wire loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x10bc7e430"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x10bc34d88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x10bc34d88"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x10b7c5740"/></to>
    </wire>
    <wire loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x10b83d2e8"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x10b865b90"/></to>
    </wire>
    <wire loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x10b7ba788"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x10b7ebb60"/></to>
    </wire>
    <wire loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x10b7c5740"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x10b845578"/></to>
    </wire>
    <wire loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x10b7b0300"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x10b8479a8"/></to>
    </wire>
    <wire loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10b7dfde0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10b844268"/></to>
    </wire>
    <wire loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x10b841ba8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10b865578"/></to>
    </wire>
    <wire loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x10b8545a8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x10b7cb020"/></to>
    </wire>
    <wire loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x10b844bb0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x10b83cce8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x10b8438c8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x10b83c270"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x10b84fba8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x10bbbb020"/></to>
    </wire>
    <wire loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x10b83cce8"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x10b98e020"/></to>
    </wire>
    <wire loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x10b83c270"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x10b98f868"/></to>
    </wire>
    <wire loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x10b98edb8"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x10b84fba8"/></to>
    </wire>
    <wire loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x10b879bc8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x10b8545a8"/></to>
    </wire>
    <wire loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x10b98ca50"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x10b8545a8"/></to>
    </wire>
    <wire loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x10b9a4420"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x10b8545a8"/></to>
    </wire>
    <wire loc="63:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x10b98d6c8"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x10b877b48"/></to>
    </wire>
    <wire loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x10b98c020"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x10b87b898"/></to>
    </wire>
    <wire loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x10b871b38"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x10b988b38"/></to>
    </wire>
    <wire loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x10b889b00"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x10b9a65e8"/></to>
    </wire>
    <wire loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x10b9a65e8"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x10b9bb740"/></to>
    </wire>
    <wire loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x10b998448"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x10b9a6db0"/></to>
    </wire>
    <wire loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x10b9a6db0"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x10b9d67e8"/></to>
    </wire>
    <wire loc="326:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x10b8c54d8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x10b8a68e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="320:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x10b8c7590"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="335:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x10b8dd6b0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="receiveTask" scoped="" ref="0x10b98a100"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="signalSendDone" scoped="" ref="0x10b98a8a0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x10b9bc020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x10b9d6020"/></to>
    </wire>
    <wire loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x10b9d6020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x10b9cce58"/></to>
    </wire>
    <wire loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x10b9d67e8"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x10ba105f8"/></to>
    </wire>
    <wire loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x10b9bb740"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x10b9cc6f8"/></to>
    </wire>
    <wire loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x10b9cf868"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x10ba9e188"/></to>
    </wire>
    <wire loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x10ba9e188"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x10bb94270"/></to>
    </wire>
    <wire loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x10ba0dc60"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x10b9cf868"/></to>
    </wire>
    <wire loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartTxControl" scoped="" ref="0x10ba0f5f8"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x10ba38700"/></to>
    </wire>
    <wire loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0TxControl" scoped="" ref="0x10ba38700"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x10ba52730"/></to>
    </wire>
    <wire loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartRxControl" scoped="" ref="0x10ba0fd98"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x10ba37020"/></to>
    </wire>
    <wire loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0RxControl" scoped="" ref="0x10ba37020"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x10ba51020"/></to>
    </wire>
    <wire loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUart" scoped="" ref="0x10ba0e5c0"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x10ba37860"/></to>
    </wire>
    <wire loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart0" scoped="" ref="0x10ba37860"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x10ba518a0"/></to>
    </wire>
    <wire loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart1" scoped="" ref="0x10ba34020"/></from>
      <to><interface-ref name="HplUart1" scoped="" ref="0x10ba4e6d8"/></to>
    </wire>
    <wire loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1TxControl" scoped="" ref="0x10ba36e58"/></from>
      <to><interface-ref name="Uart1TxControl" scoped="" ref="0x10ba4f568"/></to>
    </wire>
    <wire loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1RxControl" scoped="" ref="0x10ba356f0"/></from>
      <to><interface-ref name="Uart1RxControl" scoped="" ref="0x10ba4fe00"/></to>
    </wire>
    <wire loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x10ba4dc70"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x10b541790"/></to>
    </wire>
    <wire loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x10ba4b950"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x10b5173c8"/></to>
    </wire>
    <wire loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x10bbc8450"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x10babd020"/></to>
    </wire>
    <wire loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x10babd020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x10bb88b90"/></to>
    </wire>
    <wire loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x10bb9dc58"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x10bab7020"/></to>
    </wire>
    <wire loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x10bab7020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x10bad4bf0"/></to>
    </wire>
    <wire loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x10bac6aa8"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x10baf2c90"/></to>
    </wire>
    <wire loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x10bae1540"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x10baf0350"/></to>
    </wire>
    <wire loc="73:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x10bad7a20"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x10baecc48"/></to>
    </wire>
    <wire loc="74:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x10bad7a20"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x10bae7020"/></to>
    </wire>
    <wire loc="75:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x10bad7a20"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x10bae3360"/></to>
    </wire>
    <wire loc="27:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x10bb67098"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x10bab7020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x10bc339d8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x10b7cce08"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Acks" scoped="" ref="0x10bc5b0a0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10b7dfde0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Send" scoped="" ref="0x10cc44e08"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x10bbe17f8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x10cc43a10"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x10b7cce08"/></to>
    </wire>
    <wire loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x10bbe17f8"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x10bc42b98"/></to>
    </wire>
    <wire loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x10bc41a08"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x10b7ba788"/></to>
    </wire>
    <wire loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x10bc40700"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x10b7cce08"/></to>
    </wire>
    <wire loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x10bc3fd20"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x10b7c5740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="errorTask" scoped="" ref="0x10bc3d988"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="CancelTask" scoped="" ref="0x10bc3c160"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="127:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/PrintfP.nc">
      <from><interface-ref name="retrySend" scoped="" ref="0x10bc74c60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x10bcb8460"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10bcaf368"/></to>
    </wire>
    <wire loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x10bcad020"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x10bcbb020"/></to>
    </wire>
    <wire loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x10bcbb020"/></from>
      <to><interface-ref name="PortA2" scoped="" ref="0x10b55baf0"/></to>
    </wire>
    <wire loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x10bcac190"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x10bcba1b0"/></to>
    </wire>
    <wire loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x10bcba1b0"/></from>
      <to><interface-ref name="PortA1" scoped="" ref="0x10b55c968"/></to>
    </wire>
    <wire loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x10bcab338"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x10bcb9378"/></to>
    </wire>
    <wire loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x10bcb9378"/></from>
      <to><interface-ref name="PortA0" scoped="" ref="0x10b54f7e0"/></to>
    </wire>
    <wire loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x10bd7e6a0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x10bd75de8"/></to>
    </wire>
    <wire loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x10bd75de8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x10beec5e0"/></to>
    </wire>
    <wire loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x10bd750f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10bd6bbd0"/></to>
    </wire>
    <wire loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x10bd6c338"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x10bf13128"/></to>
    </wire>
    <wire loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x10bd6bbd0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10be60020"/></to>
    </wire>
    <wire loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x10bee6858"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x10be9bab0"/></to>
    </wire>
    <wire loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x10be96c70"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x10bd90748"/></to>
    </wire>
    <wire loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x10bd90748"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x10be607c8"/></to>
    </wire>
    <wire loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x10bf0a330"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x10bd8ec80"/></to>
    </wire>
    <wire loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x10bd8ec80"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x10be91a90"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Counter" scoped="" ref="0x10be91a90"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x10cc4f128"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Init" scoped="" ref="0x10be60020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10cc546e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Alarm" scoped="" ref="0x10be607c8"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x10cc53020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x10cc4d228"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x10be0b318"/></to>
    </wire>
    <wire loc="83:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x10be0b318"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x10bdfc020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x10ccb20c0"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x10be06558"/></to>
    </wire>
    <wire loc="84:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x10be06558"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x10be28020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Compare" scoped="" ref="0x10ccb13b0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x10be05980"/></to>
    </wire>
    <wire loc="85:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x10be05980"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x10be27340"/></to>
    </wire>
    <wire>
      <from><interface-ref name="TimerAsync" scoped="" ref="0x10ccae510"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x10be01c38"/></to>
    </wire>
    <wire loc="86:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x10be01c38"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x10be24c78"/></to>
    </wire>
    <wire>
      <from><interface-ref name="fired" scoped="" ref="0x10bec6cf0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x10bf17930"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AMSend" scoped="" ref="0x10cd231a8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x10cd17378"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x10cd23d60"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x10bf359f8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x10cd22940"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x10bf34758"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Acks" scoped="" ref="0x10c8478c8"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x10cd20020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Acks" scoped="" ref="0x10cd20020"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10bf67e00"/></to>
    </wire>
    <wire loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x10bf359f8"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x10bf7a7a0"/></to>
    </wire>
    <wire loc="63:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x10bf34758"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x10bf79448"/></to>
    </wire>
    <wire loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10bf67e00"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10bf78af0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Send" scoped="" ref="0x10cd16020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x10bf464f8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x10cd16bd8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x10bf34758"/></to>
    </wire>
    <wire loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x10bf464f8"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x10bf43d20"/></to>
    </wire>
    <wire loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x10bf42ac0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x10bf391c8"/></to>
    </wire>
    <wire loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x10bf391c8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x10bf7e920"/></to>
    </wire>
    <wire loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x10bf41700"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x10bf34758"/></to>
    </wire>
    <wire loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x10bf40d20"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x10bf359f8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="errorTask" scoped="" ref="0x10bf3f988"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="CancelTask" scoped="" ref="0x10bf3e160"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x10bf3a1a0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x10bf818e0"/></to>
    </wire>
    <wire loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x10bf4e378"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x10bf9b758"/></to>
    </wire>
    <wire loc="89:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x10bf9b758"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x10bfd4bf0"/></to>
    </wire>
    <wire loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x10bf35420"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x10bf7a1c8"/></to>
    </wire>
    <wire loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x10bf7a1c8"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x10bf91348"/></to>
    </wire>
    <wire loc="68:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x10bf7e920"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x10bf94aa8"/></to>
    </wire>
    <wire loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x10bf37e48"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x10bf7b628"/></to>
    </wire>
    <wire loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x10bf7b628"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x10bf92818"/></to>
    </wire>
    <wire loc="73:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x10bf7a7a0"/></from>
      <to><interface-ref name="PacketForActiveMessage" scoped="" ref="0x10bf8e060"/></to>
    </wire>
    <wire loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x10bf5e450"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x10bf774a0"/></to>
    </wire>
    <wire loc="77:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x10bf774a0"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x10bfad778"/></to>
    </wire>
    <wire loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x10bf37300"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x10bf7dab0"/></to>
    </wire>
    <wire loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x10bf7dab0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x10bf93c38"/></to>
    </wire>
    <wire loc="76:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10bf78af0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10bfb6db8"/></to>
    </wire>
    <wire loc="68:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x10bf57418"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x10bf76020"/></to>
    </wire>
    <wire loc="79:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x10bf76020"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x10bfac2d0"/></to>
    </wire>
    <wire loc="74:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x10bf79448"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x10bf91938"/></to>
    </wire>
    <wire loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMicro" scoped="" ref="0x10bf5f378"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x10bf9f848"/></to>
    </wire>
    <wire loc="90:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x10bf9f848"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x10bfd8c38"/></to>
    </wire>
    <wire loc="173:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x10bf97af8"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x10c2c9c50"/></to>
    </wire>
    <wire loc="275:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x10bfa4348"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x10c4dcb20"/></to>
    </wire>
    <wire loc="97:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x10bf91348"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x10c0b6e50"/></to>
    </wire>
    <wire loc="99:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketForActiveMessage" scoped="" ref="0x10bf8e060"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x10c0ba430"/></to>
    </wire>
    <wire loc="94:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x10bf94aa8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x10c0b9570"/></to>
    </wire>
    <wire loc="96:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x10bf92818"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x10c0b6348"/></to>
    </wire>
    <wire loc="85:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x10bf70b78"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x10bfa7020"/></to>
    </wire>
    <wire loc="273:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x10bfa7020"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x10c4de6b0"/></to>
    </wire>
    <wire loc="174:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x10bfad778"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x10c309628"/></to>
    </wire>
    <wire loc="95:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x10bf93c38"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x10c0b87a0"/></to>
    </wire>
    <wire loc="254:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x10bfd8c38"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x10c48dcc8"/></to>
    </wire>
    <wire loc="88:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x10bfa0358"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x10bfa1828"/></to>
    </wire>
    <wire loc="276:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x10bfa1828"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x10c4d2828"/></to>
    </wire>
    <wire loc="274:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x10bfabb78"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x10c4d5390"/></to>
    </wire>
    <wire loc="239:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10bfb6db8"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10c41a020"/></to>
    </wire>
    <wire loc="180:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x10bfac2d0"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x10c2fae08"/></to>
    </wire>
    <wire loc="98:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x10bf91938"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x10c08ce10"/></to>
    </wire>
    <wire loc="82:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x10bf71af0"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x10bfab020"/></to>
    </wire>
    <wire loc="198:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x10bfab020"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x10c330020"/></to>
    </wire>
    <wire loc="255:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x10bfd4bf0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x10c493e68"/></to>
    </wire>
    <wire loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x10c2c9c50"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x10c308248"/></to>
    </wire>
    <wire loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketRSSI" scoped="" ref="0x10c4dcb20"/></from>
      <to><interface-ref name="PacketRSSI" scoped="" ref="0x10c50b020"/></to>
    </wire>
    <wire loc="131:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Notifier" scoped="" ref="0x10bf8dbf8"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x10c1a8ca8"/></to>
    </wire>
    <wire loc="118:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SendResource" scoped="" ref="0x10bfb7b58"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x10c1b0200"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x10c1b0200"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x10cd93590"/></to>
    </wire>
    <wire loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x10c0b6e50"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x10c0e07d8"/></to>
    </wire>
    <wire loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x10c0b9570"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x10c0a8e70"/></to>
    </wire>
    <wire loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x10c0b6348"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x10c0a5b68"/></to>
    </wire>
    <wire loc="132:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0x10bfae9c0"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x10c207da8"/></to>
    </wire>
    <wire loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0x10c207da8"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x10c1fe080"/></to>
    </wire>
    <wire loc="133:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketForIeee154Message" scoped="" ref="0x10bfb6020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x10c1adba0"/></to>
    </wire>
    <wire loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x10c309628"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x10c302020"/></to>
    </wire>
    <wire loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTransmitPower" scoped="" ref="0x10c4de6b0"/></from>
      <to><interface-ref name="PacketTransmitPower" scoped="" ref="0x10c4c2b48"/></to>
    </wire>
    <wire loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x10c0b87a0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x10c0a5020"/></to>
    </wire>
    <wire loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x10c0ba430"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x10c0a9d60"/></to>
    </wire>
    <wire loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x10c48dcc8"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x10c47f478"/></to>
    </wire>
    <wire loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x10c4d2828"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x10c5f2670"/></to>
    </wire>
    <wire loc="78:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketLinkQuality" scoped="" ref="0x10c4d5390"/></from>
      <to><interface-ref name="PacketLinkQuality" scoped="" ref="0x10c505860"/></to>
    </wire>
    <wire loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10c41a020"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10c414940"/></to>
    </wire>
    <wire loc="129:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Send" scoped="" ref="0x10bf856d0"/></from>
      <to><interface-ref name="Ieee154Send" scoped="" ref="0x10c1a98f8"/></to>
    </wire>
    <wire loc="79:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x10c2fae08"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x10c2ef020"/></to>
    </wire>
    <wire loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x10c08ce10"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x10c0aa758"/></to>
    </wire>
    <wire loc="130:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Receive" scoped="" ref="0x10bf8d508"/></from>
      <to><interface-ref name="Ieee154Receive" scoped="" ref="0x10c1a8690"/></to>
    </wire>
    <wire loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioChannel" scoped="" ref="0x10c330020"/></from>
      <to><interface-ref name="RadioChannel" scoped="" ref="0x10c368e50"/></to>
    </wire>
    <wire loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x10c493e68"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x10c483510"/></to>
    </wire>
    <wire loc="80:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x10bff70d0"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x10c20b418"/></to>
    </wire>
    <wire loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x10c20b418"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x10c203788"/></to>
    </wire>
    <wire loc="81:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x10c02b6f8"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x10c075698"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x10bff5a40"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x10c48dcc8"/></to>
    </wire>
    <wire loc="83:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="RF230Packet" scoped="" ref="0x10c025918"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x10c4df530"/></to>
    </wire>
    <wire loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x10c4df530"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x10c4c3a50"/></to>
    </wire>
    <wire loc="89:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x10c0b2100"/></from>
      <to><interface-ref name="ActiveMessageConfig" scoped="" ref="0x10c00f130"/></to>
    </wire>
    <wire loc="90:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x10c0b3020"/></from>
      <to><interface-ref name="BareSend" scoped="" ref="0x10c124800"/></to>
    </wire>
    <wire loc="91:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x10c0ad9a8"/></from>
      <to><interface-ref name="TinyosReceive" scoped="" ref="0x10c1f6d48"/></to>
    </wire>
    <wire loc="92:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x10c0b55e0"/></from>
      <to><interface-ref name="TinyosPacket" scoped="" ref="0x10c1f5450"/></to>
    </wire>
    <wire loc="107:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x10c153a28"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x10c1b0200"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="111:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x10c153180"/></from>
      <to><interface-ref name="TinyosSend" scoped="" ref="0x10c1f6368"/></to>
    </wire>
    <wire loc="123:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x10c1a73c0"/></from>
      <to><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x10c20b418"/></to>
    </wire>
    <wire loc="124:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="Ieee154Packet" scoped="" ref="0x10c1a5da8"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x10c207da8"/></to>
    </wire>
    <wire loc="125:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x10c1a1020"/></from>
      <to><interface-ref name="Ieee154Send" scoped="" ref="0x10c1f81c8"/></to>
    </wire>
    <wire loc="126:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x10c1a19e0"/></from>
      <to><interface-ref name="Ieee154Receive" scoped="" ref="0x10c1f8bb0"/></to>
    </wire>
    <wire loc="127:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x10c1a20c0"/></from>
      <to><interface-ref name="Ieee154Packet" scoped="" ref="0x10c1f73a0"/></to>
    </wire>
    <wire loc="140:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x10c1f43e8"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x10c29edf0"/></to>
    </wire>
    <wire loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x10c29edf0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x10c295420"/></to>
    </wire>
    <wire loc="141:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x10c1f4da8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x10c30a1b8"/></to>
    </wire>
    <wire loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x10c30a1b8"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x10c307748"/></to>
    </wire>
    <wire loc="142:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x10c1f34c8"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x10c2050c0"/></to>
    </wire>
    <wire loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x10c2050c0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x10c23f460"/></to>
    </wire>
    <wire loc="147:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x10c204020"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x10c30a7c0"/></to>
    </wire>
    <wire loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x10c30a7c0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x10c307df0"/></to>
    </wire>
    <wire loc="152:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x10c296020"/></from>
      <to><interface-ref name="UniqueConfig" scoped="" ref="0x10bff0338"/></to>
    </wire>
    <wire loc="153:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x10c297c80"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x10c30b7c8"/></to>
    </wire>
    <wire loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/LowPowerListeningDummyC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x10c30b7c8"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x10c308d58"/></to>
    </wire>
    <wire loc="169:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x10c308248"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x10c3343e0"/></to>
    </wire>
    <wire loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x10c3343e0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x10c374c18"/></to>
    </wire>
    <wire loc="170:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x10c308d58"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x10c2fa4f8"/></to>
    </wire>
    <wire loc="80:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x10c2fa4f8"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x10c2f36b8"/></to>
    </wire>
    <wire loc="171:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x10c307748"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x10c3319c0"/></to>
    </wire>
    <wire loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x10c3319c0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x10c368838"/></to>
    </wire>
    <wire loc="172:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x10c307df0"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x10c2f7a80"/></to>
    </wire>
    <wire loc="83:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x10c2f7a80"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x10c2efc48"/></to>
    </wire>
    <wire loc="184:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10c2f4348"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10c41a020"/></to>
    </wire>
    <wire loc="189:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x10c2f69e8"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x10c331020"/></to>
    </wire>
    <wire loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x10c331020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x10c369e50"/></to>
    </wire>
    <wire loc="190:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x10c2f5500"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x10c489810"/></to>
    </wire>
    <wire loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="RadioPacket" scoped="" ref="0x10c489810"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x10c47b020"/></to>
    </wire>
    <wire loc="195:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x10c36b200"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x10c3df060"/></to>
    </wire>
    <wire>
      <from><interface-ref name="RadioSend" scoped="" ref="0x10c3df060"/></from>
      <to><interface-ref name="SubRadioSend" scoped="" ref="0x10c3da5b8"/></to>
    </wire>
    <wire loc="196:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x10c36bb28"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x10c2973e0"/></to>
    </wire>
    <wire loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x10c2973e0"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x10c295d48"/></to>
    </wire>
    <wire loc="197:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x10c36f0d0"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x10c3992e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="RadioState" scoped="" ref="0x10c3992e8"/></from>
      <to><interface-ref name="SubState" scoped="" ref="0x10c3db638"/></to>
    </wire>
    <wire loc="202:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x10c2996a0"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x10c3df908"/></to>
    </wire>
    <wire>
      <from><interface-ref name="RadioReceive" scoped="" ref="0x10c3df908"/></from>
      <to><interface-ref name="SubRadioReceive" scoped="" ref="0x10c3d9020"/></to>
    </wire>
    <wire loc="211:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x10c3d7da0"/></from>
      <to><interface-ref name="DummyConfig" scoped="" ref="0x10bfe3c10"/></to>
    </wire>
    <wire loc="212:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubRadioSend" scoped="" ref="0x10c3da5b8"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x10c3d02b8"/></to>
    </wire>
    <wire loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x10c3d02b8"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x10c3cdda0"/></to>
    </wire>
    <wire loc="213:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubRadioReceive" scoped="" ref="0x10c3d9020"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x10c3d0be0"/></to>
    </wire>
    <wire loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x10c3d0be0"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x10c3ca748"/></to>
    </wire>
    <wire loc="214:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubState" scoped="" ref="0x10c3db638"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x10c4e5e78"/></to>
    </wire>
    <wire loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x10c4e5e78"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x10c4c52d0"/></to>
    </wire>
    <wire loc="223:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x10c3ce898"/></from>
      <to><interface-ref name="RandomCollisionConfig" scoped="" ref="0x10bfe4e40"/></to>
    </wire>
    <wire loc="228:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x10c3cf578"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x10c41edf0"/></to>
    </wire>
    <wire loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x10c41edf0"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x10c4177f0"/></to>
    </wire>
    <wire loc="229:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x10c3ce020"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x10c41b748"/></to>
    </wire>
    <wire loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x10c41b748"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x10c414140"/></to>
    </wire>
    <wire loc="236:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x10c419d68"/></from>
      <to><interface-ref name="SoftwareAckConfig" scoped="" ref="0x10bfbd0f0"/></to>
    </wire>
    <wire loc="237:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x10c41aa50"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x10c454060"/></to>
    </wire>
    <wire>
      <from><interface-ref name="RadioSend" scoped="" ref="0x10c454060"/></from>
      <to><interface-ref name="SubRadioSend" scoped="" ref="0x10c49a5b8"/></to>
    </wire>
    <wire loc="238:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x10c419518"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x10c4e05f8"/></to>
    </wire>
    <wire loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x10c4e05f8"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x10c4c49e8"/></to>
    </wire>
    <wire loc="245:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x10c497da0"/></from>
      <to><interface-ref name="DummyConfig" scoped="" ref="0x10bfe3c10"/></to>
    </wire>
    <wire loc="246:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubRadioSend" scoped="" ref="0x10c49a5b8"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x10c4e1c48"/></to>
    </wire>
    <wire loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x10c4e1c48"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x10c4c40c0"/></to>
    </wire>
    <wire loc="247:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubRadioCCA" scoped="" ref="0x10c499780"/></from>
      <to><interface-ref name="RadioCCA" scoped="" ref="0x10c4e0d70"/></to>
    </wire>
    <wire loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioCCA" scoped="" ref="0x10c4e0d70"/></from>
      <to><interface-ref name="RadioCCA" scoped="" ref="0x10c4c32c0"/></to>
    </wire>
    <wire loc="252:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x10c488890"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x10c4d2828"/></to>
    </wire>
    <wire loc="253:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x10c487978"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x10c42f460"/></to>
    </wire>
    <wire loc="260:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x10c42e418"/></from>
      <to><interface-ref name="RadioPacket" scoped="" ref="0x10c4df530"/></to>
    </wire>
    <wire loc="271:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x10c4d19b8"/></from>
      <to><interface-ref name="RF230DriverConfig" scoped="" ref="0x10bfc6428"/></to>
    </wire>
    <wire loc="272:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x10c4cfa40"/></from>
      <to><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x10c48dcc8"/></to>
    </wire>
    <wire loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarmC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x10c075698"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x10c06b748"/></to>
    </wire>
    <wire loc="84:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x10c074a28"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x10c5f5418"/></to>
    </wire>
    <wire loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarmC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x10c06a770"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x10c074a28"/></to>
    </wire>
    <wire loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarmC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x10c0a1020"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x10c06c400"/></to>
    </wire>
    <wire loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x10c0d7a28"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x10c13b650"/></to>
    </wire>
    <wire loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x10c0df020"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x10c0b55e0"/></to>
    </wire>
    <wire loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x10c0dfe40"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x10c0b3020"/></to>
    </wire>
    <wire loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x10c0de830"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x10c0ad9a8"/></to>
    </wire>
    <wire loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x10c0dd020"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x10c0b2100"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x10c1af020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x10cd92388"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x10c1af760"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x10cd92ac8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x10cd913e8"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x10c1ae020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Queue" scoped="" ref="0x10cd91b68"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x10cd96718"/></to>
    </wire>
    <wire>
      <from><interface-ref name="grantedTask" scoped="" ref="0x10cd90780"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x10c23d3d8"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x10c13b650"/></to>
    </wire>
    <wire loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x10c23c020"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x10c204020"/></to>
    </wire>
    <wire loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x10c289438"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x10c293b38"/></to>
    </wire>
    <wire loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodC.nc">
      <from><interface-ref name="Neighborhood" scoped="" ref="0x10c293b38"/></from>
      <to><interface-ref name="Neighborhood" scoped="" ref="0x10c2b3768"/></to>
    </wire>
    <wire loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerC.nc">
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x10c286a50"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x10c2b7c08"/></to>
    </wire>
    <wire>
      <from><interface-ref name="NeighborhoodFlag" scoped="" ref="0x10c2b7c08"/></from>
      <to><interface-ref name="NeighborhoodFlag" scoped="" ref="0x10c2b1990"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x10c292bf0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x10c297c80"/></to>
    </wire>
    <wire loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x10c2916a0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x10c2996a0"/></to>
    </wire>
    <wire loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerC.nc">
      <from><interface-ref name="UniqueConfig" scoped="" ref="0x10c291e40"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x10c296020"/></to>
    </wire>
    <wire loc="81:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x10c2eeb70"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x10c2f69e8"/></to>
    </wire>
    <wire loc="82:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10c2ed658"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10c2f4348"/></to>
    </wire>
    <wire loc="84:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x10c32c508"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x10c2f5500"/></to>
    </wire>
    <wire loc="86:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerC.nc">
      <from><interface-ref name="DelayTimer" scoped="" ref="0x10c2eb1b0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x10c33e8d8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x10c33e8d8"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x10bd7e6a0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerP.nc">
      <from><interface-ref name="send" scoped="" ref="0x10c32a380"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioState" scoped="" ref="0x10c367848"/></from>
      <to><interface-ref name="RadioState" scoped="" ref="0x10c36f0d0"/></to>
    </wire>
    <wire loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x10c366748"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x10c06c400"/></to>
    </wire>
    <wire loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioSend" scoped="" ref="0x10c3652c8"/></from>
      <to><interface-ref name="RadioSend" scoped="" ref="0x10c36b200"/></to>
    </wire>
    <wire loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerC.nc">
      <from><interface-ref name="RadioReceive" scoped="" ref="0x10c365bf0"/></from>
      <to><interface-ref name="RadioReceive" scoped="" ref="0x10c36bb28"/></to>
    </wire>
    <wire loc="125:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="stateDoneTask" scoped="" ref="0x10c355368"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="sendTask" scoped="" ref="0x10c391190"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="280:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerP.nc">
      <from><interface-ref name="deliverTask" scoped="" ref="0x10c378368"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="SplitControl" scoped="" ref="0x10c39b978"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x10c3ddbf0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="RadioCCA" scoped="" ref="0x10c3de060"/></from>
      <to><interface-ref name="SubRadioCCA" scoped="" ref="0x10c3d9780"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Send" scoped="" ref="0x10c39a430"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x10c3dc740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="RadioPacket" scoped="" ref="0x10c3de780"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x10c3d7020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="UnconnectedConfig" scoped="" ref="0x10c3dd5b8"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x10c3d7da0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Receive" scoped="" ref="0x10c39ad18"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x10c3db060"/></to>
    </wire>
    <wire loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x10c3c9020"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x10c3cf578"/></to>
    </wire>
    <wire loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x10c3c4c18"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x10c3ce898"/></to>
    </wire>
    <wire loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x10c3c99f0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x10c3ce020"/></to>
    </wire>
    <wire loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x10c3c82d0"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x10c075698"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x10c3c43a0"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x10c3e9208"/></to>
    </wire>
    <wire loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x10c3e9208"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x10c3e2080"/></to>
    </wire>
    <wire loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerP.nc">
      <from><interface-ref name="calcNextRandom" scoped="" ref="0x10c3c0cd8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x10c3ea1a0"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x10c3e3020"/></to>
    </wire>
    <wire loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x10c3ed348"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10c3e46a0"/></to>
    </wire>
    <wire loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x10c4133f0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x10c41aa50"/></to>
    </wire>
    <wire loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x10c413dc0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x10c419518"/></to>
    </wire>
    <wire loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerC.nc">
      <from><interface-ref name="SoftwareAckConfig" scoped="" ref="0x10c411318"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x10c419d68"/></to>
    </wire>
    <wire loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x10c4125a8"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x10c075698"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerC.nc">
      <from><interface-ref name="AckReceivedFlag" scoped="" ref="0x10c40a468"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x10c436980"/></to>
    </wire>
    <wire>
      <from><interface-ref name="PacketFlag" scoped="" ref="0x10c436980"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x10c432900"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="SplitControl" scoped="" ref="0x10c458978"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x10c452bf0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="RadioCCA" scoped="" ref="0x10c453060"/></from>
      <to><interface-ref name="SubRadioCCA" scoped="" ref="0x10c499780"/></to>
    </wire>
    <wire>
      <from><interface-ref name="RadioState" scoped="" ref="0x10c4562e8"/></from>
      <to><interface-ref name="SubState" scoped="" ref="0x10c450638"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Send" scoped="" ref="0x10c457430"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x10c451740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="RadioPacket" scoped="" ref="0x10c453780"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x10c497020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="UnconnectedConfig" scoped="" ref="0x10c4525b8"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x10c497da0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="RadioReceive" scoped="" ref="0x10c454908"/></from>
      <to><interface-ref name="SubRadioReceive" scoped="" ref="0x10c499020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Receive" scoped="" ref="0x10c457d18"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x10c450060"/></to>
    </wire>
    <wire loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x10c4760c0"/></from>
      <to><interface-ref name="SubPacket" scoped="" ref="0x10c487978"/></to>
    </wire>
    <wire loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x10c47acc8"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x10c488890"/></to>
    </wire>
    <wire loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x10c478020"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x10c485e38"/></to>
    </wire>
    <wire loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/system/LocalTimeMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x10c485e38"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x10bd6c338"/></to>
    </wire>
    <wire loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerC.nc">
      <from><interface-ref name="TimeStampFlag" scoped="" ref="0x10c47a020"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x10c49c060"/></to>
    </wire>
    <wire>
      <from><interface-ref name="PacketFlag" scoped="" ref="0x10c49c060"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x10c432900"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="74:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x10c4d7020"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x10c5083b0"/></to>
    </wire>
    <wire loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="LocalTimeRadio" scoped="" ref="0x10c5f2670"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x10c7b3208"/></to>
    </wire>
    <wire loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Config" scoped="" ref="0x10c4f3c30"/></from>
      <to><interface-ref name="Config" scoped="" ref="0x10c4d19b8"/></to>
    </wire>
    <wire loc="68:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="TransmitPowerFlag" scoped="" ref="0x10c4f09e0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x10c7de0e0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="PacketFlag" scoped="" ref="0x10c7de0e0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x10c432900"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RSSIFlag" scoped="" ref="0x10c4ef678"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x10c7dc540"/></to>
    </wire>
    <wire>
      <from><interface-ref name="PacketFlag" scoped="" ref="0x10c7dc540"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x10c432900"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="76:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="TimeSyncFlag" scoped="" ref="0x10c4ed208"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x10c7daaa0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="PacketFlag" scoped="" ref="0x10c7daaa0"/></from>
      <to><interface-ref name="PacketFlag" scoped="" ref="0x10c432900"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="79:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x10c4ec020"/></from>
      <to><interface-ref name="PacketTimeStamp" scoped="" ref="0x10c4cfa40"/></to>
    </wire>
    <wire loc="81:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x10c4f7b48"/></from>
      <to><interface-ref name="LocalTimeRadio" scoped="" ref="0x10c5f2670"/></to>
    </wire>
    <wire loc="83:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RadioAlarm" scoped="" ref="0x10c4e8768"/></from>
      <to><interface-ref name="RadioAlarm" scoped="" ref="0x10c075698"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x10c5f5418"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x10c7ba6f0"/></to>
    </wire>
    <wire loc="86:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SELN" scoped="" ref="0x10c502a88"/></from>
      <to><interface-ref name="SELN" scoped="" ref="0x10c5af920"/></to>
    </wire>
    <wire loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SELN" scoped="" ref="0x10c5af920"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x10b5634d0"/></to>
    </wire>
    <wire loc="87:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x10c501ca0"/></from>
      <to><interface-ref name="SpiResource" scoped="" ref="0x10c5fbb18"/></to>
    </wire>
    <wire loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x10c5fbb18"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x10c61de80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x10c4faaf8"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x10c5fa770"/></to>
    </wire>
    <wire loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x10c5fa770"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x10c5d49d0"/></to>
    </wire>
    <wire loc="90:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="SLP_TR" scoped="" ref="0x10c4ff658"/></from>
      <to><interface-ref name="SLP_TR" scoped="" ref="0x10c5f9348"/></to>
    </wire>
    <wire loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="SLP_TR" scoped="" ref="0x10c5f9348"/></from>
      <to><interface-ref name="PortB7" scoped="" ref="0x10b56a1a0"/></to>
    </wire>
    <wire loc="91:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x10c4fe7d0"/></from>
      <to><interface-ref name="RSTN" scoped="" ref="0x10c5f84c0"/></to>
    </wire>
    <wire loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x10c5f84c0"/></from>
      <to><interface-ref name="PortA6" scoped="" ref="0x10b5651a0"/></to>
    </wire>
    <wire loc="93:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="IRQ" scoped="" ref="0x10c4f8020"/></from>
      <to><interface-ref name="IRQ" scoped="" ref="0x10c5f6648"/></to>
    </wire>
    <wire loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="IRQ" scoped="" ref="0x10c5f6648"/></from>
      <to><interface-ref name="IRQ" scoped="" ref="0x10c5ed020"/></to>
    </wire>
    <wire loc="94:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="Tasklet" scoped="" ref="0x10c4eaa40"/></from>
      <to><interface-ref name="Tasklet" scoped="" ref="0x10c06c400"/></to>
    </wire>
    <wire loc="95:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x10c4f1748"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x10c7e67e0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Alarm" scoped="" ref="0x10c7ba6f0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x10cde52d8"/></to>
    </wire>
    <wire loc="80:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x10c5d49d0"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x10c61a688"/></to>
    </wire>
    <wire loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x10c7b3208"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x10c7ef020"/></to>
    </wire>
    <wire loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PortCLKM" scoped="" ref="0x10c5e8c18"/></from>
      <to><interface-ref name="PortD6" scoped="" ref="0x10b57ac78"/></to>
    </wire>
    <wire loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="PortIRQ" scoped="" ref="0x10c5e7e08"/></from>
      <to><interface-ref name="PortD4" scoped="" ref="0x10b57c968"/></to>
    </wire>
    <wire loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x10c5ec598"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x10c6e4020"/></to>
    </wire>
    <wire loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x10c6e4020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x10c6d1808"/></to>
    </wire>
    <wire loc="81:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x10c61d1d8"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x10c619140"/></to>
    </wire>
    <wire loc="79:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x10c5d4388"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x10c61a080"/></to>
    </wire>
    <wire loc="77:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x10c5eece0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10c61ea30"/></to>
    </wire>
    <wire loc="82:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x10c61de80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x10c619da8"/></to>
    </wire>
    <wire loc="84:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="ResourceArbiter" scoped="" ref="0x10c5fc3c8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x10c6a4878"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x10c6a4878"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x10ce11390"/></to>
    </wire>
    <wire loc="85:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x10c64c020"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x10c6a3dd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x10c6a3dd8"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x10ce10808"/></to>
    </wire>
    <wire loc="86:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Spi" scoped="" ref="0x10c5fd150"/></from>
      <to><interface-ref name="SpiBus" scoped="" ref="0x10c652100"/></to>
    </wire>
    <wire loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SpiBus" scoped="" ref="0x10c652100"/></from>
      <to><interface-ref name="SPI" scoped="" ref="0x10c69f020"/></to>
    </wire>
    <wire loc="87:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x10c64c7c8"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x10b5173c8"/></to>
    </wire>
    <wire loc="241:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiP.nc">
      <from><interface-ref name="zeroTask" scoped="" ref="0x10c62bca0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="Mcu" scoped="" ref="0x10c695350"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x10b5173c8"/></to>
    </wire>
    <wire loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SS" scoped="" ref="0x10c699d28"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x10b5634d0"/></to>
    </wire>
    <wire loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SCK" scoped="" ref="0x10c69ce60"/></from>
      <to><interface-ref name="PortB1" scoped="" ref="0x10b562658"/></to>
    </wire>
    <wire loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MOSI" scoped="" ref="0x10c698020"/></from>
      <to><interface-ref name="PortB2" scoped="" ref="0x10b5617e0"/></to>
    </wire>
    <wire loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MISO" scoped="" ref="0x10c696190"/></from>
      <to><interface-ref name="PortB3" scoped="" ref="0x10b560968"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x10c6a3698"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x10ce100c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x10ce0f100"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x10c6a16a0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Queue" scoped="" ref="0x10ce0f880"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x10ce145f8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="grantedTask" scoped="" ref="0x10ce0e470"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x10c6e6838"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x10c6d2160"/></to>
    </wire>
    <wire loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x10c6ed6f0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x10c6d8180"/></to>
    </wire>
    <wire loc="73:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x10c6e0e18"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x10c6cc020"/></to>
    </wire>
    <wire loc="74:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x10c6e0e18"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x10c71f360"/></to>
    </wire>
    <wire loc="75:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x10c6e0e18"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x10c71c770"/></to>
    </wire>
    <wire>
      <from><interface-ref name="HplAtm128Timer" scoped="" ref="0x10ce53308"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x10c6ed6f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="HplAtm128Compare" scoped="" ref="0x10ce4e540"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x10c6e0e18"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="27:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x10c79d020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x10c6ed6f0"/></to>
    </wire>
    <wire loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x10c7ee230"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x10c7f75a8"/></to>
    </wire>
    <wire loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/LocalTimeMicroC.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x10c7f47f8"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x10c7ae020"/></to>
    </wire>
    <wire loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x10c7ae020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x10c7abb90"/></to>
    </wire>
    <wire loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x10c7a8c58"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x10c6ed6f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x10c83c268"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x10bf359f8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x10c83ce20"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x10bf34758"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/MainC.nc">
      <documentation loc="1:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.7 2009-07-01 19:27:00 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformC.nc">
      <documentation loc="1:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.7 2009-07-01 19:27:00 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformP.nc" safe="">
      <documentation loc="1:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.7 2009-07-01 19:27:00 scipio Exp $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="15:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/micaz/MotePlatformC.nc">
      <documentation loc="10:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/micaz/MotePlatformC.nc">
        <short>&#10; The porttion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="18:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/micaz/MotePlatformP.nc" safe="">
      <documentation loc="12:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/micaz/MotePlatformP.nc">
        <short>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.</short>
        <long>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <documentation loc="27:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="31(HplAtm128GeneralIOC.PortA):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="32(HplAtm128GeneralIOC.PortA.Bit0):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="32(HplAtm128GeneralIOC.PortA.Bit1):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="32(HplAtm128GeneralIOC.PortA.Bit2):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="32(HplAtm128GeneralIOC.PortA.Bit3):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="32(HplAtm128GeneralIOC.PortA.Bit4):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="32(HplAtm128GeneralIOC.PortA.Bit5):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="32(HplAtm128GeneralIOC.PortA.Bit6):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="32(HplAtm128GeneralIOC.PortA.Bit7):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="31(HplAtm128GeneralIOC.PortB):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:37">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:36">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="32(HplAtm128GeneralIOC.PortB.Bit0):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="32(HplAtm128GeneralIOC.PortB.Bit1):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="32(HplAtm128GeneralIOC.PortB.Bit2):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="32(HplAtm128GeneralIOC.PortB.Bit3):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="32(HplAtm128GeneralIOC.PortB.Bit4):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="32(HplAtm128GeneralIOC.PortB.Bit5):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="32(HplAtm128GeneralIOC.PortB.Bit6):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="32(HplAtm128GeneralIOC.PortB.Bit7):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="31(HplAtm128GeneralIOC.PortC):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:39">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="32(HplAtm128GeneralIOC.PortC.Bit0):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="32(HplAtm128GeneralIOC.PortC.Bit1):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="32(HplAtm128GeneralIOC.PortC.Bit2):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="32(HplAtm128GeneralIOC.PortC.Bit3):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="32(HplAtm128GeneralIOC.PortC.Bit4):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="32(HplAtm128GeneralIOC.PortC.Bit5):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="32(HplAtm128GeneralIOC.PortC.Bit6):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="32(HplAtm128GeneralIOC.PortC.Bit7):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="31(HplAtm128GeneralIOC.PortD):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:43">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="32(HplAtm128GeneralIOC.PortD.Bit0):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="32(HplAtm128GeneralIOC.PortD.Bit1):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="32(HplAtm128GeneralIOC.PortD.Bit2):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="32(HplAtm128GeneralIOC.PortD.Bit3):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="32(HplAtm128GeneralIOC.PortD.Bit4):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="32(HplAtm128GeneralIOC.PortD.Bit5):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="32(HplAtm128GeneralIOC.PortD.Bit6):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="32(HplAtm128GeneralIOC.PortD.Bit7):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="31(HplAtm128GeneralIOC.PortE):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:46">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:45">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:44">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="32(HplAtm128GeneralIOC.PortE.Bit0):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="32(HplAtm128GeneralIOC.PortE.Bit1):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="32(HplAtm128GeneralIOC.PortE.Bit2):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="32(HplAtm128GeneralIOC.PortE.Bit3):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="32(HplAtm128GeneralIOC.PortE.Bit4):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="32(HplAtm128GeneralIOC.PortE.Bit5):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="32(HplAtm128GeneralIOC.PortE.Bit6):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="32(HplAtm128GeneralIOC.PortE.Bit7):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="31(HplAtm128GeneralIOC.PortF):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="32(HplAtm128GeneralIOC.PortF.Bit0):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="32(HplAtm128GeneralIOC.PortF.Bit1):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="32(HplAtm128GeneralIOC.PortF.Bit2):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="32(HplAtm128GeneralIOC.PortF.Bit3):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="32(HplAtm128GeneralIOC.PortF.Bit4):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="32(HplAtm128GeneralIOC.PortF.Bit5):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="32(HplAtm128GeneralIOC.PortF.Bit6):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="32(HplAtm128GeneralIOC.PortF.Bit7):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="33(HplAtm128GeneralIOC.F0):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="33(HplAtm128GeneralIOC.F1):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="33(HplAtm128GeneralIOC.F2):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="33(HplAtm128GeneralIOC.F3):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="33(HplAtm128GeneralIOC.F4):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="33(HplAtm128GeneralIOC.F5):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="33(HplAtm128GeneralIOC.F6):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="33(HplAtm128GeneralIOC.F7):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="33(HplAtm128GeneralIOC.G0):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="33(HplAtm128GeneralIOC.G1):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="33(HplAtm128GeneralIOC.G2):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="33(HplAtm128GeneralIOC.G3):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="33(HplAtm128GeneralIOC.G4):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/MeasureClockC.nc">
      <documentation loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10; @author Janos Sallai&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/system/RealMainP.nc" safe="">
      <documentation loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/system/TinySchedulerC.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="63:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/McuSleepC.nc" safe="">
      <documentation loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.5 2009-02-04 19:31:43 sallai Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10; @date   October 30, 2007&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PrintfC" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/PrintfC.nc">
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="34(SerialActiveMessageC.AM):/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="37(SerialDispatcherC.SerialDispatcherP):/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformSerialC.nc">
      <documentation loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformSerialC.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:42 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128Uart0C.nc">
      <documentation loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128Uart0C.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:02 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C.UartP" loc="46(Atm128Uart0C.UartP):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128UartP.nc">
      <documentation loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128UartC" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128UartC.nc">
      <documentation loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128UartC.nc">
        <short>&#10; HPL for the Atmega 128 serial ports.</short>
        <long>&#10; HPL for the Atmega 128 serial ports.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128UartP" loc="92:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/HplAtm128UartP.nc">
      <documentation loc="82:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/HplAtm128UartP.nc">
        <short> &#10; Private component of the Atmega1281 serial port HPL.</short>
        <long> &#10; Private component of the Atmega1281 serial port HPL.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CounterMicro32C" loc="22:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/CounterMicro32C.nc">
      <documentation loc="11:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/CounterMicro32C.nc">
        <short>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterThree16C" loc="22:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/CounterThree16C.nc">
      <documentation loc="11:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/CounterThree16C.nc">
        <short>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer3C" loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <documentation loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
        <short>&#10; HPL interface to Atmega1281 timer 3.</short>
        <long>&#10; HPL interface to Atmega1281 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer3P" loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer3P.nc" safe="">
      <documentation loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega1281 timer 3.</short>
        <long>&#10; Internal component of the HPL interface to Atmega1281 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="InitThreeP.InitThree" loc="35(InitThreeP.InitThree):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterThree16C.NCounter" loc="33(CounterThree16C.NCounter):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TThree" ref="0x10b4e9d70"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMicro32C.Transform32" loc="43(CounterMicro32C.Transform32):/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/TransformCounterC.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TMicro" ref="0x10b4ad778"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TThree" ref="0x10b4e9d70"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="counter_three_overflow_t" ref="0x10b4f6630"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PrintfC.SerialAMSenderC" loc="39(PrintfC.SerialAMSenderC):/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialAMSenderC.nc">
      <documentation loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialAMSenderC"/>
        <arguments>
          <value cst="I:100">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PrintfC.SerialAMSenderC.AMQueueEntryP" loc="35(PrintfC.SerialAMSenderC.AMQueueEntryP):/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueEntryP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialAMQueueP" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialAMQueueP.nc">
      <documentation loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialAMQueueP.AMQueueImplP" loc="37(SerialAMQueueP.AMQueueImplP):/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueImplP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PrintfC.QueueC" loc="42(PrintfC.QueueC):/usr/local/Cellar/tinyos/2.1.1/tos/system/QueueC.nc">
      <documentation loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <value cst="I:250">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PrintfP" loc="84:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/PrintfP.nc" safe="">
      <module/>
    </component>
    <component qname="LedsC" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/system/LedsC.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/system/LedsP.nc" safe="">
      <documentation loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="1:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.7 2009-07-01 19:27:00 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="BaseC" loc="6:BaseC.nc">
      <module/>
    </component>
    <component qname="BaseAppC.Timer0" loc="36(BaseAppC.Timer0):/usr/local/Cellar/tinyos/2.1.1/tos/system/TimerMilliC.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/system/TimerMilliP.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/AlarmCounterMilliP.nc">
      <documentation loc="11:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="47(AlarmCounterMilliP.Atm128AlarmAsyncC):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP" loc="47(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <documentation loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm1281AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x10bd8ac00"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm1281Timer2AsyncC" loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <documentation loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer2AsyncP" loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc" safe="">
      <documentation loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
        <short>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode.</short>
        <long>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode. This is a specialised&#10; HPL component that assumes that timer 2 is used in ASYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="35(HilTimerMilliC.AlarmToTimerC):/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="35(HilTimerMilliC.VirtualizeTimerC):/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="35(HilTimerMilliC.CounterToLocalTimeC):/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BaseAppC.Timer1" loc="36(BaseAppC.Timer1):/usr/local/Cellar/tinyos/2.1.1/tos/system/TimerMilliC.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BaseAppC.Timer2" loc="36(BaseAppC.Timer2):/usr/local/Cellar/tinyos/2.1.1/tos/system/TimerMilliC.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BaseAppC.AMSenderC" loc="39(BaseAppC.AMSenderC):/usr/local/Cellar/tinyos/2.1.1/tos/system/AMSenderC.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="BaseAppC.AMSenderC.SenderC" loc="39(BaseAppC.AMSenderC.SenderC):/usr/local/Cellar/tinyos/2.1.1/tos/system/DirectAMSenderC.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="BaseAppC.AMSenderC.SenderC.AMQueueEntryP" loc="35(BaseAppC.AMSenderC.SenderC.AMQueueEntryP):/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueEntryP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="37(AMQueueP.AMQueueImplP):/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueImplP.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageC" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230ActiveMessageC" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="RF230RadioC" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <configuration/>
    </component>
    <component qname="RF230RadioP" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioP.nc">
      <module/>
    </component>
    <component qname="RadioAlarmC" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarmC.nc">
      <configuration/>
    </component>
    <component qname="RadioAlarmP" loc="27:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarmP.nc">
      <module/>
    </component>
    <component qname="TaskletC" loc="27:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/TaskletC.nc">
      <module/>
    </component>
    <component qname="ActiveMessageLayerC" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <configuration/>
    </component>
    <component qname="ActiveMessageLayerP" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc">
      <module/>
    </component>
    <component qname="ActiveMessageAddressC" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RF230RadioC.AutoResourceAcquireLayerC" loc="24(RF230RadioC.AutoResourceAcquireLayerC):/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/AutoResourceAcquireLayerC.nc">
      <instance number="0">
        <component-ref qname="AutoResourceAcquireLayerC"/>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.SendResourceC" loc="73(RF230RadioC.SendResourceC):/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:RADIO_SEND_RESOURCE">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230RadioC.SendResourceC.Queue" loc="32(RF230RadioC.SendResourceC.Queue):/usr/local/Cellar/tinyos/2.1.1/tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RF230RadioC.SendResourceC.Arbiter" loc="49(RF230RadioC.SendResourceC.Arbiter):/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleArbiterP.nc">
      <documentation loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="Ieee154MessageLayerC" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154MessageLayerC.nc">
      <module/>
    </component>
    <component qname="TinyosNetworkLayerC" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TinyosNetworkLayerC.nc">
      <module/>
    </component>
    <component qname="Ieee154PacketLayerC" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayerC.nc">
      <configuration/>
    </component>
    <component qname="Ieee154PacketLayerP" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc">
      <module/>
    </component>
    <component qname="UniqueLayerC" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerC.nc">
      <configuration/>
    </component>
    <component qname="UniqueLayerP" loc="27:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerP.nc">
      <module/>
    </component>
    <component qname="NeighborhoodC" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodC.nc">
      <configuration/>
    </component>
    <component qname="NeighborhoodP" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodP.nc">
      <module/>
    </component>
    <component qname="UniqueLayerC.NeighborhoodFlagC" loc="24(UniqueLayerC.NeighborhoodFlagC):/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodFlagC.nc">
      <instance number="0">
        <component-ref qname="NeighborhoodFlagC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="LowPowerListeningDummyC" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/LowPowerListeningDummyC.nc">
      <configuration/>
    </component>
    <component qname="LowPowerListeningDummyP" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/LowPowerListeningDummyP.nc">
      <module/>
    </component>
    <component qname="PacketLinkLayerC" loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerC.nc">
      <documentation loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerC.nc">
        <short>&#10; Reliable Packet Link Functionality&#10; </short>
        <long>&#10; Reliable Packet Link Functionality&#10; @author David Moss&#10; @author Jon Wyant&#10; @author Miklos Maroti&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PacketLinkLayerP" loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerP.nc">
      <documentation loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerP.nc">
        <short>&#10; Reliable Packet Link Functionality&#10; </short>
        <long>&#10; Reliable Packet Link Functionality&#10; @author David Moss&#10; @author Jon Wyant&#10; @author Miklos Maroti&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PacketLinkLayerC.DelayTimerC" loc="36(PacketLinkLayerC.DelayTimerC):/usr/local/Cellar/tinyos/2.1.1/tos/system/TimerMilliC.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="MessageBufferLayerC" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerC.nc">
      <configuration/>
    </component>
    <component qname="MessageBufferLayerP" loc="27:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerP.nc">
      <module/>
    </component>
    <component qname="RF230RadioC.TrafficMonitorLayerC" loc="24(RF230RadioC.TrafficMonitorLayerC):/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <instance number="0">
        <component-ref qname="DummyLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RandomCollisionLayerC" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerC.nc">
      <configuration/>
    </component>
    <component qname="RandomCollisionLayerP" loc="27:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerP.nc">
      <module/>
    </component>
    <component qname="RandomC" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/system/RandomC.nc">
      <documentation loc="22:/usr/local/Cellar/tinyos/2.1.1/tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="21:/usr/local/Cellar/tinyos/2.1.1/tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SoftwareAckLayerC" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerC.nc">
      <configuration/>
    </component>
    <component qname="SoftwareAckLayerP" loc="27:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerP.nc">
      <module/>
    </component>
    <component qname="SoftwareAckLayerC.MetadataFlagC" loc="24(SoftwareAckLayerC.MetadataFlagC):/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/MetadataFlagC.nc">
      <instance number="0">
        <component-ref qname="MetadataFlagC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="MetadataFlagsLayerC" loc="27:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MetadataFlagsLayerC.nc">
      <module/>
    </component>
    <component qname="RF230RadioC.CsmaLayerC" loc="24(RF230RadioC.CsmaLayerC):/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <instance number="1">
        <component-ref qname="DummyLayerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimeStampingLayerC" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerC.nc">
      <configuration/>
    </component>
    <component qname="TimeStampingLayerP" loc="27:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerP.nc">
      <module/>
    </component>
    <component qname="LocalTimeMilliC" loc="19:/usr/local/Cellar/tinyos/2.1.1/tos/system/LocalTimeMilliC.nc">
      <documentation loc="11:/usr/local/Cellar/tinyos/2.1.1/tos/system/LocalTimeMilliC.nc">
        <short>&#10; Provide current time via the LocalTime&#60;TMilli> interface.</short>
        <long>&#10; Provide current time via the LocalTime&#60;TMilli> interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="TimeStampingLayerC.TimeStampFlagC" loc="24(TimeStampingLayerC.TimeStampFlagC):/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/MetadataFlagC.nc">
      <instance number="1">
        <component-ref qname="MetadataFlagC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230DriverLayerC" loc="27:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <configuration/>
    </component>
    <component qname="RF230DriverLayerP" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <module/>
    </component>
    <component qname="HplRF230C" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <configuration/>
    </component>
    <component qname="HplRF230P" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <module/>
    </component>
    <component qname="Atm128SpiC" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiC.nc">
      <documentation loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiC.nc">
        <short>&#10; The HAL of the SPI bus on the atm128.</short>
        <long>&#10; The HAL of the SPI bus on the atm128.&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiC.nc,v 1.6 2009-03-09 18:12:58 mmaroti Exp $&#10; &#60;/pre>&#10;&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10; @author Joe Polastre&#10; @date   September 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128SpiP" loc="75:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiP.nc" safe="">
      <documentation loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiP.nc">
        <short>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.</short>
        <long>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.  This module assumes the bus has been reserved and&#10; checks that the bus owner is in fact the person using the bus.&#10; SpiPacket provides an asynchronous send interface where the&#10; transmit data length is equal to the receive data length, while&#10; SpiByte provides an interface for sending a single byte&#10; synchronously. SpiByte allows a component to send a few bytes&#10; in a simple fashion: if more than a handful need to be sent,&#10; SpiPacket should be used.&#10;&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiP.nc,v 1.11 2009-09-09 19:44:16 mmaroti Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128SpiC" loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <documentation loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/HplAtm128SpiC.nc">
        <short>&#10; Configuration encapsulating the basic SPI HPL for the atm128.</short>
        <long>&#10; Configuration encapsulating the basic SPI HPL for the atm128.&#10;&#10; &#60;pre>&#10; $Id: HplAtm128SpiC.nc,v 1.4 2006-12-12 18:23:04 vlahan Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128SpiP" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/HplAtm128SpiP.nc" safe="">
      <documentation loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/HplAtm128SpiP.nc">
        <short>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.</short>
        <long>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter" loc="73(Atm128SpiC.Arbiter):/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:Atm128SpiC.Resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Queue" loc="32(Atm128SpiC.Arbiter.Queue):/usr/local/Cellar/tinyos/2.1.1/tos/system/FcfsResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Arbiter" loc="49(Atm128SpiC.Arbiter.Arbiter):/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleArbiterP.nc">
      <documentation loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128Timer1C" loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <documentation loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
        <short>&#10; HPL interface to Atmega1281 timer 1.</short>
        <long>&#10; HPL interface to Atmega1281 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer1P" loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc" safe="">
      <documentation loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega1281 timer 1.</short>
        <long>&#10; Internal component of the HPL interface to Atmega1281 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplRF230C.AlarmC" loc="28(HplRF230C.AlarmC):/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/AlarmOne16C.nc">
      <documentation loc="11:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmOne16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="InitOneP.InitOne" loc="35(InitOneP.InitOne):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplRF230C.AlarmC.NAlarm" loc="42(HplRF230C.AlarmC.NAlarm):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128AlarmC.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TOne" ref="0x10b4e99f0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/LocalTimeMicroC.nc">
      <configuration/>
    </component>
    <component qname="CounterOne16C" loc="22:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/CounterOne16C.nc">
      <documentation loc="11:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/CounterOne16C.nc">
        <short>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines. The mica&#10; family 32kHz clock is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterOne16C.NCounter" loc="33(CounterOne16C.NCounter):/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TOne" ref="0x10b4e99f0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC.TransformCounterC" loc="43(LocalTimeMicroC.TransformCounterC):/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/TransformCounterC.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TMicro" ref="0x10b4ad778"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TMicro" ref="0x10b4ad778"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LocalTimeMicroC.CounterToLocalTimeC" loc="35(LocalTimeMicroC.CounterToLocalTimeC):/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TMicro" ref="0x10b4ad778"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/micaz/BusyWaitMicroC.nc">
      <module/>
    </component>
    <component qname="RF230DriverLayerC.TransmitPowerFlagC" loc="24(RF230DriverLayerC.TransmitPowerFlagC):/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/MetadataFlagC.nc">
      <instance number="2">
        <component-ref qname="MetadataFlagC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230DriverLayerC.RSSIFlagC" loc="24(RF230DriverLayerC.RSSIFlagC):/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/MetadataFlagC.nc">
      <instance number="3">
        <component-ref qname="MetadataFlagC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RF230DriverLayerC.TimeSyncFlagC" loc="24(RF230DriverLayerC.TimeSyncFlagC):/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/MetadataFlagC.nc">
      <instance number="4">
        <component-ref qname="MetadataFlagC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BaseAppC.AMReceiverC" loc="35(BaseAppC.AMReceiverC):/usr/local/Cellar/tinyos/2.1.1/tos/system/AMReceiverC.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x10b59c750" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x10b59ca98" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x10b59cde0" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x10b5ad020" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x10b5ad388" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x10b5ad6f0" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x10b5ada20" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x10b633560" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x10b6338c8" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x10b633c30" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x10b642020" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128UartP" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128UartP.nc" abstract="" safe="">
      <documentation loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128TimerInitC" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128TimerInitC.nc" abstract="" safe="">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x10bb72800" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x10bb72800"/></type-var>
        </typedef>
        <constant name="prescaler" ref="0x10bb72b50" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128CounterC" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128CounterC.nc" abstract="" safe="">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x10bb86110" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x10bb86110"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x10bb86860" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x10bb86860"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x10bb969d8" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x10bb969d8"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x10bb92198" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x10bb92198"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x10bb92560" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x10bb92560"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x10bb92cd8" loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x10bb92cd8"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x10bb910c8" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x10bb91858" loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x10bb91858"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="SerialAMSenderC" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialAMSenderC.nc" abstract="">
      <documentation loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x10bbd4170" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialAMSenderC.nc">
          <component-ref qname="SerialAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x10bbd0b60" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x10bbdfb88" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="QueueC" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/system/QueueC.nc" abstract="">
      <documentation loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0x10bc57270" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x10bc57270"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x10bc575c8" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x10bd8ac00" loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x10bd8ac00"/></type-var>
        </typedef>
        <constant name="divider" ref="0x10bd87020" loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm1281AlarmAsyncP" loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc" abstract="" safe="">
      <documentation loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x10bdad480" loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x10bdad480"/></type-var>
        </typedef>
        <constant name="divider" ref="0x10bdad770" loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x10bd99c68" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x10bd99c68"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x10bec4cd8" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x10bec4cd8"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x10bec1020" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x10bf15a00" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x10bf15a00"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMSenderC.nc" abstract="">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x10bf26688" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="DirectAMSenderC" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/system/DirectAMSenderC.nc" abstract="">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x10bf1ed18" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/system/DirectAMSenderC.nc">
          <component-ref qname="DirectAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AutoResourceAcquireLayerC" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/AutoResourceAcquireLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleFcfsArbiterC" loc="73:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleFcfsArbiterC.nc" abstract="">
      <documentation loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x10c14d578" loc="73:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleFcfsArbiterC.nc">
          <component-ref qname="SimpleFcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x10c142d10" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleArbiterP" loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleArbiterP.nc" abstract="" safe="">
      <documentation loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="NeighborhoodFlagC" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodFlagC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="DummyLayerC" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="MetadataFlagC" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/MetadataFlagC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmOne16C" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/AlarmOne16C.nc" abstract="">
      <documentation loc="11:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/AlarmOne16C.nc">
        <short>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica&#10; family 32kHz Alarm is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10; &#60;p>&#10; Assumes an ~8MHz CPU clock, replace this component if you are running at&#10; a radically different frequency.&#10; &#60;p>&#10; Upto three of these alarms can be created (one per hardware compare&#10; register).&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmC" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128AlarmC.nc" abstract="" safe="">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128AlarmC.nc">
        <short>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.</short>
        <long>&#10; Build a TEP102 Alarm from an Atmega128 hardware timer and one of its&#10; compare registers.&#10; @param frequency_tag The frequency tag for this Alarm&#10; @param timer_size The width of this Alarm&#10; @param mindt The shortest time in the future this Alarm can be set&#10;   (in its own time units). Has to be at least 2, as setting a compare&#10;   register one above the current counter value is unreliable. Has to be&#10;   large enough that the Alarm time does not pass between the computation&#10;   of &#60;code>expires&#60;/code> and actually setting the compare register.&#10;   Check this (for high-frequency timers) by inspecting the generated&#10;   assembly code...&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x10c794210" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x10c794210"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x10c794960" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x10c794960"/></type-var>
        </typedef>
        <constant name="mindt" ref="0x10c794c60" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128AlarmC.nc">
          <component-ref qname="Atm128AlarmC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMReceiverC" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMReceiverC.nc" abstract="">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x10c845980" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMReceiverC.nc">
          <component-ref qname="AMReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x10b53ca30" loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x10b53ca30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10b53cd80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x10b52f618" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x10b52f618"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x10b52f968"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x10b538508" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x10b538508"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10b538858"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10b53a8e8" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10b53a8e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10b53ac38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x10b541790" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x10b541790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x10b541ae0"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x10b541c68"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x10b541df0"/>
        <function-ref name="actualMicro" scoped="" ref="0x10b538020"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x10b5381a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x10b53e6c0" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x10b53e6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10b53ea10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10b53e020" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10b53e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10b53e370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x10b53ed88" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x10b53ed88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10b53d170"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x10b540d20" loc="18:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x10b540d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10b5500a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x10b540690" loc="17:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x10b540690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10b5409e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x10b54c4f8" loc="22:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x10b54c4f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10b54c848"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x10b554388" loc="21:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x10b554388"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5546d8"/>
        <function-ref name="isInput" scoped="" ref="0x10b554860"/>
        <function-ref name="toggle" scoped="" ref="0x10b5549e8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b554b70"/>
        <function-ref name="get" scoped="" ref="0x10b554cf8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b554e80"/>
        <function-ref name="set" scoped="" ref="0x10b54c030"/>
        <function-ref name="clr" scoped="" ref="0x10b54c1b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x10b54d0e0" loc="20:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x10b54d0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10b54d430"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x10b595968" loc="91:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x10b595968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5940f0"/>
        <function-ref name="isInput" scoped="" ref="0x10b594278"/>
        <function-ref name="toggle" scoped="" ref="0x10b594400"/>
        <function-ref name="isOutput" scoped="" ref="0x10b594588"/>
        <function-ref name="get" scoped="" ref="0x10b594710"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b594898"/>
        <function-ref name="set" scoped="" ref="0x10b594a20"/>
        <function-ref name="clr" scoped="" ref="0x10b594ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x10b57f4d0" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x10b57f4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b57f820"/>
        <function-ref name="isInput" scoped="" ref="0x10b57f9a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b57fb30"/>
        <function-ref name="isOutput" scoped="" ref="0x10b57fcb8"/>
        <function-ref name="get" scoped="" ref="0x10b57fe40"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b57e020"/>
        <function-ref name="set" scoped="" ref="0x10b57e1a8"/>
        <function-ref name="clr" scoped="" ref="0x10b57e330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x10b5844d0" loc="76:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x10b5844d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b584820"/>
        <function-ref name="isInput" scoped="" ref="0x10b5849a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b584b30"/>
        <function-ref name="isOutput" scoped="" ref="0x10b584cb8"/>
        <function-ref name="get" scoped="" ref="0x10b584e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b583020"/>
        <function-ref name="set" scoped="" ref="0x10b5831a8"/>
        <function-ref name="clr" scoped="" ref="0x10b583330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x10b58a1a0" loc="85:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x10b58a1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b58a4f0"/>
        <function-ref name="isInput" scoped="" ref="0x10b58a678"/>
        <function-ref name="toggle" scoped="" ref="0x10b58a800"/>
        <function-ref name="isOutput" scoped="" ref="0x10b58a988"/>
        <function-ref name="get" scoped="" ref="0x10b58ab10"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b58ac98"/>
        <function-ref name="set" scoped="" ref="0x10b58ae20"/>
        <function-ref name="clr" scoped="" ref="0x10b589020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x10b5651a0" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x10b5651a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5654f0"/>
        <function-ref name="isInput" scoped="" ref="0x10b565678"/>
        <function-ref name="toggle" scoped="" ref="0x10b565800"/>
        <function-ref name="isOutput" scoped="" ref="0x10b565988"/>
        <function-ref name="get" scoped="" ref="0x10b565b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b565c98"/>
        <function-ref name="set" scoped="" ref="0x10b565e20"/>
        <function-ref name="clr" scoped="" ref="0x10b564020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x10b58de00" loc="83:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x10b58de00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b58c1a8"/>
        <function-ref name="isInput" scoped="" ref="0x10b58c330"/>
        <function-ref name="toggle" scoped="" ref="0x10b58c4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b58c640"/>
        <function-ref name="get" scoped="" ref="0x10b58c7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b58c950"/>
        <function-ref name="set" scoped="" ref="0x10b58cad8"/>
        <function-ref name="clr" scoped="" ref="0x10b58cc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x10b5634d0" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x10b5634d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b563820"/>
        <function-ref name="isInput" scoped="" ref="0x10b5639a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b563b30"/>
        <function-ref name="isOutput" scoped="" ref="0x10b563cb8"/>
        <function-ref name="get" scoped="" ref="0x10b563e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b562020"/>
        <function-ref name="set" scoped="" ref="0x10b5621a8"/>
        <function-ref name="clr" scoped="" ref="0x10b562330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x10b577658" loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x10b577658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5779a8"/>
        <function-ref name="isInput" scoped="" ref="0x10b577b30"/>
        <function-ref name="toggle" scoped="" ref="0x10b577cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b577e40"/>
        <function-ref name="get" scoped="" ref="0x10b576020"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5761a8"/>
        <function-ref name="set" scoped="" ref="0x10b576330"/>
        <function-ref name="clr" scoped="" ref="0x10b5764b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x10b57c968" loc="68:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x10b57c968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b57ccb8"/>
        <function-ref name="isInput" scoped="" ref="0x10b57ce40"/>
        <function-ref name="toggle" scoped="" ref="0x10b57b020"/>
        <function-ref name="isOutput" scoped="" ref="0x10b57b1a8"/>
        <function-ref name="get" scoped="" ref="0x10b57b330"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b57b4b8"/>
        <function-ref name="set" scoped="" ref="0x10b57b640"/>
        <function-ref name="clr" scoped="" ref="0x10b57b7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x10b580968" loc="79:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x10b580968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b580cb8"/>
        <function-ref name="isInput" scoped="" ref="0x10b580e40"/>
        <function-ref name="toggle" scoped="" ref="0x10b58f020"/>
        <function-ref name="isOutput" scoped="" ref="0x10b58f1a8"/>
        <function-ref name="get" scoped="" ref="0x10b58f330"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b58f4b8"/>
        <function-ref name="set" scoped="" ref="0x10b58f640"/>
        <function-ref name="clr" scoped="" ref="0x10b58f7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x10b55c968" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x10b55c968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b55ccb8"/>
        <function-ref name="isInput" scoped="" ref="0x10b55ce40"/>
        <function-ref name="toggle" scoped="" ref="0x10b55b020"/>
        <function-ref name="isOutput" scoped="" ref="0x10b55b1a8"/>
        <function-ref name="get" scoped="" ref="0x10b55b330"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b55b4b8"/>
        <function-ref name="set" scoped="" ref="0x10b55b640"/>
        <function-ref name="clr" scoped="" ref="0x10b55b7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x10b560968" loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x10b560968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b560cb8"/>
        <function-ref name="isInput" scoped="" ref="0x10b560e40"/>
        <function-ref name="toggle" scoped="" ref="0x10b56f020"/>
        <function-ref name="isOutput" scoped="" ref="0x10b56f1a8"/>
        <function-ref name="get" scoped="" ref="0x10b56f330"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b56f4b8"/>
        <function-ref name="set" scoped="" ref="0x10b56f640"/>
        <function-ref name="clr" scoped="" ref="0x10b56f7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x10b574af0" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x10b574af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b574e40"/>
        <function-ref name="isInput" scoped="" ref="0x10b573020"/>
        <function-ref name="toggle" scoped="" ref="0x10b5731a8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b573330"/>
        <function-ref name="get" scoped="" ref="0x10b5734b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b573640"/>
        <function-ref name="set" scoped="" ref="0x10b5737c8"/>
        <function-ref name="clr" scoped="" ref="0x10b573950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x10b579e00" loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x10b579e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5781a8"/>
        <function-ref name="isInput" scoped="" ref="0x10b578330"/>
        <function-ref name="toggle" scoped="" ref="0x10b5784b8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b578640"/>
        <function-ref name="get" scoped="" ref="0x10b5787c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b578950"/>
        <function-ref name="set" scoped="" ref="0x10b578ad8"/>
        <function-ref name="clr" scoped="" ref="0x10b578c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x10b597658" loc="88:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x10b597658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5979a8"/>
        <function-ref name="isInput" scoped="" ref="0x10b597b30"/>
        <function-ref name="toggle" scoped="" ref="0x10b597cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b597e40"/>
        <function-ref name="get" scoped="" ref="0x10b596020"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5961a8"/>
        <function-ref name="set" scoped="" ref="0x10b596330"/>
        <function-ref name="clr" scoped="" ref="0x10b5964b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x10b591348" loc="94:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x10b591348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b591698"/>
        <function-ref name="isInput" scoped="" ref="0x10b591820"/>
        <function-ref name="toggle" scoped="" ref="0x10b5919a8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b591b30"/>
        <function-ref name="get" scoped="" ref="0x10b591cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b591e40"/>
        <function-ref name="set" scoped="" ref="0x10b590020"/>
        <function-ref name="clr" scoped="" ref="0x10b5901a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x10b5861a0" loc="74:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x10b5861a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5864f0"/>
        <function-ref name="isInput" scoped="" ref="0x10b586678"/>
        <function-ref name="toggle" scoped="" ref="0x10b586800"/>
        <function-ref name="isOutput" scoped="" ref="0x10b586988"/>
        <function-ref name="get" scoped="" ref="0x10b586b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b586c98"/>
        <function-ref name="set" scoped="" ref="0x10b586e20"/>
        <function-ref name="clr" scoped="" ref="0x10b585020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x10b559e00" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x10b559e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5671a8"/>
        <function-ref name="isInput" scoped="" ref="0x10b567330"/>
        <function-ref name="toggle" scoped="" ref="0x10b5674b8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b567640"/>
        <function-ref name="get" scoped="" ref="0x10b5677c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b567950"/>
        <function-ref name="set" scoped="" ref="0x10b567ad8"/>
        <function-ref name="clr" scoped="" ref="0x10b567c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x10b56b020" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x10b56b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b56b370"/>
        <function-ref name="isInput" scoped="" ref="0x10b56b4f8"/>
        <function-ref name="toggle" scoped="" ref="0x10b56b680"/>
        <function-ref name="isOutput" scoped="" ref="0x10b56b808"/>
        <function-ref name="get" scoped="" ref="0x10b56b990"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b56bb18"/>
        <function-ref name="set" scoped="" ref="0x10b56bca0"/>
        <function-ref name="clr" scoped="" ref="0x10b56be28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x10b593020" loc="92:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x10b593020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b593370"/>
        <function-ref name="isInput" scoped="" ref="0x10b5934f8"/>
        <function-ref name="toggle" scoped="" ref="0x10b593680"/>
        <function-ref name="isOutput" scoped="" ref="0x10b593808"/>
        <function-ref name="get" scoped="" ref="0x10b593990"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b593b18"/>
        <function-ref name="set" scoped="" ref="0x10b593ca0"/>
        <function-ref name="clr" scoped="" ref="0x10b593e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x10b569348" loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x10b569348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b569698"/>
        <function-ref name="isInput" scoped="" ref="0x10b569820"/>
        <function-ref name="toggle" scoped="" ref="0x10b5699a8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b569b30"/>
        <function-ref name="get" scoped="" ref="0x10b569cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b569e40"/>
        <function-ref name="set" scoped="" ref="0x10b568020"/>
        <function-ref name="clr" scoped="" ref="0x10b5681a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x10b57e658" loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x10b57e658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b57e9a8"/>
        <function-ref name="isInput" scoped="" ref="0x10b57eb30"/>
        <function-ref name="toggle" scoped="" ref="0x10b57ecb8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b57ee40"/>
        <function-ref name="get" scoped="" ref="0x10b57d020"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b57d1a8"/>
        <function-ref name="set" scoped="" ref="0x10b57d330"/>
        <function-ref name="clr" scoped="" ref="0x10b57d4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x10b583658" loc="77:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x10b583658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5839a8"/>
        <function-ref name="isInput" scoped="" ref="0x10b583b30"/>
        <function-ref name="toggle" scoped="" ref="0x10b583cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b583e40"/>
        <function-ref name="get" scoped="" ref="0x10b581020"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5811a8"/>
        <function-ref name="set" scoped="" ref="0x10b581330"/>
        <function-ref name="clr" scoped="" ref="0x10b5814b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x10b589348" loc="86:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x10b589348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b589698"/>
        <function-ref name="isInput" scoped="" ref="0x10b589820"/>
        <function-ref name="toggle" scoped="" ref="0x10b5899a8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b589b30"/>
        <function-ref name="get" scoped="" ref="0x10b589cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b589e40"/>
        <function-ref name="set" scoped="" ref="0x10b588020"/>
        <function-ref name="clr" scoped="" ref="0x10b5881a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x10b564348" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x10b564348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b564698"/>
        <function-ref name="isInput" scoped="" ref="0x10b564820"/>
        <function-ref name="toggle" scoped="" ref="0x10b5649a8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b564b30"/>
        <function-ref name="get" scoped="" ref="0x10b564cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b564e40"/>
        <function-ref name="set" scoped="" ref="0x10b563020"/>
        <function-ref name="clr" scoped="" ref="0x10b5631a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x10b562658" loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x10b562658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5629a8"/>
        <function-ref name="isInput" scoped="" ref="0x10b562b30"/>
        <function-ref name="toggle" scoped="" ref="0x10b562cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b562e40"/>
        <function-ref name="get" scoped="" ref="0x10b561020"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5611a8"/>
        <function-ref name="set" scoped="" ref="0x10b561330"/>
        <function-ref name="clr" scoped="" ref="0x10b5614b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x10b5767e0" loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x10b5767e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b576b30"/>
        <function-ref name="isInput" scoped="" ref="0x10b576cb8"/>
        <function-ref name="toggle" scoped="" ref="0x10b576e40"/>
        <function-ref name="isOutput" scoped="" ref="0x10b575020"/>
        <function-ref name="get" scoped="" ref="0x10b5751a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b575330"/>
        <function-ref name="set" scoped="" ref="0x10b5754b8"/>
        <function-ref name="clr" scoped="" ref="0x10b575640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x10b57baf0" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x10b57baf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b57be40"/>
        <function-ref name="isInput" scoped="" ref="0x10b57a020"/>
        <function-ref name="toggle" scoped="" ref="0x10b57a1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b57a330"/>
        <function-ref name="get" scoped="" ref="0x10b57a4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b57a640"/>
        <function-ref name="set" scoped="" ref="0x10b57a7c8"/>
        <function-ref name="clr" scoped="" ref="0x10b57a950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x10b58faf0" loc="80:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x10b58faf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b58fe40"/>
        <function-ref name="isInput" scoped="" ref="0x10b58e020"/>
        <function-ref name="toggle" scoped="" ref="0x10b58e1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b58e330"/>
        <function-ref name="get" scoped="" ref="0x10b58e4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b58e640"/>
        <function-ref name="set" scoped="" ref="0x10b58e7c8"/>
        <function-ref name="clr" scoped="" ref="0x10b58e950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x10b55baf0" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x10b55baf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b55be40"/>
        <function-ref name="isInput" scoped="" ref="0x10b55a020"/>
        <function-ref name="toggle" scoped="" ref="0x10b55a1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b55a330"/>
        <function-ref name="get" scoped="" ref="0x10b55a4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b55a640"/>
        <function-ref name="set" scoped="" ref="0x10b55a7c8"/>
        <function-ref name="clr" scoped="" ref="0x10b55a950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x10b56faf0" loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x10b56faf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b56e020"/>
        <function-ref name="isInput" scoped="" ref="0x10b56e1a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b56e330"/>
        <function-ref name="isOutput" scoped="" ref="0x10b56e4b8"/>
        <function-ref name="get" scoped="" ref="0x10b56e640"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b56e7c8"/>
        <function-ref name="set" scoped="" ref="0x10b56e950"/>
        <function-ref name="clr" scoped="" ref="0x10b56ead8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x10b573c78" loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x10b573c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b572020"/>
        <function-ref name="isInput" scoped="" ref="0x10b5721a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b572330"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5724b8"/>
        <function-ref name="get" scoped="" ref="0x10b572640"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5727c8"/>
        <function-ref name="set" scoped="" ref="0x10b572950"/>
        <function-ref name="clr" scoped="" ref="0x10b572ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x10b5967e0" loc="89:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x10b5967e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b596b30"/>
        <function-ref name="isInput" scoped="" ref="0x10b596cb8"/>
        <function-ref name="toggle" scoped="" ref="0x10b596e40"/>
        <function-ref name="isOutput" scoped="" ref="0x10b595020"/>
        <function-ref name="get" scoped="" ref="0x10b5951a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b595330"/>
        <function-ref name="set" scoped="" ref="0x10b5954b8"/>
        <function-ref name="clr" scoped="" ref="0x10b595640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x10b570020" loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x10b570020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b570570"/>
        <function-ref name="isInput" scoped="" ref="0x10b5706f8"/>
        <function-ref name="toggle" scoped="" ref="0x10b570880"/>
        <function-ref name="isOutput" scoped="" ref="0x10b570a08"/>
        <function-ref name="get" scoped="" ref="0x10b570b90"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b570d18"/>
        <function-ref name="set" scoped="" ref="0x10b57f020"/>
        <function-ref name="clr" scoped="" ref="0x10b57f1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x10b585348" loc="75:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x10b585348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b585698"/>
        <function-ref name="isInput" scoped="" ref="0x10b585820"/>
        <function-ref name="toggle" scoped="" ref="0x10b5859a8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b585b30"/>
        <function-ref name="get" scoped="" ref="0x10b585cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b585e40"/>
        <function-ref name="set" scoped="" ref="0x10b584020"/>
        <function-ref name="clr" scoped="" ref="0x10b5841a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x10b58b020" loc="84:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x10b58b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b58b370"/>
        <function-ref name="isInput" scoped="" ref="0x10b58b4f8"/>
        <function-ref name="toggle" scoped="" ref="0x10b58b680"/>
        <function-ref name="isOutput" scoped="" ref="0x10b58b808"/>
        <function-ref name="get" scoped="" ref="0x10b58b990"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b58bb18"/>
        <function-ref name="set" scoped="" ref="0x10b58bca0"/>
        <function-ref name="clr" scoped="" ref="0x10b58be28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x10b5904d0" loc="95:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x10b5904d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b590820"/>
        <function-ref name="isInput" scoped="" ref="0x10b5909a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b590b30"/>
        <function-ref name="isOutput" scoped="" ref="0x10b590cb8"/>
        <function-ref name="get" scoped="" ref="0x10b590e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b59f020"/>
        <function-ref name="set" scoped="" ref="0x10b59f1a8"/>
        <function-ref name="clr" scoped="" ref="0x10b59f330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x10b566020" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x10b566020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b566370"/>
        <function-ref name="isInput" scoped="" ref="0x10b5664f8"/>
        <function-ref name="toggle" scoped="" ref="0x10b566680"/>
        <function-ref name="isOutput" scoped="" ref="0x10b566808"/>
        <function-ref name="get" scoped="" ref="0x10b566990"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b566b18"/>
        <function-ref name="set" scoped="" ref="0x10b566ca0"/>
        <function-ref name="clr" scoped="" ref="0x10b566e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x10b56a1a0" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x10b56a1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b56a4f0"/>
        <function-ref name="isInput" scoped="" ref="0x10b56a678"/>
        <function-ref name="toggle" scoped="" ref="0x10b56a800"/>
        <function-ref name="isOutput" scoped="" ref="0x10b56a988"/>
        <function-ref name="get" scoped="" ref="0x10b56ab10"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b56ac98"/>
        <function-ref name="set" scoped="" ref="0x10b56ae20"/>
        <function-ref name="clr" scoped="" ref="0x10b569020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x10b58ec78" loc="82:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x10b58ec78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b58d020"/>
        <function-ref name="isInput" scoped="" ref="0x10b58d1a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b58d330"/>
        <function-ref name="isOutput" scoped="" ref="0x10b58d4b8"/>
        <function-ref name="get" scoped="" ref="0x10b58d640"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b58d7c8"/>
        <function-ref name="set" scoped="" ref="0x10b58d950"/>
        <function-ref name="clr" scoped="" ref="0x10b58dad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x10b5684d0" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x10b5684d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b568820"/>
        <function-ref name="isInput" scoped="" ref="0x10b5689a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b568b30"/>
        <function-ref name="isOutput" scoped="" ref="0x10b568cb8"/>
        <function-ref name="get" scoped="" ref="0x10b568e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b577020"/>
        <function-ref name="set" scoped="" ref="0x10b5771a8"/>
        <function-ref name="clr" scoped="" ref="0x10b577330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x10b57d7e0" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x10b57d7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b57db30"/>
        <function-ref name="isInput" scoped="" ref="0x10b57dcb8"/>
        <function-ref name="toggle" scoped="" ref="0x10b57de40"/>
        <function-ref name="isOutput" scoped="" ref="0x10b57c020"/>
        <function-ref name="get" scoped="" ref="0x10b57c1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b57c330"/>
        <function-ref name="set" scoped="" ref="0x10b57c4b8"/>
        <function-ref name="clr" scoped="" ref="0x10b57c640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x10b5817e0" loc="78:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x10b5817e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b581b30"/>
        <function-ref name="isInput" scoped="" ref="0x10b581cb8"/>
        <function-ref name="toggle" scoped="" ref="0x10b581e40"/>
        <function-ref name="isOutput" scoped="" ref="0x10b580020"/>
        <function-ref name="get" scoped="" ref="0x10b5801a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b580330"/>
        <function-ref name="set" scoped="" ref="0x10b5804b8"/>
        <function-ref name="clr" scoped="" ref="0x10b580640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x10b5884d0" loc="87:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x10b5884d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b588820"/>
        <function-ref name="isInput" scoped="" ref="0x10b5889a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b588b30"/>
        <function-ref name="isOutput" scoped="" ref="0x10b588cb8"/>
        <function-ref name="get" scoped="" ref="0x10b588e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b597020"/>
        <function-ref name="set" scoped="" ref="0x10b5971a8"/>
        <function-ref name="clr" scoped="" ref="0x10b597330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x10b54f7e0" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x10b54f7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b54fb30"/>
        <function-ref name="isInput" scoped="" ref="0x10b54fcb8"/>
        <function-ref name="toggle" scoped="" ref="0x10b54fe40"/>
        <function-ref name="isOutput" scoped="" ref="0x10b55c020"/>
        <function-ref name="get" scoped="" ref="0x10b55c1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b55c330"/>
        <function-ref name="set" scoped="" ref="0x10b55c4b8"/>
        <function-ref name="clr" scoped="" ref="0x10b55c640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x10b5617e0" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x10b5617e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b561b30"/>
        <function-ref name="isInput" scoped="" ref="0x10b561cb8"/>
        <function-ref name="toggle" scoped="" ref="0x10b561e40"/>
        <function-ref name="isOutput" scoped="" ref="0x10b560020"/>
        <function-ref name="get" scoped="" ref="0x10b5601a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b560330"/>
        <function-ref name="set" scoped="" ref="0x10b5604b8"/>
        <function-ref name="clr" scoped="" ref="0x10b560640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x10b575968" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x10b575968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b575cb8"/>
        <function-ref name="isInput" scoped="" ref="0x10b575e40"/>
        <function-ref name="toggle" scoped="" ref="0x10b574020"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5741a8"/>
        <function-ref name="get" scoped="" ref="0x10b574330"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5744b8"/>
        <function-ref name="set" scoped="" ref="0x10b574640"/>
        <function-ref name="clr" scoped="" ref="0x10b5747c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x10b57ac78" loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x10b57ac78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b579020"/>
        <function-ref name="isInput" scoped="" ref="0x10b5791a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b579330"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5794b8"/>
        <function-ref name="get" scoped="" ref="0x10b579640"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5797c8"/>
        <function-ref name="set" scoped="" ref="0x10b579950"/>
        <function-ref name="clr" scoped="" ref="0x10b579ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x10b5921a0" loc="93:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x10b5921a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5924f0"/>
        <function-ref name="isInput" scoped="" ref="0x10b592678"/>
        <function-ref name="toggle" scoped="" ref="0x10b592800"/>
        <function-ref name="isOutput" scoped="" ref="0x10b592988"/>
        <function-ref name="get" scoped="" ref="0x10b592b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b592c98"/>
        <function-ref name="set" scoped="" ref="0x10b592e20"/>
        <function-ref name="clr" scoped="" ref="0x10b591020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x10b587020" loc="73:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x10b587020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b587370"/>
        <function-ref name="isInput" scoped="" ref="0x10b5874f8"/>
        <function-ref name="toggle" scoped="" ref="0x10b587680"/>
        <function-ref name="isOutput" scoped="" ref="0x10b587808"/>
        <function-ref name="get" scoped="" ref="0x10b587990"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b587b18"/>
        <function-ref name="set" scoped="" ref="0x10b587ca0"/>
        <function-ref name="clr" scoped="" ref="0x10b587e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x10b572e00" loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x10b572e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5711a8"/>
        <function-ref name="isInput" scoped="" ref="0x10b571330"/>
        <function-ref name="toggle" scoped="" ref="0x10b5714b8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b571640"/>
        <function-ref name="get" scoped="" ref="0x10b5717c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b571950"/>
        <function-ref name="set" scoped="" ref="0x10b571ad8"/>
        <function-ref name="clr" scoped="" ref="0x10b571c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x10b55ac78" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x10b55ac78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b559020"/>
        <function-ref name="isInput" scoped="" ref="0x10b5591a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b559330"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5594b8"/>
        <function-ref name="get" scoped="" ref="0x10b559640"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5597c8"/>
        <function-ref name="set" scoped="" ref="0x10b559950"/>
        <function-ref name="clr" scoped="" ref="0x10b559ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x10b56ee00" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x10b56ee00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b56c1a8"/>
        <function-ref name="isInput" scoped="" ref="0x10b56c330"/>
        <function-ref name="toggle" scoped="" ref="0x10b56c4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b56c640"/>
        <function-ref name="get" scoped="" ref="0x10b56c7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b56c950"/>
        <function-ref name="set" scoped="" ref="0x10b56cad8"/>
        <function-ref name="clr" scoped="" ref="0x10b56cc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x10b5e8430" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x10b5e8430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5e8780"/>
        <function-ref name="isInput" scoped="" ref="0x10b5e8908"/>
        <function-ref name="toggle" scoped="" ref="0x10b5e8a90"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5e8c18"/>
        <function-ref name="get" scoped="" ref="0x10b5e8da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5e7020"/>
        <function-ref name="set" scoped="" ref="0x10b5e71a8"/>
        <function-ref name="clr" scoped="" ref="0x10b5e7330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x10b5e58c8" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x10b5e58c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5e5c18"/>
        <function-ref name="isInput" scoped="" ref="0x10b5e5da0"/>
        <function-ref name="toggle" scoped="" ref="0x10b5e4020"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5e41a8"/>
        <function-ref name="get" scoped="" ref="0x10b5e4330"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5e44b8"/>
        <function-ref name="set" scoped="" ref="0x10b5e4640"/>
        <function-ref name="clr" scoped="" ref="0x10b5e47c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x10b5d91e8" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x10b5d91e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5d9538"/>
        <function-ref name="isInput" scoped="" ref="0x10b5d96c0"/>
        <function-ref name="toggle" scoped="" ref="0x10b5d9848"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5d99d0"/>
        <function-ref name="get" scoped="" ref="0x10b5d9b58"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5d9ce0"/>
        <function-ref name="set" scoped="" ref="0x10b5d9e68"/>
        <function-ref name="clr" scoped="" ref="0x10b5d8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x10b5e75b8" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x10b5e75b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5e7908"/>
        <function-ref name="isInput" scoped="" ref="0x10b5e7a90"/>
        <function-ref name="toggle" scoped="" ref="0x10b5e7c18"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5e7da0"/>
        <function-ref name="get" scoped="" ref="0x10b5e6020"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5e61a8"/>
        <function-ref name="set" scoped="" ref="0x10b5e6330"/>
        <function-ref name="clr" scoped="" ref="0x10b5e64b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x10b5e4a50" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x10b5e4a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5e4da0"/>
        <function-ref name="isInput" scoped="" ref="0x10b5e2020"/>
        <function-ref name="toggle" scoped="" ref="0x10b5e21a8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5e2330"/>
        <function-ref name="get" scoped="" ref="0x10b5e24b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5e2640"/>
        <function-ref name="set" scoped="" ref="0x10b5e27c8"/>
        <function-ref name="clr" scoped="" ref="0x10b5e2950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x10b5d82a8" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x10b5d82a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5d85f8"/>
        <function-ref name="isInput" scoped="" ref="0x10b5d8780"/>
        <function-ref name="toggle" scoped="" ref="0x10b5d8908"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5d8a90"/>
        <function-ref name="get" scoped="" ref="0x10b5d8c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5d8da0"/>
        <function-ref name="set" scoped="" ref="0x10b5e8020"/>
        <function-ref name="clr" scoped="" ref="0x10b5e81a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x10b5e6740" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x10b5e6740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5e6a90"/>
        <function-ref name="isInput" scoped="" ref="0x10b5e6c18"/>
        <function-ref name="toggle" scoped="" ref="0x10b5e6da0"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5e5020"/>
        <function-ref name="get" scoped="" ref="0x10b5e51a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5e5330"/>
        <function-ref name="set" scoped="" ref="0x10b5e54b8"/>
        <function-ref name="clr" scoped="" ref="0x10b5e5640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x10b5e2bd8" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x10b5e2bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5e1020"/>
        <function-ref name="isInput" scoped="" ref="0x10b5e11a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b5e1330"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5e14b8"/>
        <function-ref name="get" scoped="" ref="0x10b5e1640"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5e17c8"/>
        <function-ref name="set" scoped="" ref="0x10b5e1950"/>
        <function-ref name="clr" scoped="" ref="0x10b5e1ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c8c3970" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c8c3970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c8c3cc0"/>
        <function-ref name="isInput" scoped="" ref="0x10c8c3e48"/>
        <function-ref name="toggle" scoped="" ref="0x10c8c2020"/>
        <function-ref name="isOutput" scoped="" ref="0x10c8c21a8"/>
        <function-ref name="get" scoped="" ref="0x10c8c2330"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c8c24b8"/>
        <function-ref name="set" scoped="" ref="0x10c8c2640"/>
        <function-ref name="clr" scoped="" ref="0x10c8c27c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c8c0970" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c8c0970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c8c0cc0"/>
        <function-ref name="isInput" scoped="" ref="0x10c8c0e48"/>
        <function-ref name="toggle" scoped="" ref="0x10c8bf020"/>
        <function-ref name="isOutput" scoped="" ref="0x10c8bf1a8"/>
        <function-ref name="get" scoped="" ref="0x10c8bf330"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c8bf4b8"/>
        <function-ref name="set" scoped="" ref="0x10c8bf640"/>
        <function-ref name="clr" scoped="" ref="0x10c8bf7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c8bd970" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c8bd970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c8bdcc0"/>
        <function-ref name="isInput" scoped="" ref="0x10c8bde48"/>
        <function-ref name="toggle" scoped="" ref="0x10c8bc020"/>
        <function-ref name="isOutput" scoped="" ref="0x10c8bc1a8"/>
        <function-ref name="get" scoped="" ref="0x10c8bc330"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c8bc4b8"/>
        <function-ref name="set" scoped="" ref="0x10c8bc640"/>
        <function-ref name="clr" scoped="" ref="0x10c8bc7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c8ba970" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c8ba970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c8bacc0"/>
        <function-ref name="isInput" scoped="" ref="0x10c8bae48"/>
        <function-ref name="toggle" scoped="" ref="0x10c8b9020"/>
        <function-ref name="isOutput" scoped="" ref="0x10c8b91a8"/>
        <function-ref name="get" scoped="" ref="0x10c8b9330"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c8b94b8"/>
        <function-ref name="set" scoped="" ref="0x10c8b9640"/>
        <function-ref name="clr" scoped="" ref="0x10c8b97c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c8b7970" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c8b7970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c8b7cc0"/>
        <function-ref name="isInput" scoped="" ref="0x10c8b7e48"/>
        <function-ref name="toggle" scoped="" ref="0x10c8b6020"/>
        <function-ref name="isOutput" scoped="" ref="0x10c8b61a8"/>
        <function-ref name="get" scoped="" ref="0x10c8b6330"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c8b64b8"/>
        <function-ref name="set" scoped="" ref="0x10c8b6640"/>
        <function-ref name="clr" scoped="" ref="0x10c8b67c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c8b4970" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c8b4970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c8b4cc0"/>
        <function-ref name="isInput" scoped="" ref="0x10c8b4e48"/>
        <function-ref name="toggle" scoped="" ref="0x10c8b3020"/>
        <function-ref name="isOutput" scoped="" ref="0x10c8b31a8"/>
        <function-ref name="get" scoped="" ref="0x10c8b3330"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c8b34b8"/>
        <function-ref name="set" scoped="" ref="0x10c8b3640"/>
        <function-ref name="clr" scoped="" ref="0x10c8b37c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c8b1970" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c8b1970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c8b1cc0"/>
        <function-ref name="isInput" scoped="" ref="0x10c8b1e48"/>
        <function-ref name="toggle" scoped="" ref="0x10c8b0020"/>
        <function-ref name="isOutput" scoped="" ref="0x10c8b01a8"/>
        <function-ref name="get" scoped="" ref="0x10c8b0330"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c8b04b8"/>
        <function-ref name="set" scoped="" ref="0x10c8b0640"/>
        <function-ref name="clr" scoped="" ref="0x10c8b07c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c8ae970" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c8ae970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c8aecc0"/>
        <function-ref name="isInput" scoped="" ref="0x10c8aee48"/>
        <function-ref name="toggle" scoped="" ref="0x10c8ad020"/>
        <function-ref name="isOutput" scoped="" ref="0x10c8ad1a8"/>
        <function-ref name="get" scoped="" ref="0x10c8ad330"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c8ad4b8"/>
        <function-ref name="set" scoped="" ref="0x10c8ad640"/>
        <function-ref name="clr" scoped="" ref="0x10c8ad7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x10b5ece18" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x10b5ece18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5eb1a8"/>
        <function-ref name="isInput" scoped="" ref="0x10b5eb330"/>
        <function-ref name="toggle" scoped="" ref="0x10b5eb4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5eb640"/>
        <function-ref name="get" scoped="" ref="0x10b5eb7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5eb950"/>
        <function-ref name="set" scoped="" ref="0x10b5ebad8"/>
        <function-ref name="clr" scoped="" ref="0x10b5ebc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x10b5f92a8" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x10b5f92a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5f95f8"/>
        <function-ref name="isInput" scoped="" ref="0x10b5f9780"/>
        <function-ref name="toggle" scoped="" ref="0x10b5f9908"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5f9a90"/>
        <function-ref name="get" scoped="" ref="0x10b5f9c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5f9da0"/>
        <function-ref name="set" scoped="" ref="0x10b5f8020"/>
        <function-ref name="clr" scoped="" ref="0x10b5f81a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x10b5eebd0" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x10b5eebd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5ed020"/>
        <function-ref name="isInput" scoped="" ref="0x10b5ed1a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b5ed330"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5ed4b8"/>
        <function-ref name="get" scoped="" ref="0x10b5ed640"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5ed7c8"/>
        <function-ref name="set" scoped="" ref="0x10b5ed950"/>
        <function-ref name="clr" scoped="" ref="0x10b5edad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x10b5ea020" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x10b5ea020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5ea370"/>
        <function-ref name="isInput" scoped="" ref="0x10b5ea4f8"/>
        <function-ref name="toggle" scoped="" ref="0x10b5ea680"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5ea808"/>
        <function-ref name="get" scoped="" ref="0x10b5ea990"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5eab18"/>
        <function-ref name="set" scoped="" ref="0x10b5eaca0"/>
        <function-ref name="clr" scoped="" ref="0x10b5eae28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x10b5f8430" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x10b5f8430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5f8780"/>
        <function-ref name="isInput" scoped="" ref="0x10b5f8908"/>
        <function-ref name="toggle" scoped="" ref="0x10b5f8a90"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5f8c18"/>
        <function-ref name="get" scoped="" ref="0x10b5f8da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5f7020"/>
        <function-ref name="set" scoped="" ref="0x10b5f71a8"/>
        <function-ref name="clr" scoped="" ref="0x10b5f7330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x10b5edd60" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x10b5edd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5ec0d8"/>
        <function-ref name="isInput" scoped="" ref="0x10b5ec260"/>
        <function-ref name="toggle" scoped="" ref="0x10b5ec3e8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5ec570"/>
        <function-ref name="get" scoped="" ref="0x10b5ec6f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5ec880"/>
        <function-ref name="set" scoped="" ref="0x10b5eca08"/>
        <function-ref name="clr" scoped="" ref="0x10b5ecb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x10b5fa120" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x10b5fa120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5fa470"/>
        <function-ref name="isInput" scoped="" ref="0x10b5fa5f8"/>
        <function-ref name="toggle" scoped="" ref="0x10b5fa780"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5fa908"/>
        <function-ref name="get" scoped="" ref="0x10b5faa90"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5fac18"/>
        <function-ref name="set" scoped="" ref="0x10b5fada0"/>
        <function-ref name="clr" scoped="" ref="0x10b5f9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x10b5f75b8" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x10b5f75b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5f7908"/>
        <function-ref name="isInput" scoped="" ref="0x10b5f7a90"/>
        <function-ref name="toggle" scoped="" ref="0x10b5f7c18"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5f7da0"/>
        <function-ref name="get" scoped="" ref="0x10b5f6020"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5f61a8"/>
        <function-ref name="set" scoped="" ref="0x10b5f6330"/>
        <function-ref name="clr" scoped="" ref="0x10b5f64b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c9156a8" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c9156a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c9159f8"/>
        <function-ref name="isInput" scoped="" ref="0x10c915b80"/>
        <function-ref name="toggle" scoped="" ref="0x10c915d08"/>
        <function-ref name="isOutput" scoped="" ref="0x10c914020"/>
        <function-ref name="get" scoped="" ref="0x10c9141a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c914330"/>
        <function-ref name="set" scoped="" ref="0x10c9144b8"/>
        <function-ref name="clr" scoped="" ref="0x10c914640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c912710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c912710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c912a60"/>
        <function-ref name="isInput" scoped="" ref="0x10c912be8"/>
        <function-ref name="toggle" scoped="" ref="0x10c912d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10c911020"/>
        <function-ref name="get" scoped="" ref="0x10c9111a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c911330"/>
        <function-ref name="set" scoped="" ref="0x10c9114b8"/>
        <function-ref name="clr" scoped="" ref="0x10c911640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c90f710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c90f710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c90fa60"/>
        <function-ref name="isInput" scoped="" ref="0x10c90fbe8"/>
        <function-ref name="toggle" scoped="" ref="0x10c90fd70"/>
        <function-ref name="isOutput" scoped="" ref="0x10c90e020"/>
        <function-ref name="get" scoped="" ref="0x10c90e1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c90e330"/>
        <function-ref name="set" scoped="" ref="0x10c90e4b8"/>
        <function-ref name="clr" scoped="" ref="0x10c90e640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c90c710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c90c710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c90ca60"/>
        <function-ref name="isInput" scoped="" ref="0x10c90cbe8"/>
        <function-ref name="toggle" scoped="" ref="0x10c90cd70"/>
        <function-ref name="isOutput" scoped="" ref="0x10c90b020"/>
        <function-ref name="get" scoped="" ref="0x10c90b1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c90b330"/>
        <function-ref name="set" scoped="" ref="0x10c90b4b8"/>
        <function-ref name="clr" scoped="" ref="0x10c90b640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c909710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c909710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c909a60"/>
        <function-ref name="isInput" scoped="" ref="0x10c909be8"/>
        <function-ref name="toggle" scoped="" ref="0x10c909d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10c908020"/>
        <function-ref name="get" scoped="" ref="0x10c9081a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c908330"/>
        <function-ref name="set" scoped="" ref="0x10c9084b8"/>
        <function-ref name="clr" scoped="" ref="0x10c908640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c906710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c906710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c906a60"/>
        <function-ref name="isInput" scoped="" ref="0x10c906be8"/>
        <function-ref name="toggle" scoped="" ref="0x10c906d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10c905020"/>
        <function-ref name="get" scoped="" ref="0x10c9051a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c905330"/>
        <function-ref name="set" scoped="" ref="0x10c9054b8"/>
        <function-ref name="clr" scoped="" ref="0x10c905640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c903710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c903710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c903a60"/>
        <function-ref name="isInput" scoped="" ref="0x10c903be8"/>
        <function-ref name="toggle" scoped="" ref="0x10c903d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10c902020"/>
        <function-ref name="get" scoped="" ref="0x10c9021a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c902330"/>
        <function-ref name="set" scoped="" ref="0x10c9024b8"/>
        <function-ref name="clr" scoped="" ref="0x10c902640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c900710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c900710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c900a60"/>
        <function-ref name="isInput" scoped="" ref="0x10c900be8"/>
        <function-ref name="toggle" scoped="" ref="0x10c900d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10c8ff020"/>
        <function-ref name="get" scoped="" ref="0x10c8ff1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c8ff330"/>
        <function-ref name="set" scoped="" ref="0x10c8ff4b8"/>
        <function-ref name="clr" scoped="" ref="0x10c8ff640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x10b600740" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x10b600740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b600a90"/>
        <function-ref name="isInput" scoped="" ref="0x10b600c18"/>
        <function-ref name="toggle" scoped="" ref="0x10b600da0"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5ff020"/>
        <function-ref name="get" scoped="" ref="0x10b5ff1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5ff330"/>
        <function-ref name="set" scoped="" ref="0x10b5ff4b8"/>
        <function-ref name="clr" scoped="" ref="0x10b5ff640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x10b5fdbd8" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x10b5fdbd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5fc020"/>
        <function-ref name="isInput" scoped="" ref="0x10b5fc1a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b5fc330"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5fc4b8"/>
        <function-ref name="get" scoped="" ref="0x10b5fc640"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5fc7c8"/>
        <function-ref name="set" scoped="" ref="0x10b5fc950"/>
        <function-ref name="clr" scoped="" ref="0x10b5fcad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x10b603500" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x10b603500"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b603850"/>
        <function-ref name="isInput" scoped="" ref="0x10b6039d8"/>
        <function-ref name="toggle" scoped="" ref="0x10b603b60"/>
        <function-ref name="isOutput" scoped="" ref="0x10b603ce8"/>
        <function-ref name="get" scoped="" ref="0x10b603e70"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b601020"/>
        <function-ref name="set" scoped="" ref="0x10b6011a8"/>
        <function-ref name="clr" scoped="" ref="0x10b601330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x10b5ff8c8" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x10b5ff8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5ffc18"/>
        <function-ref name="isInput" scoped="" ref="0x10b5ffda0"/>
        <function-ref name="toggle" scoped="" ref="0x10b5fe020"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5fe1a8"/>
        <function-ref name="get" scoped="" ref="0x10b5fe330"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5fe4b8"/>
        <function-ref name="set" scoped="" ref="0x10b5fe640"/>
        <function-ref name="clr" scoped="" ref="0x10b5fe7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x10b5fcd60" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x10b5fcd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5fb0d8"/>
        <function-ref name="isInput" scoped="" ref="0x10b5fb260"/>
        <function-ref name="toggle" scoped="" ref="0x10b5fb3e8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5fb570"/>
        <function-ref name="get" scoped="" ref="0x10b5fb6f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5fb880"/>
        <function-ref name="set" scoped="" ref="0x10b5fba08"/>
        <function-ref name="clr" scoped="" ref="0x10b5fbb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x10b6015b8" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x10b6015b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b601908"/>
        <function-ref name="isInput" scoped="" ref="0x10b601a90"/>
        <function-ref name="toggle" scoped="" ref="0x10b601c18"/>
        <function-ref name="isOutput" scoped="" ref="0x10b601da0"/>
        <function-ref name="get" scoped="" ref="0x10b600020"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b6001a8"/>
        <function-ref name="set" scoped="" ref="0x10b600330"/>
        <function-ref name="clr" scoped="" ref="0x10b6004b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x10b5fea50" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x10b5fea50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b5feda0"/>
        <function-ref name="isInput" scoped="" ref="0x10b5fd020"/>
        <function-ref name="toggle" scoped="" ref="0x10b5fd1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b5fd330"/>
        <function-ref name="get" scoped="" ref="0x10b5fd4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b5fd640"/>
        <function-ref name="set" scoped="" ref="0x10b5fd7c8"/>
        <function-ref name="clr" scoped="" ref="0x10b5fd950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x10b5fbe18" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x10b5fbe18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b60c1a8"/>
        <function-ref name="isInput" scoped="" ref="0x10b60c330"/>
        <function-ref name="toggle" scoped="" ref="0x10b60c4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b60c640"/>
        <function-ref name="get" scoped="" ref="0x10b60c7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b60c950"/>
        <function-ref name="set" scoped="" ref="0x10b60cad8"/>
        <function-ref name="clr" scoped="" ref="0x10b60cc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c96a6a8" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c96a6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c96a9f8"/>
        <function-ref name="isInput" scoped="" ref="0x10c96ab80"/>
        <function-ref name="toggle" scoped="" ref="0x10c96ad08"/>
        <function-ref name="isOutput" scoped="" ref="0x10c969020"/>
        <function-ref name="get" scoped="" ref="0x10c9691a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c969330"/>
        <function-ref name="set" scoped="" ref="0x10c9694b8"/>
        <function-ref name="clr" scoped="" ref="0x10c969640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c967710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c967710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c967a60"/>
        <function-ref name="isInput" scoped="" ref="0x10c967be8"/>
        <function-ref name="toggle" scoped="" ref="0x10c967d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10c966020"/>
        <function-ref name="get" scoped="" ref="0x10c9661a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c966330"/>
        <function-ref name="set" scoped="" ref="0x10c9664b8"/>
        <function-ref name="clr" scoped="" ref="0x10c966640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c964710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c964710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c964a60"/>
        <function-ref name="isInput" scoped="" ref="0x10c964be8"/>
        <function-ref name="toggle" scoped="" ref="0x10c964d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10c963020"/>
        <function-ref name="get" scoped="" ref="0x10c9631a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c963330"/>
        <function-ref name="set" scoped="" ref="0x10c9634b8"/>
        <function-ref name="clr" scoped="" ref="0x10c963640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c961710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c961710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c961a60"/>
        <function-ref name="isInput" scoped="" ref="0x10c961be8"/>
        <function-ref name="toggle" scoped="" ref="0x10c961d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10c960020"/>
        <function-ref name="get" scoped="" ref="0x10c9601a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c960330"/>
        <function-ref name="set" scoped="" ref="0x10c9604b8"/>
        <function-ref name="clr" scoped="" ref="0x10c960640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c95e710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c95e710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c95ea60"/>
        <function-ref name="isInput" scoped="" ref="0x10c95ebe8"/>
        <function-ref name="toggle" scoped="" ref="0x10c95ed70"/>
        <function-ref name="isOutput" scoped="" ref="0x10c95d020"/>
        <function-ref name="get" scoped="" ref="0x10c95d1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c95d330"/>
        <function-ref name="set" scoped="" ref="0x10c95d4b8"/>
        <function-ref name="clr" scoped="" ref="0x10c95d640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c95b710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c95b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c95ba60"/>
        <function-ref name="isInput" scoped="" ref="0x10c95bbe8"/>
        <function-ref name="toggle" scoped="" ref="0x10c95bd70"/>
        <function-ref name="isOutput" scoped="" ref="0x10c95a020"/>
        <function-ref name="get" scoped="" ref="0x10c95a1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c95a330"/>
        <function-ref name="set" scoped="" ref="0x10c95a4b8"/>
        <function-ref name="clr" scoped="" ref="0x10c95a640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c958710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c958710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c958a60"/>
        <function-ref name="isInput" scoped="" ref="0x10c958be8"/>
        <function-ref name="toggle" scoped="" ref="0x10c958d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10c957020"/>
        <function-ref name="get" scoped="" ref="0x10c9571a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c957330"/>
        <function-ref name="set" scoped="" ref="0x10c9574b8"/>
        <function-ref name="clr" scoped="" ref="0x10c957640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c955710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c955710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c955a60"/>
        <function-ref name="isInput" scoped="" ref="0x10c955be8"/>
        <function-ref name="toggle" scoped="" ref="0x10c955d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10c954020"/>
        <function-ref name="get" scoped="" ref="0x10c9541a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c954330"/>
        <function-ref name="set" scoped="" ref="0x10c9544b8"/>
        <function-ref name="clr" scoped="" ref="0x10c954640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x10b615120" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x10b615120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b615470"/>
        <function-ref name="isInput" scoped="" ref="0x10b6155f8"/>
        <function-ref name="toggle" scoped="" ref="0x10b615780"/>
        <function-ref name="isOutput" scoped="" ref="0x10b615908"/>
        <function-ref name="get" scoped="" ref="0x10b615a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b615c18"/>
        <function-ref name="set" scoped="" ref="0x10b615da0"/>
        <function-ref name="clr" scoped="" ref="0x10b614020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x10b6125b8" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x10b6125b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b612908"/>
        <function-ref name="isInput" scoped="" ref="0x10b612a90"/>
        <function-ref name="toggle" scoped="" ref="0x10b612c18"/>
        <function-ref name="isOutput" scoped="" ref="0x10b612da0"/>
        <function-ref name="get" scoped="" ref="0x10b611020"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b6111a8"/>
        <function-ref name="set" scoped="" ref="0x10b611330"/>
        <function-ref name="clr" scoped="" ref="0x10b6114b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x10b606e40" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x10b606e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b6051c0"/>
        <function-ref name="isInput" scoped="" ref="0x10b605348"/>
        <function-ref name="toggle" scoped="" ref="0x10b6054d0"/>
        <function-ref name="isOutput" scoped="" ref="0x10b605658"/>
        <function-ref name="get" scoped="" ref="0x10b6057e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b605968"/>
        <function-ref name="set" scoped="" ref="0x10b605af0"/>
        <function-ref name="clr" scoped="" ref="0x10b605c78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x10b6142a8" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x10b6142a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b6145f8"/>
        <function-ref name="isInput" scoped="" ref="0x10b614780"/>
        <function-ref name="toggle" scoped="" ref="0x10b614908"/>
        <function-ref name="isOutput" scoped="" ref="0x10b614a90"/>
        <function-ref name="get" scoped="" ref="0x10b614c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b614da0"/>
        <function-ref name="set" scoped="" ref="0x10b613020"/>
        <function-ref name="clr" scoped="" ref="0x10b6131a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x10b611740" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x10b611740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b611a90"/>
        <function-ref name="isInput" scoped="" ref="0x10b611c18"/>
        <function-ref name="toggle" scoped="" ref="0x10b611da0"/>
        <function-ref name="isOutput" scoped="" ref="0x10b610020"/>
        <function-ref name="get" scoped="" ref="0x10b6101a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b610330"/>
        <function-ref name="set" scoped="" ref="0x10b6104b8"/>
        <function-ref name="clr" scoped="" ref="0x10b610640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x10b604020" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x10b604020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b604370"/>
        <function-ref name="isInput" scoped="" ref="0x10b6044f8"/>
        <function-ref name="toggle" scoped="" ref="0x10b604680"/>
        <function-ref name="isOutput" scoped="" ref="0x10b604808"/>
        <function-ref name="get" scoped="" ref="0x10b604990"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b604b18"/>
        <function-ref name="set" scoped="" ref="0x10b604ca0"/>
        <function-ref name="clr" scoped="" ref="0x10b604e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x10b613430" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x10b613430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b613780"/>
        <function-ref name="isInput" scoped="" ref="0x10b613908"/>
        <function-ref name="toggle" scoped="" ref="0x10b613a90"/>
        <function-ref name="isOutput" scoped="" ref="0x10b613c18"/>
        <function-ref name="get" scoped="" ref="0x10b613da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b612020"/>
        <function-ref name="set" scoped="" ref="0x10b6121a8"/>
        <function-ref name="clr" scoped="" ref="0x10b612330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x10b6108c8" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x10b6108c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b610c18"/>
        <function-ref name="isInput" scoped="" ref="0x10b610da0"/>
        <function-ref name="toggle" scoped="" ref="0x10b60f020"/>
        <function-ref name="isOutput" scoped="" ref="0x10b60f1a8"/>
        <function-ref name="get" scoped="" ref="0x10b60f330"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b60f4b8"/>
        <function-ref name="set" scoped="" ref="0x10b60f640"/>
        <function-ref name="clr" scoped="" ref="0x10b60f7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c9c26a8" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c9c26a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c9c29f8"/>
        <function-ref name="isInput" scoped="" ref="0x10c9c2b80"/>
        <function-ref name="toggle" scoped="" ref="0x10c9c2d08"/>
        <function-ref name="isOutput" scoped="" ref="0x10c9c1020"/>
        <function-ref name="get" scoped="" ref="0x10c9c11a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c9c1330"/>
        <function-ref name="set" scoped="" ref="0x10c9c14b8"/>
        <function-ref name="clr" scoped="" ref="0x10c9c1640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c9bf710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c9bf710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c9bfa60"/>
        <function-ref name="isInput" scoped="" ref="0x10c9bfbe8"/>
        <function-ref name="toggle" scoped="" ref="0x10c9bfd70"/>
        <function-ref name="isOutput" scoped="" ref="0x10c9be020"/>
        <function-ref name="get" scoped="" ref="0x10c9be1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c9be330"/>
        <function-ref name="set" scoped="" ref="0x10c9be4b8"/>
        <function-ref name="clr" scoped="" ref="0x10c9be640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c9bc710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c9bc710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c9bca60"/>
        <function-ref name="isInput" scoped="" ref="0x10c9bcbe8"/>
        <function-ref name="toggle" scoped="" ref="0x10c9bcd70"/>
        <function-ref name="isOutput" scoped="" ref="0x10c9bb020"/>
        <function-ref name="get" scoped="" ref="0x10c9bb1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c9bb330"/>
        <function-ref name="set" scoped="" ref="0x10c9bb4b8"/>
        <function-ref name="clr" scoped="" ref="0x10c9bb640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c9b9710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c9b9710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c9b9a60"/>
        <function-ref name="isInput" scoped="" ref="0x10c9b9be8"/>
        <function-ref name="toggle" scoped="" ref="0x10c9b9d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10c9b8020"/>
        <function-ref name="get" scoped="" ref="0x10c9b81a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c9b8330"/>
        <function-ref name="set" scoped="" ref="0x10c9b84b8"/>
        <function-ref name="clr" scoped="" ref="0x10c9b8640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c9b6710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c9b6710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c9b6a60"/>
        <function-ref name="isInput" scoped="" ref="0x10c9b6be8"/>
        <function-ref name="toggle" scoped="" ref="0x10c9b6d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10c9b5020"/>
        <function-ref name="get" scoped="" ref="0x10c9b51a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c9b5330"/>
        <function-ref name="set" scoped="" ref="0x10c9b54b8"/>
        <function-ref name="clr" scoped="" ref="0x10c9b5640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c9b3710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c9b3710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c9b3a60"/>
        <function-ref name="isInput" scoped="" ref="0x10c9b3be8"/>
        <function-ref name="toggle" scoped="" ref="0x10c9b3d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10c9b2020"/>
        <function-ref name="get" scoped="" ref="0x10c9b21a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c9b2330"/>
        <function-ref name="set" scoped="" ref="0x10c9b24b8"/>
        <function-ref name="clr" scoped="" ref="0x10c9b2640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10c9b0710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10c9b0710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c9b0a60"/>
        <function-ref name="isInput" scoped="" ref="0x10c9b0be8"/>
        <function-ref name="toggle" scoped="" ref="0x10c9b0d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10ca10020"/>
        <function-ref name="get" scoped="" ref="0x10ca101a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10ca10330"/>
        <function-ref name="set" scoped="" ref="0x10ca104b8"/>
        <function-ref name="clr" scoped="" ref="0x10ca10640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10ca0e710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10ca0e710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10ca0ea60"/>
        <function-ref name="isInput" scoped="" ref="0x10ca0ebe8"/>
        <function-ref name="toggle" scoped="" ref="0x10ca0ed70"/>
        <function-ref name="isOutput" scoped="" ref="0x10ca0d020"/>
        <function-ref name="get" scoped="" ref="0x10ca0d1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10ca0d330"/>
        <function-ref name="set" scoped="" ref="0x10ca0d4b8"/>
        <function-ref name="clr" scoped="" ref="0x10ca0d640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x10b619bd8" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x10b619bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b618020"/>
        <function-ref name="isInput" scoped="" ref="0x10b6181a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b618330"/>
        <function-ref name="isOutput" scoped="" ref="0x10b6184b8"/>
        <function-ref name="get" scoped="" ref="0x10b618640"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b6187c8"/>
        <function-ref name="set" scoped="" ref="0x10b618950"/>
        <function-ref name="clr" scoped="" ref="0x10b618ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x10b627020" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x10b627020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b627370"/>
        <function-ref name="isInput" scoped="" ref="0x10b6274f8"/>
        <function-ref name="toggle" scoped="" ref="0x10b627680"/>
        <function-ref name="isOutput" scoped="" ref="0x10b627808"/>
        <function-ref name="get" scoped="" ref="0x10b627990"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b627b18"/>
        <function-ref name="set" scoped="" ref="0x10b627ca0"/>
        <function-ref name="clr" scoped="" ref="0x10b627e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x10b61b930" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x10b61b930"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b61bc80"/>
        <function-ref name="isInput" scoped="" ref="0x10b61be08"/>
        <function-ref name="toggle" scoped="" ref="0x10b61a020"/>
        <function-ref name="isOutput" scoped="" ref="0x10b61a1a8"/>
        <function-ref name="get" scoped="" ref="0x10b61a330"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b61a4b8"/>
        <function-ref name="set" scoped="" ref="0x10b61a640"/>
        <function-ref name="clr" scoped="" ref="0x10b61a7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x10b618d60" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x10b618d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b6170d8"/>
        <function-ref name="isInput" scoped="" ref="0x10b617260"/>
        <function-ref name="toggle" scoped="" ref="0x10b6173e8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b617570"/>
        <function-ref name="get" scoped="" ref="0x10b6176f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b617880"/>
        <function-ref name="set" scoped="" ref="0x10b617a08"/>
        <function-ref name="clr" scoped="" ref="0x10b617b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x10b625120" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x10b625120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b625470"/>
        <function-ref name="isInput" scoped="" ref="0x10b6255f8"/>
        <function-ref name="toggle" scoped="" ref="0x10b625780"/>
        <function-ref name="isOutput" scoped="" ref="0x10b625908"/>
        <function-ref name="get" scoped="" ref="0x10b625a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b625c18"/>
        <function-ref name="set" scoped="" ref="0x10b625da0"/>
        <function-ref name="clr" scoped="" ref="0x10b624020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x10b61aa50" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x10b61aa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b61ada0"/>
        <function-ref name="isInput" scoped="" ref="0x10b619020"/>
        <function-ref name="toggle" scoped="" ref="0x10b6191a8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b619330"/>
        <function-ref name="get" scoped="" ref="0x10b6194b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b619640"/>
        <function-ref name="set" scoped="" ref="0x10b6197c8"/>
        <function-ref name="clr" scoped="" ref="0x10b619950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x10b617e18" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x10b617e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b6161a8"/>
        <function-ref name="isInput" scoped="" ref="0x10b616330"/>
        <function-ref name="toggle" scoped="" ref="0x10b6164b8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b616640"/>
        <function-ref name="get" scoped="" ref="0x10b6167c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b616950"/>
        <function-ref name="set" scoped="" ref="0x10b616ad8"/>
        <function-ref name="clr" scoped="" ref="0x10b616c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x10b6242a8" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x10b6242a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b6245f8"/>
        <function-ref name="isInput" scoped="" ref="0x10b624780"/>
        <function-ref name="toggle" scoped="" ref="0x10b624908"/>
        <function-ref name="isOutput" scoped="" ref="0x10b624a90"/>
        <function-ref name="get" scoped="" ref="0x10b624c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b624da0"/>
        <function-ref name="set" scoped="" ref="0x10b623020"/>
        <function-ref name="clr" scoped="" ref="0x10b6231a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10ca1f6a8" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10ca1f6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10ca1f9f8"/>
        <function-ref name="isInput" scoped="" ref="0x10ca1fb80"/>
        <function-ref name="toggle" scoped="" ref="0x10ca1fd08"/>
        <function-ref name="isOutput" scoped="" ref="0x10ca1d020"/>
        <function-ref name="get" scoped="" ref="0x10ca1d1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10ca1d330"/>
        <function-ref name="set" scoped="" ref="0x10ca1d4b8"/>
        <function-ref name="clr" scoped="" ref="0x10ca1d640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10ca1b710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10ca1b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10ca1ba60"/>
        <function-ref name="isInput" scoped="" ref="0x10ca1bbe8"/>
        <function-ref name="toggle" scoped="" ref="0x10ca1bd70"/>
        <function-ref name="isOutput" scoped="" ref="0x10ca1a020"/>
        <function-ref name="get" scoped="" ref="0x10ca1a1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10ca1a330"/>
        <function-ref name="set" scoped="" ref="0x10ca1a4b8"/>
        <function-ref name="clr" scoped="" ref="0x10ca1a640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10ca18710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10ca18710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10ca18a60"/>
        <function-ref name="isInput" scoped="" ref="0x10ca18be8"/>
        <function-ref name="toggle" scoped="" ref="0x10ca18d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10ca17020"/>
        <function-ref name="get" scoped="" ref="0x10ca171a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10ca17330"/>
        <function-ref name="set" scoped="" ref="0x10ca174b8"/>
        <function-ref name="clr" scoped="" ref="0x10ca17640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10ca15710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10ca15710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10ca15a60"/>
        <function-ref name="isInput" scoped="" ref="0x10ca15be8"/>
        <function-ref name="toggle" scoped="" ref="0x10ca15d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10ca14020"/>
        <function-ref name="get" scoped="" ref="0x10ca141a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10ca14330"/>
        <function-ref name="set" scoped="" ref="0x10ca144b8"/>
        <function-ref name="clr" scoped="" ref="0x10ca14640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10ca12710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10ca12710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10ca12a60"/>
        <function-ref name="isInput" scoped="" ref="0x10ca12be8"/>
        <function-ref name="toggle" scoped="" ref="0x10ca12d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10ca11020"/>
        <function-ref name="get" scoped="" ref="0x10ca111a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10ca11330"/>
        <function-ref name="set" scoped="" ref="0x10ca114b8"/>
        <function-ref name="clr" scoped="" ref="0x10ca11640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10ca71710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10ca71710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10ca71a60"/>
        <function-ref name="isInput" scoped="" ref="0x10ca71be8"/>
        <function-ref name="toggle" scoped="" ref="0x10ca71d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10ca70020"/>
        <function-ref name="get" scoped="" ref="0x10ca701a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10ca70330"/>
        <function-ref name="set" scoped="" ref="0x10ca704b8"/>
        <function-ref name="clr" scoped="" ref="0x10ca70640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10ca6e710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10ca6e710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10ca6ea60"/>
        <function-ref name="isInput" scoped="" ref="0x10ca6ebe8"/>
        <function-ref name="toggle" scoped="" ref="0x10ca6ed70"/>
        <function-ref name="isOutput" scoped="" ref="0x10ca6d020"/>
        <function-ref name="get" scoped="" ref="0x10ca6d1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10ca6d330"/>
        <function-ref name="set" scoped="" ref="0x10ca6d4b8"/>
        <function-ref name="clr" scoped="" ref="0x10ca6d640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10ca6b710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10ca6b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10ca6ba60"/>
        <function-ref name="isInput" scoped="" ref="0x10ca6bbe8"/>
        <function-ref name="toggle" scoped="" ref="0x10ca6bd70"/>
        <function-ref name="isOutput" scoped="" ref="0x10ca6a020"/>
        <function-ref name="get" scoped="" ref="0x10ca6a1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10ca6a330"/>
        <function-ref name="set" scoped="" ref="0x10ca6a4b8"/>
        <function-ref name="clr" scoped="" ref="0x10ca6a640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x10b62e740" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x10b62e740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b62ea90"/>
        <function-ref name="isInput" scoped="" ref="0x10b62ec18"/>
        <function-ref name="toggle" scoped="" ref="0x10b62eda0"/>
        <function-ref name="isOutput" scoped="" ref="0x10b62c020"/>
        <function-ref name="get" scoped="" ref="0x10b62c1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b62c330"/>
        <function-ref name="set" scoped="" ref="0x10b62c4b8"/>
        <function-ref name="clr" scoped="" ref="0x10b62c640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x10b62abd8" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x10b62abd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b629020"/>
        <function-ref name="isInput" scoped="" ref="0x10b6291a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b629330"/>
        <function-ref name="isOutput" scoped="" ref="0x10b6294b8"/>
        <function-ref name="get" scoped="" ref="0x10b629640"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b6297c8"/>
        <function-ref name="set" scoped="" ref="0x10b629950"/>
        <function-ref name="clr" scoped="" ref="0x10b629ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x10b630500" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x10b630500"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b630850"/>
        <function-ref name="isInput" scoped="" ref="0x10b6309d8"/>
        <function-ref name="toggle" scoped="" ref="0x10b630b60"/>
        <function-ref name="isOutput" scoped="" ref="0x10b630ce8"/>
        <function-ref name="get" scoped="" ref="0x10b630e70"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b62f020"/>
        <function-ref name="set" scoped="" ref="0x10b62f1a8"/>
        <function-ref name="clr" scoped="" ref="0x10b62f330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x10b62c8c8" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x10b62c8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b62cc18"/>
        <function-ref name="isInput" scoped="" ref="0x10b62cda0"/>
        <function-ref name="toggle" scoped="" ref="0x10b62b020"/>
        <function-ref name="isOutput" scoped="" ref="0x10b62b1a8"/>
        <function-ref name="get" scoped="" ref="0x10b62b330"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b62b4b8"/>
        <function-ref name="set" scoped="" ref="0x10b62b640"/>
        <function-ref name="clr" scoped="" ref="0x10b62b7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x10b629d60" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x10b629d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b6280d8"/>
        <function-ref name="isInput" scoped="" ref="0x10b628260"/>
        <function-ref name="toggle" scoped="" ref="0x10b6283e8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b628570"/>
        <function-ref name="get" scoped="" ref="0x10b6286f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b628880"/>
        <function-ref name="set" scoped="" ref="0x10b628a08"/>
        <function-ref name="clr" scoped="" ref="0x10b628b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x10b62f5b8" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x10b62f5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b62f908"/>
        <function-ref name="isInput" scoped="" ref="0x10b62fa90"/>
        <function-ref name="toggle" scoped="" ref="0x10b62fc18"/>
        <function-ref name="isOutput" scoped="" ref="0x10b62fda0"/>
        <function-ref name="get" scoped="" ref="0x10b62e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b62e1a8"/>
        <function-ref name="set" scoped="" ref="0x10b62e330"/>
        <function-ref name="clr" scoped="" ref="0x10b62e4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x10b62ba50" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x10b62ba50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b62bda0"/>
        <function-ref name="isInput" scoped="" ref="0x10b62a020"/>
        <function-ref name="toggle" scoped="" ref="0x10b62a1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b62a330"/>
        <function-ref name="get" scoped="" ref="0x10b62a4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b62a640"/>
        <function-ref name="set" scoped="" ref="0x10b62a7c8"/>
        <function-ref name="clr" scoped="" ref="0x10b62a950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x10b628e18" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x10b628e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b6391a8"/>
        <function-ref name="isInput" scoped="" ref="0x10b639330"/>
        <function-ref name="toggle" scoped="" ref="0x10b6394b8"/>
        <function-ref name="isOutput" scoped="" ref="0x10b639640"/>
        <function-ref name="get" scoped="" ref="0x10b6397c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b639950"/>
        <function-ref name="set" scoped="" ref="0x10b639ad8"/>
        <function-ref name="clr" scoped="" ref="0x10b639c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10ca7f6a8" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10ca7f6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10ca7f9f8"/>
        <function-ref name="isInput" scoped="" ref="0x10ca7fb80"/>
        <function-ref name="toggle" scoped="" ref="0x10ca7fd08"/>
        <function-ref name="isOutput" scoped="" ref="0x10ca7d020"/>
        <function-ref name="get" scoped="" ref="0x10ca7d1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10ca7d330"/>
        <function-ref name="set" scoped="" ref="0x10ca7d4b8"/>
        <function-ref name="clr" scoped="" ref="0x10ca7d640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10ca7b710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10ca7b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10ca7ba60"/>
        <function-ref name="isInput" scoped="" ref="0x10ca7bbe8"/>
        <function-ref name="toggle" scoped="" ref="0x10ca7bd70"/>
        <function-ref name="isOutput" scoped="" ref="0x10ca7a020"/>
        <function-ref name="get" scoped="" ref="0x10ca7a1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10ca7a330"/>
        <function-ref name="set" scoped="" ref="0x10ca7a4b8"/>
        <function-ref name="clr" scoped="" ref="0x10ca7a640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10ca78710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10ca78710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10ca78a60"/>
        <function-ref name="isInput" scoped="" ref="0x10ca78be8"/>
        <function-ref name="toggle" scoped="" ref="0x10ca78d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10ca77020"/>
        <function-ref name="get" scoped="" ref="0x10ca771a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10ca77330"/>
        <function-ref name="set" scoped="" ref="0x10ca774b8"/>
        <function-ref name="clr" scoped="" ref="0x10ca77640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10ca75710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10ca75710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10ca75a60"/>
        <function-ref name="isInput" scoped="" ref="0x10ca75be8"/>
        <function-ref name="toggle" scoped="" ref="0x10ca75d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10cad8020"/>
        <function-ref name="get" scoped="" ref="0x10cad81a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10cad8330"/>
        <function-ref name="set" scoped="" ref="0x10cad84b8"/>
        <function-ref name="clr" scoped="" ref="0x10cad8640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10cad6710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10cad6710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10cad6a60"/>
        <function-ref name="isInput" scoped="" ref="0x10cad6be8"/>
        <function-ref name="toggle" scoped="" ref="0x10cad6d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10cad5020"/>
        <function-ref name="get" scoped="" ref="0x10cad51a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10cad5330"/>
        <function-ref name="set" scoped="" ref="0x10cad54b8"/>
        <function-ref name="clr" scoped="" ref="0x10cad5640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10cad3710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10cad3710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10cad3a60"/>
        <function-ref name="isInput" scoped="" ref="0x10cad3be8"/>
        <function-ref name="toggle" scoped="" ref="0x10cad3d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10cad2020"/>
        <function-ref name="get" scoped="" ref="0x10cad21a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10cad2330"/>
        <function-ref name="set" scoped="" ref="0x10cad24b8"/>
        <function-ref name="clr" scoped="" ref="0x10cad2640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10cad0710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10cad0710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10cad0a60"/>
        <function-ref name="isInput" scoped="" ref="0x10cad0be8"/>
        <function-ref name="toggle" scoped="" ref="0x10cad0d70"/>
        <function-ref name="isOutput" scoped="" ref="0x10cacf020"/>
        <function-ref name="get" scoped="" ref="0x10cacf1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10cacf330"/>
        <function-ref name="set" scoped="" ref="0x10cacf4b8"/>
        <function-ref name="clr" scoped="" ref="0x10cacf640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10cacd710" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10cacd710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10cacda60"/>
        <function-ref name="isInput" scoped="" ref="0x10cacdbe8"/>
        <function-ref name="toggle" scoped="" ref="0x10cacdd70"/>
        <function-ref name="isOutput" scoped="" ref="0x10cacc020"/>
        <function-ref name="get" scoped="" ref="0x10cacc1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10cacc330"/>
        <function-ref name="set" scoped="" ref="0x10cacc4b8"/>
        <function-ref name="clr" scoped="" ref="0x10cacc640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10b6313e0" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10b6313e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b631730"/>
        <function-ref name="isInput" scoped="" ref="0x10b6318b8"/>
        <function-ref name="toggle" scoped="" ref="0x10b631a40"/>
        <function-ref name="isOutput" scoped="" ref="0x10b631bc8"/>
        <function-ref name="get" scoped="" ref="0x10b631d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b652020"/>
        <function-ref name="set" scoped="" ref="0x10b6521a8"/>
        <function-ref name="clr" scoped="" ref="0x10b652330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10b64ec38" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10b64ec38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b64d020"/>
        <function-ref name="isInput" scoped="" ref="0x10b64d1a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b64d330"/>
        <function-ref name="isOutput" scoped="" ref="0x10b64d4b8"/>
        <function-ref name="get" scoped="" ref="0x10b64d640"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b64d7c8"/>
        <function-ref name="set" scoped="" ref="0x10b64d950"/>
        <function-ref name="clr" scoped="" ref="0x10b64dad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10b65b3e0" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10b65b3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b65b730"/>
        <function-ref name="isInput" scoped="" ref="0x10b65b8b8"/>
        <function-ref name="toggle" scoped="" ref="0x10b65ba40"/>
        <function-ref name="isOutput" scoped="" ref="0x10b65bbc8"/>
        <function-ref name="get" scoped="" ref="0x10b65bd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b659020"/>
        <function-ref name="set" scoped="" ref="0x10b6591a8"/>
        <function-ref name="clr" scoped="" ref="0x10b659330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10b656c38" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10b656c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b655020"/>
        <function-ref name="isInput" scoped="" ref="0x10b6551a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b655330"/>
        <function-ref name="isOutput" scoped="" ref="0x10b6554b8"/>
        <function-ref name="get" scoped="" ref="0x10b655640"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b6557c8"/>
        <function-ref name="set" scoped="" ref="0x10b655950"/>
        <function-ref name="clr" scoped="" ref="0x10b655ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10b6633e0" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10b6633e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b663730"/>
        <function-ref name="isInput" scoped="" ref="0x10b6638b8"/>
        <function-ref name="toggle" scoped="" ref="0x10b663a40"/>
        <function-ref name="isOutput" scoped="" ref="0x10b663bc8"/>
        <function-ref name="get" scoped="" ref="0x10b663d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b662020"/>
        <function-ref name="set" scoped="" ref="0x10b6621a8"/>
        <function-ref name="clr" scoped="" ref="0x10b662330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10b65fc38" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10b65fc38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b671020"/>
        <function-ref name="isInput" scoped="" ref="0x10b6711a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b671330"/>
        <function-ref name="isOutput" scoped="" ref="0x10b6714b8"/>
        <function-ref name="get" scoped="" ref="0x10b671640"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b6717c8"/>
        <function-ref name="set" scoped="" ref="0x10b671950"/>
        <function-ref name="clr" scoped="" ref="0x10b671ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10b66d480" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10b66d480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b66d7d0"/>
        <function-ref name="isInput" scoped="" ref="0x10b66d958"/>
        <function-ref name="toggle" scoped="" ref="0x10b66dae0"/>
        <function-ref name="isOutput" scoped="" ref="0x10b66dc68"/>
        <function-ref name="get" scoped="" ref="0x10b66ddf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b66c020"/>
        <function-ref name="set" scoped="" ref="0x10b66c1a8"/>
        <function-ref name="clr" scoped="" ref="0x10b66c330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10b668c38" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10b668c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b67b020"/>
        <function-ref name="isInput" scoped="" ref="0x10b67b1a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b67b330"/>
        <function-ref name="isOutput" scoped="" ref="0x10b67b4b8"/>
        <function-ref name="get" scoped="" ref="0x10b67b640"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b67b7c8"/>
        <function-ref name="set" scoped="" ref="0x10b67b950"/>
        <function-ref name="clr" scoped="" ref="0x10b67bad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10b677520" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10b677520"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b677870"/>
        <function-ref name="isInput" scoped="" ref="0x10b6779f8"/>
        <function-ref name="toggle" scoped="" ref="0x10b677b80"/>
        <function-ref name="isOutput" scoped="" ref="0x10b677d08"/>
        <function-ref name="get" scoped="" ref="0x10b676020"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b6761a8"/>
        <function-ref name="set" scoped="" ref="0x10b676330"/>
        <function-ref name="clr" scoped="" ref="0x10b6764b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10b672cd8" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10b672cd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b6850a0"/>
        <function-ref name="isInput" scoped="" ref="0x10b685228"/>
        <function-ref name="toggle" scoped="" ref="0x10b6853b0"/>
        <function-ref name="isOutput" scoped="" ref="0x10b685538"/>
        <function-ref name="get" scoped="" ref="0x10b6856c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b685848"/>
        <function-ref name="set" scoped="" ref="0x10b6859d0"/>
        <function-ref name="clr" scoped="" ref="0x10b685b58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10b6803e0" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10b6803e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b680730"/>
        <function-ref name="isInput" scoped="" ref="0x10b6808b8"/>
        <function-ref name="toggle" scoped="" ref="0x10b680a40"/>
        <function-ref name="isOutput" scoped="" ref="0x10b680bc8"/>
        <function-ref name="get" scoped="" ref="0x10b680d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b67f020"/>
        <function-ref name="set" scoped="" ref="0x10b67f1a8"/>
        <function-ref name="clr" scoped="" ref="0x10b67f330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10b67cc38" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10b67cc38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b68f020"/>
        <function-ref name="isInput" scoped="" ref="0x10b68f1a8"/>
        <function-ref name="toggle" scoped="" ref="0x10b68f330"/>
        <function-ref name="isOutput" scoped="" ref="0x10b68f4b8"/>
        <function-ref name="get" scoped="" ref="0x10b68f640"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b68f7c8"/>
        <function-ref name="set" scoped="" ref="0x10b68f950"/>
        <function-ref name="clr" scoped="" ref="0x10b68fad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x10b68a3e0" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x10b68a3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10b68a730"/>
        <function-ref name="isInput" scoped="" ref="0x10b68a8b8"/>
        <function-ref name="toggle" scoped="" ref="0x10b68aa40"/>
        <function-ref name="isOutput" scoped="" ref="0x10b68abc8"/>
        <function-ref name="get" scoped="" ref="0x10b68ad50"/>
        <function-ref name="makeOutput" scoped="" ref="0x10b689020"/>
        <function-ref name="set" scoped="" ref="0x10b6891a8"/>
        <function-ref name="clr" scoped="" ref="0x10b689330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10b6caaf8" loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10b6caaf8"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x10b414570"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x10b414570"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10b6cae48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x10b6c9158" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x10b6c9158"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x10b6c94a8"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x10b6c9630"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x10b6c97b8"/>
        <function-ref name="actualMicro" scoped="" ref="0x10b6c9940"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x10b6c9ac8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x10b6e7a60" loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x10b6e7a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10b6e7db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x10b6e8278" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x10b6e8278"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x10b6e85c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x10b6e7398" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x10b6e7398"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10b6e76e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x10b6e88b0" loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x10b6e88b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10b6e8c00"/>
        <function-ref name="taskLoop" scoped="" ref="0x10b6e8d88"/>
        <function-ref name="runNextTask" scoped="" ref="0x10b6e7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x10b411368" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x10b411368"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10b4116b8"/>
        <function-ref name="runTask" scoped="" ref="0x10b411840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x10b410b30" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x10b410b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10b410e80"/>
        <function-ref name="taskLoop" scoped="" ref="0x10b412030"/>
        <function-ref name="runNextTask" scoped="" ref="0x10b4121b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x10b4f2c58" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x10b4f2c58"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10b4f1020"/>
        <function-ref name="runTask" scoped="" ref="0x10b4f11a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x10b4fb168" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x10b4fb168"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x10b4fb4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x10b4f3d88" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x10b4f3d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10b4f2170"/>
        <function-ref name="taskLoop" scoped="" ref="0x10b4f22f8"/>
        <function-ref name="runNextTask" scoped="" ref="0x10b4f2480"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x10b5152b0" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x10b5152b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x10b515600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x10b41ae30" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x10b41ae30"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x10b50d1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x10b5173c8" loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x10b5173c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x10b517718"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x10b79e6c0" loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/PrintfC.nc">
      <component-ref qname="PrintfC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x10b79e6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x10b79ea10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MainBoot" ref="0x10b79d1f0" loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/PrintfC.nc">
      <component-ref qname="PrintfC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MainBoot" scoped="" ref="0x10b79d1f0"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x10b414570"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x10b414570"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x10b79d540"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x10b7ac1e0" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x10b7ac1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x10b7ac530"/>
        <function-ref name="stopDone" scoped="" ref="0x10b7ac6b8"/>
        <function-ref name="start" scoped="" ref="0x10b7ac840"/>
        <function-ref name="stop" scoped="" ref="0x10b7ac9c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x10b7ba788" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x10b7ba788"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10b7baad8"/>
        <function-ref name="getPayload" scoped="" ref="0x10b7bac60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10b7bade8"/>
        <function-ref name="cancel" scoped="" ref="0x10b799020"/>
        <function-ref name="sendDone" scoped="" ref="0x10b7991a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x10b7c5740" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x10b7c5740"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10b7c5a90"/>
        <function-ref name="payloadLength" scoped="" ref="0x10b7c5c18"/>
        <function-ref name="getPayload" scoped="" ref="0x10b7c5da0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10b7bc020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10b7bc1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x10b7b0300" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x10b7b0300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10b7b0650"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x10b7cb020" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x10b7cb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x10b7cb370"/>
        <function-ref name="led0Toggle" scoped="" ref="0x10b7cb4f8"/>
        <function-ref name="led1On" scoped="" ref="0x10b7cb680"/>
        <function-ref name="led1Toggle" scoped="" ref="0x10b7cb808"/>
        <function-ref name="led2Toggle" scoped="" ref="0x10b7cb990"/>
        <function-ref name="get" scoped="" ref="0x10b7cbb18"/>
        <function-ref name="led1Off" scoped="" ref="0x10b7cbca0"/>
        <function-ref name="led2Off" scoped="" ref="0x10b7de330"/>
        <function-ref name="set" scoped="" ref="0x10b7cbe28"/>
        <function-ref name="led0On" scoped="" ref="0x10b7de020"/>
        <function-ref name="led2On" scoped="" ref="0x10b7de1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x10b7dfde0" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10b7dfde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x10b7d0170"/>
        <function-ref name="noAck" scoped="" ref="0x10b7d02f8"/>
        <function-ref name="wasAcked" scoped="" ref="0x10b7d0480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x10b7cce08" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x10b7cce08"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x10b7b71a8"/>
        <function-ref name="source" scoped="" ref="0x10b7b7330"/>
        <function-ref name="address" scoped="" ref="0x10b7b74b8"/>
        <function-ref name="destination" scoped="" ref="0x10b7b7640"/>
        <function-ref name="setSource" scoped="" ref="0x10b7b77c8"/>
        <function-ref name="setDestination" scoped="" ref="0x10b7b7950"/>
        <function-ref name="type" scoped="" ref="0x10b7b7ad8"/>
        <function-ref name="setType" scoped="" ref="0x10b7b7c60"/>
        <function-ref name="isForMe" scoped="" ref="0x10b7b7de8"/>
        <function-ref name="setGroup" scoped="" ref="0x10b7c4020"/>
        <function-ref name="localGroup" scoped="" ref="0x10b7c41a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x10b844bb0" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x10b844bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10b843020"/>
        <function-ref name="getPayload" scoped="" ref="0x10b8431a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10b843330"/>
        <function-ref name="cancel" scoped="" ref="0x10b8434b8"/>
        <function-ref name="sendDone" scoped="" ref="0x10b843640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x10b8438c8" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x10b8438c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10b843c18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x10b7ebb60" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x10b7ebb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10b847020"/>
        <function-ref name="getPayload" scoped="" ref="0x10b8471a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10b847330"/>
        <function-ref name="cancel" scoped="" ref="0x10b8474b8"/>
        <function-ref name="sendDone" scoped="" ref="0x10b847640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x10b845578" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x10b845578"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10b8458c8"/>
        <function-ref name="payloadLength" scoped="" ref="0x10b845a50"/>
        <function-ref name="getPayload" scoped="" ref="0x10b845bd8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10b845d60"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10b844020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x10b8479a8" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x10b8479a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10b847d18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x10b844268" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10b844268"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x10b8445b8"/>
        <function-ref name="noAck" scoped="" ref="0x10b844740"/>
        <function-ref name="wasAcked" scoped="" ref="0x10b8448c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x10b846020" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x10b846020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x10b846370"/>
        <function-ref name="source" scoped="" ref="0x10b8464f8"/>
        <function-ref name="address" scoped="" ref="0x10b846680"/>
        <function-ref name="destination" scoped="" ref="0x10b846808"/>
        <function-ref name="setSource" scoped="" ref="0x10b846990"/>
        <function-ref name="setDestination" scoped="" ref="0x10b846b18"/>
        <function-ref name="type" scoped="" ref="0x10b846ca0"/>
        <function-ref name="setType" scoped="" ref="0x10b846e28"/>
        <function-ref name="isForMe" scoped="" ref="0x10b845020"/>
        <function-ref name="setGroup" scoped="" ref="0x10b8451a8"/>
        <function-ref name="localGroup" scoped="" ref="0x10b845330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x10b83d2e8" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x10b83d2e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x10b83d638"/>
        <function-ref name="stopDone" scoped="" ref="0x10b83d7c0"/>
        <function-ref name="start" scoped="" ref="0x10b83d948"/>
        <function-ref name="stop" scoped="" ref="0x10b83dad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x10b83cce8" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x10b83cce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x10b797710"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10b8550a0"/>
        <function-ref name="getPayload" scoped="" ref="0x10b855228"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10b8553b0"/>
        <function-ref name="cancel" scoped="" ref="0x10b855538"/>
        <function-ref name="sendDone" scoped="" ref="0x10b8556c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10b841ba8" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10b841ba8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10b83d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x10b83c270" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x10b83c270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x10b797710"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10b83c5c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x10b8545a8" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x10b8545a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x10b8548f8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x10b854a80"/>
        <function-ref name="led1On" scoped="" ref="0x10b854c08"/>
        <function-ref name="led1Toggle" scoped="" ref="0x10b854d90"/>
        <function-ref name="led2Toggle" scoped="" ref="0x10b853020"/>
        <function-ref name="get" scoped="" ref="0x10b8531a8"/>
        <function-ref name="led1Off" scoped="" ref="0x10b853330"/>
        <function-ref name="led2Off" scoped="" ref="0x10b853950"/>
        <function-ref name="set" scoped="" ref="0x10b8534b8"/>
        <function-ref name="led0On" scoped="" ref="0x10b853640"/>
        <function-ref name="led2On" scoped="" ref="0x10b8537c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x10b84fba8" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialPacketInfo" scoped="" ref="0x10b84fba8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x10b797710"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x10b854020"/>
        <function-ref name="offset" scoped="" ref="0x10b8541a8"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x10b854330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x10b865b90" loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x10b865b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x10b864020"/>
        <function-ref name="stopDone" scoped="" ref="0x10b8641a8"/>
        <function-ref name="start" scoped="" ref="0x10b864330"/>
        <function-ref name="stop" scoped="" ref="0x10b8644b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x10b8c54d8" loc="326:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopDoneTask" scoped="" ref="0x10b8c54d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10b8c5828"/>
        <function-ref name="runTask" scoped="" ref="0x10b8c59b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x10b889b00" loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x10b889b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x10b889e50"/>
        <function-ref name="stop" scoped="" ref="0x10b88b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x10b8a68e0" loc="189:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RunTx" scoped="" ref="0x10b8a68e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10b8a6c30"/>
        <function-ref name="runTask" scoped="" ref="0x10b8a6db8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10b865578" loc="63:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10b865578"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10b8658c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x10b886608" loc="73:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFlush" scoped="" ref="0x10b886608"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x10b886958"/>
        <function-ref name="flush" scoped="" ref="0x10b886ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x10b8c7590" loc="320:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startDoneTask" scoped="" ref="0x10b8c7590"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10b8c78e0"/>
        <function-ref name="runTask" scoped="" ref="0x10b8c7a68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x10b871b38" loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x10b871b38"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x10b879020"/>
        <function-ref name="resetSend" scoped="" ref="0x10b8791a8"/>
        <function-ref name="dataReceived" scoped="" ref="0x10b879330"/>
        <function-ref name="resetReceive" scoped="" ref="0x10b8794b8"/>
        <function-ref name="putData" scoped="" ref="0x10b879640"/>
        <function-ref name="putDone" scoped="" ref="0x10b8797c8"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x10b879950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x10b879bc8" loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x10b879bc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x10b876020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x10b8761a8"/>
        <function-ref name="led1On" scoped="" ref="0x10b876330"/>
        <function-ref name="led1Toggle" scoped="" ref="0x10b8764b8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x10b876640"/>
        <function-ref name="get" scoped="" ref="0x10b8767c8"/>
        <function-ref name="led1Off" scoped="" ref="0x10b876950"/>
        <function-ref name="led2Off" scoped="" ref="0x10b88c020"/>
        <function-ref name="set" scoped="" ref="0x10b876ad8"/>
        <function-ref name="led0On" scoped="" ref="0x10b876c60"/>
        <function-ref name="led2On" scoped="" ref="0x10b876de8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x10b8dd6b0" loc="335:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x10b8dd6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10b8dda00"/>
        <function-ref name="runTask" scoped="" ref="0x10b8ddb88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x10b87b898" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x10b87b898"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x10b87bbe8"/>
        <function-ref name="nextByte" scoped="" ref="0x10b87bd70"/>
        <function-ref name="startSend" scoped="" ref="0x10b863020"/>
        <function-ref name="sendCompleted" scoped="" ref="0x10b8631a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x10b877b48" loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x10b877b48"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x10b87e020"/>
        <function-ref name="byteReceived" scoped="" ref="0x10b87e1a8"/>
        <function-ref name="endPacket" scoped="" ref="0x10b87e330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x10b98a100" loc="264:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="receiveTask" scoped="" ref="0x10b98a100"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10b98a450"/>
        <function-ref name="runTask" scoped="" ref="0x10b98a5d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x10b98e020" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x10b98e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x10b797710"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10b98e390"/>
        <function-ref name="getPayload" scoped="" ref="0x10b98e518"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10b98e6a0"/>
        <function-ref name="cancel" scoped="" ref="0x10b98e828"/>
        <function-ref name="sendDone" scoped="" ref="0x10b98e9b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x10b98a8a0" loc="147:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalSendDone" scoped="" ref="0x10b98a8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10b98abf0"/>
        <function-ref name="runTask" scoped="" ref="0x10b98ad78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x10b98f868" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x10b98f868"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x10b797710"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10b98fbd8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x10b98edb8" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketInfo" scoped="" ref="0x10b98edb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x10b797710"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x10b98d170"/>
        <function-ref name="offset" scoped="" ref="0x10b98d2f8"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x10b98d480"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x10b98ca50" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x10b98ca50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x10b98cda0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x10b98b020"/>
        <function-ref name="led1On" scoped="" ref="0x10b98b1a8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x10b98b330"/>
        <function-ref name="led2Toggle" scoped="" ref="0x10b98b4b8"/>
        <function-ref name="get" scoped="" ref="0x10b98b640"/>
        <function-ref name="led1Off" scoped="" ref="0x10b98b7c8"/>
        <function-ref name="led2On" scoped="" ref="0x10b98bde8"/>
        <function-ref name="set" scoped="" ref="0x10b98bad8"/>
        <function-ref name="led2Off" scoped="" ref="0x10b98b950"/>
        <function-ref name="led0On" scoped="" ref="0x10b98bc60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x10b98c020" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x10b98c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x10b98c370"/>
        <function-ref name="nextByte" scoped="" ref="0x10b98c4f8"/>
        <function-ref name="startSend" scoped="" ref="0x10b98c680"/>
        <function-ref name="sendCompleted" scoped="" ref="0x10b98c808"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x10b98d6c8" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x10b98d6c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x10b98da18"/>
        <function-ref name="byteReceived" scoped="" ref="0x10b98dba0"/>
        <function-ref name="endPacket" scoped="" ref="0x10b98dd28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x10b998448" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x10b998448"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10b998798"/>
        <function-ref name="receivedByte" scoped="" ref="0x10b998920"/>
        <function-ref name="receive" scoped="" ref="0x10b998aa8"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x10b998c30"/>
        <function-ref name="receiveDone" scoped="" ref="0x10b998db8"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x10b9a4020"/>
        <function-ref name="sendDone" scoped="" ref="0x10b9a41a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x10b988b38" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x10b988b38"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x10b9a5020"/>
        <function-ref name="resetSend" scoped="" ref="0x10b9a51a8"/>
        <function-ref name="dataReceived" scoped="" ref="0x10b9a5330"/>
        <function-ref name="resetReceive" scoped="" ref="0x10b9a54b8"/>
        <function-ref name="putData" scoped="" ref="0x10b9a5640"/>
        <function-ref name="putDone" scoped="" ref="0x10b9a57c8"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x10b9a5950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x10b9a4420" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x10b9a4420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x10b9a4770"/>
        <function-ref name="led0Toggle" scoped="" ref="0x10b9a48f8"/>
        <function-ref name="led1On" scoped="" ref="0x10b9a4a80"/>
        <function-ref name="led1Toggle" scoped="" ref="0x10b9a4c08"/>
        <function-ref name="led2Toggle" scoped="" ref="0x10b9a4d90"/>
        <function-ref name="get" scoped="" ref="0x10b9a3020"/>
        <function-ref name="led1Off" scoped="" ref="0x10b9a31a8"/>
        <function-ref name="led2Off" scoped="" ref="0x10b9a37c8"/>
        <function-ref name="set" scoped="" ref="0x10b9a3330"/>
        <function-ref name="led0On" scoped="" ref="0x10b9a34b8"/>
        <function-ref name="led2On" scoped="" ref="0x10b9a3640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x10b9bc020" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x10b9bc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10b9bc370"/>
        <function-ref name="receive" scoped="" ref="0x10b9bc4f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x10b9a6db0" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x10b9a6db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10b9bd170"/>
        <function-ref name="receivedByte" scoped="" ref="0x10b9bd2f8"/>
        <function-ref name="receive" scoped="" ref="0x10b9bd480"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x10b9bd608"/>
        <function-ref name="receiveDone" scoped="" ref="0x10b9bd790"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x10b9bd918"/>
        <function-ref name="sendDone" scoped="" ref="0x10b9bdaa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x10b9a65e8" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x10b9a65e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x10b9a6938"/>
        <function-ref name="stop" scoped="" ref="0x10b9a6ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x10b9d6020" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x10b9d6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10b9d6370"/>
        <function-ref name="receive" scoped="" ref="0x10b9d64f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x10b9d67e8" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x10b9d67e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10b9d6b38"/>
        <function-ref name="receivedByte" scoped="" ref="0x10b9d6cc0"/>
        <function-ref name="receive" scoped="" ref="0x10b9d6e48"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x10b9d5020"/>
        <function-ref name="receiveDone" scoped="" ref="0x10b9d51a8"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x10b9d5330"/>
        <function-ref name="sendDone" scoped="" ref="0x10b9d54b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x10b9cf868" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x10b9cf868"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TMicro" ref="0x10b4ad778"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10b9d45e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10b9d3020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10b9d4a68"/>
        <function-ref name="overflow" scoped="" ref="0x10b9d34a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x10b9bb740" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x10b9bb740"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x10b9bba90"/>
        <function-ref name="stop" scoped="" ref="0x10b9bbc18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x10b9cce58" loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x10b9cce58"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10ba101e8"/>
        <function-ref name="receive" scoped="" ref="0x10ba10370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartTxControl" ref="0x10ba0f5f8" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartTxControl" scoped="" ref="0x10ba0f5f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x10ba0f948"/>
        <function-ref name="stop" scoped="" ref="0x10ba0fad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10b9cc120" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10b9cc120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10b9cc470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x10ba105f8" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x10ba105f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10ba10948"/>
        <function-ref name="receivedByte" scoped="" ref="0x10ba10ad0"/>
        <function-ref name="receive" scoped="" ref="0x10ba10c58"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x10ba10de0"/>
        <function-ref name="receiveDone" scoped="" ref="0x10ba0f020"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x10ba0f1a8"/>
        <function-ref name="sendDone" scoped="" ref="0x10ba0f330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x10ba0dc60" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x10ba0dc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TMicro" ref="0x10b4ad778"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10ba0c9f0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10ba0a330"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10ba0ce78"/>
        <function-ref name="overflow" scoped="" ref="0x10ba0a7b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUart" ref="0x10ba0e5c0" loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart" scoped="" ref="0x10ba0e5c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x10ba0e910"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x10ba0ea98"/>
        <function-ref name="rxDone" scoped="" ref="0x10ba0ec20"/>
        <function-ref name="txDone" scoped="" ref="0x10ba0eda8"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x10ba0d020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x10ba0d1a8"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x10ba0d330"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x10ba0d4b8"/>
        <function-ref name="tx" scoped="" ref="0x10ba0d640"/>
        <function-ref name="rx" scoped="" ref="0x10ba0d7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x10b9cc6f8" loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x10b9cc6f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x10b9cca48"/>
        <function-ref name="stop" scoped="" ref="0x10b9ccbd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartRxControl" ref="0x10ba0fd98" loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartRxControl" scoped="" ref="0x10ba0fd98"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x10ba0e170"/>
        <function-ref name="stop" scoped="" ref="0x10ba0e2f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x10ba37860" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x10ba37860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x10ba37bb0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x10ba37d38"/>
        <function-ref name="rxDone" scoped="" ref="0x10ba36020"/>
        <function-ref name="txDone" scoped="" ref="0x10ba361a8"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x10ba36330"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x10ba364b8"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x10ba36640"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x10ba367c8"/>
        <function-ref name="tx" scoped="" ref="0x10ba36950"/>
        <function-ref name="rx" scoped="" ref="0x10ba36ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x10ba34020" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x10ba34020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x10ba34370"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x10ba344f8"/>
        <function-ref name="rxDone" scoped="" ref="0x10ba34680"/>
        <function-ref name="txDone" scoped="" ref="0x10ba34808"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x10ba34990"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x10ba34b18"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x10ba34ca0"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x10ba34e28"/>
        <function-ref name="tx" scoped="" ref="0x10ba33020"/>
        <function-ref name="rx" scoped="" ref="0x10ba331a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x10ba37020" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x10ba37020"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x10ba37370"/>
        <function-ref name="stop" scoped="" ref="0x10ba374f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x10ba36e58" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x10ba36e58"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x10ba351e8"/>
        <function-ref name="stop" scoped="" ref="0x10ba35370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x10ba356f0" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x10ba356f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x10ba35a40"/>
        <function-ref name="stop" scoped="" ref="0x10ba35bc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x10ba38700" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x10ba38700"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x10ba38a50"/>
        <function-ref name="stop" scoped="" ref="0x10ba38bd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0Init" ref="0x10ba52020" loc="94:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0Init" scoped="" ref="0x10ba52020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10ba52370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x10ba518a0" loc="97:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x10ba518a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x10ba51bf0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x10ba51d78"/>
        <function-ref name="rxDone" scoped="" ref="0x10ba50020"/>
        <function-ref name="txDone" scoped="" ref="0x10ba501a8"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x10ba50330"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x10ba504b8"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x10ba50640"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x10ba507c8"/>
        <function-ref name="tx" scoped="" ref="0x10ba50950"/>
        <function-ref name="rx" scoped="" ref="0x10ba50ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1Init" ref="0x10ba50e30" loc="99:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1Init" scoped="" ref="0x10ba50e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10ba4f1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x10ba4e6d8" loc="102:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x10ba4e6d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x10ba4ea28"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x10ba4ebb0"/>
        <function-ref name="rxDone" scoped="" ref="0x10ba4ed38"/>
        <function-ref name="txDone" scoped="" ref="0x10ba4d020"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x10ba4d1a8"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x10ba4d330"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x10ba4d4b8"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x10ba4d640"/>
        <function-ref name="tx" scoped="" ref="0x10ba4d7c8"/>
        <function-ref name="rx" scoped="" ref="0x10ba4d950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x10ba51020" loc="96:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x10ba51020"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x10ba51370"/>
        <function-ref name="stop" scoped="" ref="0x10ba514f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x10ba4f568" loc="100:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x10ba4f568"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x10ba4f8b8"/>
        <function-ref name="stop" scoped="" ref="0x10ba4fa40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x10ba4fe00" loc="101:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x10ba4fe00"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x10ba4e1a8"/>
        <function-ref name="stop" scoped="" ref="0x10ba4e330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x10ba4dc70" loc="104:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x10ba4dc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x10ba4b020"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x10ba4b1a8"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x10ba4b330"/>
        <function-ref name="actualMicro" scoped="" ref="0x10ba4b4b8"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x10ba4b640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x10ba4b950" loc="105:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x10ba4b950"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x10ba4bca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x10ba52730" loc="95:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x10ba52730"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x10ba52a80"/>
        <function-ref name="stop" scoped="" ref="0x10ba52c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x10ba9e188" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/CounterMicro32C.nc">
      <component-ref qname="CounterMicro32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x10ba9e188"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TMicro" ref="0x10b4ad778"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10ba9d020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10ba9d930"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10ba9d4a8"/>
        <function-ref name="overflow" scoped="" ref="0x10ba9ddb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x10babd020" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/CounterThree16C.nc">
      <component-ref qname="CounterThree16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x10babd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TThree" ref="0x10b4e9d70"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10babdd70"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10babb6b8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10babb230"/>
        <function-ref name="overflow" scoped="" ref="0x10babbb40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x10bac6aa8" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x10bac6aa8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x10bac6df8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x10bacd020"/>
        <function-ref name="getControlA" scoped="" ref="0x10bacd1a8"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x10bacd330"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x10bacd4b8"/>
        <function-ref name="setControlB" scoped="" ref="0x10bacd640"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x10bacd7c8"/>
        <function-ref name="getControlB" scoped="" ref="0x10bacd950"/>
        <function-ref name="setControlC" scoped="" ref="0x10bacdad8"/>
        <function-ref name="setControlA" scoped="" ref="0x10bacdc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x10bae1540" loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x10bae1540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x10bae06f8"/>
        <function-ref name="test" scoped="" ref="0x10bac4db8"/>
        <function-ref name="get" scoped="" ref="0x10bac50f8"/>
        <function-ref name="captured" scoped="" ref="0x10bac5a58"/>
        <function-ref name="reset" scoped="" ref="0x10bac4020"/>
        <function-ref name="isOn" scoped="" ref="0x10bae0270"/>
        <function-ref name="set" scoped="" ref="0x10bac5580"/>
        <function-ref name="start" scoped="" ref="0x10bac44a8"/>
        <function-ref name="stop" scoped="" ref="0x10bac4930"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x10bad7a20" loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x10bad7a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x10bad6270"/>
        <function-ref name="fired" scoped="" ref="0x10badd020"/>
        <function-ref name="get" scoped="" ref="0x10bade5d8"/>
        <function-ref name="reset" scoped="" ref="0x10badd4a8"/>
        <function-ref name="isOn" scoped="" ref="0x10bad66f8"/>
        <function-ref name="set" scoped="" ref="0x10badea60"/>
        <function-ref name="start" scoped="" ref="0x10badd930"/>
        <function-ref name="stop" scoped="" ref="0x10badddb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x10bab7020" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x10bab7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x10baac0f8"/>
        <function-ref name="test" scoped="" ref="0x10baad7a8"/>
        <function-ref name="get" scoped="" ref="0x10bab7ba0"/>
        <function-ref name="setScale" scoped="" ref="0x10baac580"/>
        <function-ref name="getScale" scoped="" ref="0x10baaca58"/>
        <function-ref name="reset" scoped="" ref="0x10baae9e8"/>
        <function-ref name="overflow" scoped="" ref="0x10baae560"/>
        <function-ref name="isOn" scoped="" ref="0x10baadc30"/>
        <function-ref name="set" scoped="" ref="0x10baae088"/>
        <function-ref name="start" scoped="" ref="0x10baaee70"/>
        <function-ref name="stop" scoped="" ref="0x10baad320"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x10baf2c90" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x10baf2c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x10baf1020"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x10baf11a8"/>
        <function-ref name="getControlA" scoped="" ref="0x10baf1330"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x10baf14b8"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x10baf1640"/>
        <function-ref name="setControlB" scoped="" ref="0x10baf17c8"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x10baf1950"/>
        <function-ref name="getControlB" scoped="" ref="0x10baf1ad8"/>
        <function-ref name="setControlC" scoped="" ref="0x10baf1c60"/>
        <function-ref name="setControlA" scoped="" ref="0x10baf1de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x10baecc48" loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x10baecc48"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x10bae84a8"/>
        <function-ref name="fired" scoped="" ref="0x10bae91d0"/>
        <function-ref name="get" scoped="" ref="0x10baeb820"/>
        <function-ref name="reset" scoped="" ref="0x10bae9658"/>
        <function-ref name="isOn" scoped="" ref="0x10bae8930"/>
        <function-ref name="set" scoped="" ref="0x10baebca8"/>
        <function-ref name="start" scoped="" ref="0x10bae9ae0"/>
        <function-ref name="stop" scoped="" ref="0x10bae8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x10baf0350" loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x10baf0350"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x10baec580"/>
        <function-ref name="test" scoped="" ref="0x10baedc20"/>
        <function-ref name="get" scoped="" ref="0x10baef020"/>
        <function-ref name="captured" scoped="" ref="0x10baef980"/>
        <function-ref name="reset" scoped="" ref="0x10baefe58"/>
        <function-ref name="isOn" scoped="" ref="0x10baec0f8"/>
        <function-ref name="set" scoped="" ref="0x10baef4a8"/>
        <function-ref name="start" scoped="" ref="0x10baed310"/>
        <function-ref name="stop" scoped="" ref="0x10baed798"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x10bae7020" loc="63:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x10bae7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x10bae47a8"/>
        <function-ref name="fired" scoped="" ref="0x10bae6560"/>
        <function-ref name="get" scoped="" ref="0x10bae7ba0"/>
        <function-ref name="reset" scoped="" ref="0x10bae69e8"/>
        <function-ref name="isOn" scoped="" ref="0x10bae4c30"/>
        <function-ref name="set" scoped="" ref="0x10bae6088"/>
        <function-ref name="start" scoped="" ref="0x10bae6e70"/>
        <function-ref name="stop" scoped="" ref="0x10bae4320"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x10bae3360" loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x10bae3360"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x10bb06c20"/>
        <function-ref name="fired" scoped="" ref="0x10bae2980"/>
        <function-ref name="get" scoped="" ref="0x10bae2020"/>
        <function-ref name="reset" scoped="" ref="0x10bae2e08"/>
        <function-ref name="isOn" scoped="" ref="0x10bb050f8"/>
        <function-ref name="set" scoped="" ref="0x10bae24a8"/>
        <function-ref name="start" scoped="" ref="0x10bb06310"/>
        <function-ref name="stop" scoped="" ref="0x10bb06798"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x10bad4bf0" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer3P.nc">
      <component-ref qname="HplAtm1281Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x10bad4bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x10baf3db8"/>
        <function-ref name="test" scoped="" ref="0x10baf34a8"/>
        <function-ref name="get" scoped="" ref="0x10bad17a0"/>
        <function-ref name="setScale" scoped="" ref="0x10baf2270"/>
        <function-ref name="getScale" scoped="" ref="0x10baf2748"/>
        <function-ref name="reset" scoped="" ref="0x10bad05b8"/>
        <function-ref name="overflow" scoped="" ref="0x10bad0130"/>
        <function-ref name="isOn" scoped="" ref="0x10baf3930"/>
        <function-ref name="set" scoped="" ref="0x10bad1c28"/>
        <function-ref name="start" scoped="" ref="0x10bad0a40"/>
        <function-ref name="stop" scoped="" ref="0x10baf3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10bb73940" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10bb73940"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x10b414208"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x10b414208"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10bb73c90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x10bb67098" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x10bb67098"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x10bb8b270"/>
        <function-ref name="test" scoped="" ref="0x10bb8c930"/>
        <function-ref name="get" scoped="" ref="0x10bb67c18"/>
        <function-ref name="setScale" scoped="" ref="0x10bb8b6f8"/>
        <function-ref name="getScale" scoped="" ref="0x10bb8bbd0"/>
        <function-ref name="reset" scoped="" ref="0x10bb8ea58"/>
        <function-ref name="overflow" scoped="" ref="0x10bb8e5d0"/>
        <function-ref name="isOn" scoped="" ref="0x10bb8cdb8"/>
        <function-ref name="set" scoped="" ref="0x10bb8e0f8"/>
        <function-ref name="start" scoped="" ref="0x10bb8c020"/>
        <function-ref name="stop" scoped="" ref="0x10bb8c4a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x10bb88b90" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x10bb88b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TThree" ref="0x10b4e9d70"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10bb87930"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10bb9d270"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10bb87db8"/>
        <function-ref name="overflow" scoped="" ref="0x10bb9d6f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x10bb9dc58" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x10bb9dc58"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x10bb99db8"/>
        <function-ref name="test" scoped="" ref="0x10bb994a8"/>
        <function-ref name="get" scoped="" ref="0x10bb9c820"/>
        <function-ref name="setScale" scoped="" ref="0x10bb98270"/>
        <function-ref name="getScale" scoped="" ref="0x10bb98748"/>
        <function-ref name="reset" scoped="" ref="0x10bb9b658"/>
        <function-ref name="overflow" scoped="" ref="0x10bb9b1d0"/>
        <function-ref name="isOn" scoped="" ref="0x10bb99930"/>
        <function-ref name="set" scoped="" ref="0x10bb9cca8"/>
        <function-ref name="start" scoped="" ref="0x10bb9bae0"/>
        <function-ref name="stop" scoped="" ref="0x10bb99020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x10bbc8450" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x10bbc8450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TThree" ref="0x10b4e9d70"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10bbc61d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10bbc6ae0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10bbc6658"/>
        <function-ref name="overflow" scoped="" ref="0x10bbc5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x10bb94270" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x10bb94270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TMicro" ref="0x10b4ad778"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10bbc9020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10bbc9930"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10bbc94a8"/>
        <function-ref name="overflow" scoped="" ref="0x10bbc9db8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x10bbbb020" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Info" scoped="" ref="0x10bbbb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x10bbbb370"/>
        <function-ref name="offset" scoped="" ref="0x10bbbb4f8"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x10bbbb680"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x10bc341d0" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x10bc341d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10bc34520"/>
        <function-ref name="getPayload" scoped="" ref="0x10bc346a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bc34830"/>
        <function-ref name="cancel" scoped="" ref="0x10bc349b8"/>
        <function-ref name="sendDone" scoped="" ref="0x10bc34b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x10bc34d88" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x10bc34d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10bc33170"/>
        <function-ref name="payloadLength" scoped="" ref="0x10bc332f8"/>
        <function-ref name="getPayload" scoped="" ref="0x10bc33480"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bc33608"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10bc33790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x10bc339d8" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x10bc339d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x10bc33d28"/>
        <function-ref name="source" scoped="" ref="0x10bc5c020"/>
        <function-ref name="address" scoped="" ref="0x10bc5c1a8"/>
        <function-ref name="destination" scoped="" ref="0x10bc5c330"/>
        <function-ref name="setSource" scoped="" ref="0x10bc5c4b8"/>
        <function-ref name="setDestination" scoped="" ref="0x10bc5c640"/>
        <function-ref name="type" scoped="" ref="0x10bc5c7c8"/>
        <function-ref name="setType" scoped="" ref="0x10bc5c950"/>
        <function-ref name="isForMe" scoped="" ref="0x10bc5cad8"/>
        <function-ref name="setGroup" scoped="" ref="0x10bc5cc60"/>
        <function-ref name="localGroup" scoped="" ref="0x10bc5cde8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x10bc5b0a0" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x10bc5b0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x10bc5b3f0"/>
        <function-ref name="noAck" scoped="" ref="0x10bc5b578"/>
        <function-ref name="wasAcked" scoped="" ref="0x10bc5b700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x10cc441f0" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x10cc441f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10cc44540"/>
        <function-ref name="getPayload" scoped="" ref="0x10cc446c8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10cc44850"/>
        <function-ref name="cancel" scoped="" ref="0x10cc449d8"/>
        <function-ref name="sendDone" scoped="" ref="0x10cc44b60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x10cc44e08" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x10cc44e08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10cc431a8"/>
        <function-ref name="getPayload" scoped="" ref="0x10cc43330"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10cc434b8"/>
        <function-ref name="cancel" scoped="" ref="0x10cc43640"/>
        <function-ref name="sendDone" scoped="" ref="0x10cc437c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x10cc43a10" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x10cc43a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x10cc43d60"/>
        <function-ref name="source" scoped="" ref="0x10cc42020"/>
        <function-ref name="address" scoped="" ref="0x10cc421a8"/>
        <function-ref name="destination" scoped="" ref="0x10cc42330"/>
        <function-ref name="setSource" scoped="" ref="0x10cc424b8"/>
        <function-ref name="setDestination" scoped="" ref="0x10cc42640"/>
        <function-ref name="type" scoped="" ref="0x10cc427c8"/>
        <function-ref name="setType" scoped="" ref="0x10cc42950"/>
        <function-ref name="isForMe" scoped="" ref="0x10cc42ad8"/>
        <function-ref name="setGroup" scoped="" ref="0x10cc42c60"/>
        <function-ref name="localGroup" scoped="" ref="0x10cc42de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x10bbe17f8" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialAMQueueP.nc">
      <component-ref qname="SerialAMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x10bbe17f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10bbe1b48"/>
        <function-ref name="getPayload" scoped="" ref="0x10bbe1cd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bbe1e58"/>
        <function-ref name="cancel" scoped="" ref="0x10bbe0020"/>
        <function-ref name="sendDone" scoped="" ref="0x10bbe01a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x10bc41a08" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x10bc41a08"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10bc41d78"/>
        <function-ref name="getPayload" scoped="" ref="0x10bc40020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bc401a8"/>
        <function-ref name="cancel" scoped="" ref="0x10bc40330"/>
        <function-ref name="sendDone" scoped="" ref="0x10bc404b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x10bc42b98" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x10bc42b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10bc41020"/>
        <function-ref name="getPayload" scoped="" ref="0x10bc411a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bc41330"/>
        <function-ref name="cancel" scoped="" ref="0x10bc414b8"/>
        <function-ref name="sendDone" scoped="" ref="0x10bc41640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x10bc3fd20" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x10bc3fd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10bc3d0a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x10bc3d228"/>
        <function-ref name="getPayload" scoped="" ref="0x10bc3d3b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bc3d538"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10bc3d6c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x10bc3d988" loc="161:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0x10bc3d988"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10bc3dcd8"/>
        <function-ref name="runTask" scoped="" ref="0x10bc3de60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x10bc3c160" loc="118:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0x10bc3c160"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10bc3c4b0"/>
        <function-ref name="runTask" scoped="" ref="0x10bc3c638"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x10bc40700" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x10bc40700"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x10bc40a50"/>
        <function-ref name="source" scoped="" ref="0x10bc40bd8"/>
        <function-ref name="address" scoped="" ref="0x10bc40d60"/>
        <function-ref name="destination" scoped="" ref="0x10bc3f020"/>
        <function-ref name="setSource" scoped="" ref="0x10bc3f1a8"/>
        <function-ref name="setDestination" scoped="" ref="0x10bc3f330"/>
        <function-ref name="type" scoped="" ref="0x10bc3f4b8"/>
        <function-ref name="setType" scoped="" ref="0x10bc3f640"/>
        <function-ref name="isForMe" scoped="" ref="0x10bc3f7c8"/>
        <function-ref name="setGroup" scoped="" ref="0x10bc3f950"/>
        <function-ref name="localGroup" scoped="" ref="0x10bc3fad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x10bc59d50" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/system/QueueC.nc">
      <component-ref qname="PrintfC.QueueC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x10bc59d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x10bc62610"/>
        <function-ref name="enqueue" scoped="" ref="0x10bc61300"/>
        <function-ref name="element" scoped="" ref="0x10bc61930"/>
        <function-ref name="maxSize" scoped="" ref="0x10bc621c0"/>
        <function-ref name="dequeue" scoped="" ref="0x10bc62c70"/>
        <function-ref name="empty" scoped="" ref="0x10bc588f0"/>
        <function-ref name="size" scoped="" ref="0x10bc58d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x10bc859c0" loc="86:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x10bc859c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x10bc85d10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x10bc847f8" loc="90:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x10bc847f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x10bc84b48"/>
        <function-ref name="stopDone" scoped="" ref="0x10bc84cd0"/>
        <function-ref name="start" scoped="" ref="0x10bc84e58"/>
        <function-ref name="stop" scoped="" ref="0x10bc83020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x10bc83468" loc="91:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x10bc83468"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x10bc82d10"/>
        <function-ref name="enqueue" scoped="" ref="0x10bc81a30"/>
        <function-ref name="element" scoped="" ref="0x10bc7f088"/>
        <function-ref name="maxSize" scoped="" ref="0x10bc828c0"/>
        <function-ref name="dequeue" scoped="" ref="0x10bc813d0"/>
        <function-ref name="empty" scoped="" ref="0x10bc82020"/>
        <function-ref name="size" scoped="" ref="0x10bc82470"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x10bc7f700" loc="93:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x10bc7f700"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10bc7fa50"/>
        <function-ref name="getPayload" scoped="" ref="0x10bc7fbd8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bc7fd60"/>
        <function-ref name="cancel" scoped="" ref="0x10bc7e020"/>
        <function-ref name="sendDone" scoped="" ref="0x10bc7e1a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x10bc7e430" loc="94:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x10bc7e430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10bc7e780"/>
        <function-ref name="payloadLength" scoped="" ref="0x10bc7e908"/>
        <function-ref name="getPayload" scoped="" ref="0x10bc7ea90"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bc7ec18"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10bc7eda0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="retrySend" ref="0x10bc74c60" loc="127:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="retrySend" scoped="" ref="0x10bc74c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10bc73020"/>
        <function-ref name="runTask" scoped="" ref="0x10bc731a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x10bc7d080" loc="95:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x10bc7d080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x10bc7d3d0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x10bc7d558"/>
        <function-ref name="led1On" scoped="" ref="0x10bc7d6e0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x10bc7d868"/>
        <function-ref name="led2Toggle" scoped="" ref="0x10bc7d9f0"/>
        <function-ref name="get" scoped="" ref="0x10bc7db78"/>
        <function-ref name="led1Off" scoped="" ref="0x10bc7dd00"/>
        <function-ref name="led2Off" scoped="" ref="0x10bc7c4b8"/>
        <function-ref name="set" scoped="" ref="0x10bc7c020"/>
        <function-ref name="led0On" scoped="" ref="0x10bc7c1a8"/>
        <function-ref name="led2On" scoped="" ref="0x10bc7c330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MainBoot" ref="0x10bc84118" loc="89:/usr/local/Cellar/tinyos/2.1.1/tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MainBoot" scoped="" ref="0x10bc84118"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x10bc84468"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x10bcb3080" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x10bcb3080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x10bcb33d0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x10bcb3558"/>
        <function-ref name="led1On" scoped="" ref="0x10bcb36e0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x10bcb3868"/>
        <function-ref name="led2Toggle" scoped="" ref="0x10bcb39f0"/>
        <function-ref name="get" scoped="" ref="0x10bcb3b78"/>
        <function-ref name="led1Off" scoped="" ref="0x10bcb3d00"/>
        <function-ref name="led2Off" scoped="" ref="0x10bcb24b8"/>
        <function-ref name="set" scoped="" ref="0x10bcb2020"/>
        <function-ref name="led0On" scoped="" ref="0x10bcb21a8"/>
        <function-ref name="led2On" scoped="" ref="0x10bcb2330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x10bcad020" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x10bcad020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10bcad370"/>
        <function-ref name="isInput" scoped="" ref="0x10bcad4f8"/>
        <function-ref name="toggle" scoped="" ref="0x10bcad680"/>
        <function-ref name="isOutput" scoped="" ref="0x10bcad808"/>
        <function-ref name="get" scoped="" ref="0x10bcad990"/>
        <function-ref name="makeOutput" scoped="" ref="0x10bcadb18"/>
        <function-ref name="set" scoped="" ref="0x10bcadca0"/>
        <function-ref name="clr" scoped="" ref="0x10bcade28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10bcaf368" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10bcaf368"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10bcaf6b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x10bcac190" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x10bcac190"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10bcac4e0"/>
        <function-ref name="isInput" scoped="" ref="0x10bcac668"/>
        <function-ref name="toggle" scoped="" ref="0x10bcac7f0"/>
        <function-ref name="isOutput" scoped="" ref="0x10bcac978"/>
        <function-ref name="get" scoped="" ref="0x10bcacb00"/>
        <function-ref name="makeOutput" scoped="" ref="0x10bcacc88"/>
        <function-ref name="set" scoped="" ref="0x10bcace10"/>
        <function-ref name="clr" scoped="" ref="0x10bcab020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x10bcaf930" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x10bcaf930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x10bcafc80"/>
        <function-ref name="led0Toggle" scoped="" ref="0x10bcafe08"/>
        <function-ref name="led1On" scoped="" ref="0x10bcae020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x10bcae1a8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x10bcae330"/>
        <function-ref name="get" scoped="" ref="0x10bcae4b8"/>
        <function-ref name="led1Off" scoped="" ref="0x10bcae640"/>
        <function-ref name="led2Off" scoped="" ref="0x10bcaec60"/>
        <function-ref name="set" scoped="" ref="0x10bcae7c8"/>
        <function-ref name="led0On" scoped="" ref="0x10bcae950"/>
        <function-ref name="led2On" scoped="" ref="0x10bcaead8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x10bcab338" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x10bcab338"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10bcab688"/>
        <function-ref name="isInput" scoped="" ref="0x10bcab810"/>
        <function-ref name="toggle" scoped="" ref="0x10bcab998"/>
        <function-ref name="isOutput" scoped="" ref="0x10bcabb20"/>
        <function-ref name="get" scoped="" ref="0x10bcabca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10bcabe30"/>
        <function-ref name="set" scoped="" ref="0x10bcaa020"/>
        <function-ref name="clr" scoped="" ref="0x10bcaa1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x10bcbb020" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x10bcbb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10bcbb370"/>
        <function-ref name="isInput" scoped="" ref="0x10bcbb4f8"/>
        <function-ref name="toggle" scoped="" ref="0x10bcbb680"/>
        <function-ref name="isOutput" scoped="" ref="0x10bcbb808"/>
        <function-ref name="get" scoped="" ref="0x10bcbb990"/>
        <function-ref name="makeOutput" scoped="" ref="0x10bcbbb18"/>
        <function-ref name="set" scoped="" ref="0x10bcbbca0"/>
        <function-ref name="clr" scoped="" ref="0x10bcbbe28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x10bcba1b0" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x10bcba1b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10bcba500"/>
        <function-ref name="isInput" scoped="" ref="0x10bcba688"/>
        <function-ref name="toggle" scoped="" ref="0x10bcba810"/>
        <function-ref name="isOutput" scoped="" ref="0x10bcba998"/>
        <function-ref name="get" scoped="" ref="0x10bcbab20"/>
        <function-ref name="makeOutput" scoped="" ref="0x10bcbaca8"/>
        <function-ref name="set" scoped="" ref="0x10bcbae30"/>
        <function-ref name="clr" scoped="" ref="0x10bcb9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x10bcb8460" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10bcb8460"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10bcb87b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x10bcb9378" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x10bcb9378"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10bcb96c8"/>
        <function-ref name="isInput" scoped="" ref="0x10bcb9850"/>
        <function-ref name="toggle" scoped="" ref="0x10bcb99d8"/>
        <function-ref name="isOutput" scoped="" ref="0x10bcb9b60"/>
        <function-ref name="get" scoped="" ref="0x10bcb9ce8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10bcb9e70"/>
        <function-ref name="set" scoped="" ref="0x10bcb8020"/>
        <function-ref name="clr" scoped="" ref="0x10bcb81a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer0" ref="0x10bce25c8" loc="9:BaseC.nc">
      <component-ref qname="BaseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer0" scoped="" ref="0x10bce25c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10bd0e8f0"/>
        <function-ref name="fired" scoped="" ref="0x10bce1020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x10bce1d10"/>
        <function-ref name="isOneShot" scoped="" ref="0x10bce18c0"/>
        <function-ref name="getdt" scoped="" ref="0x10bd0d1c0"/>
        <function-ref name="gett0" scoped="" ref="0x10bd0ed40"/>
        <function-ref name="isRunning" scoped="" ref="0x10bce1470"/>
        <function-ref name="startPeriodic" scoped="" ref="0x10bcea158"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x10bd0e320"/>
        <function-ref name="startOneShot" scoped="" ref="0x10bcea5f8"/>
        <function-ref name="stop" scoped="" ref="0x10bceaa98"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioLQI" ref="0x10bd245b0" loc="18:BaseC.nc">
      <component-ref qname="BaseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioLQI" scoped="" ref="0x10bd245b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10bd23bb0"/>
        <function-ref name="get" scoped="" ref="0x10bd236a0"/>
        <function-ref name="isSet" scoped="" ref="0x10bd23190"/>
        <function-ref name="set" scoped="" ref="0x10bd220f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMControl" ref="0x10bcfe060" loc="16:BaseC.nc">
      <component-ref qname="BaseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMControl" scoped="" ref="0x10bcfe060"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x10bcfe3b0"/>
        <function-ref name="stopDone" scoped="" ref="0x10bcfe538"/>
        <function-ref name="start" scoped="" ref="0x10bcfe6c0"/>
        <function-ref name="stop" scoped="" ref="0x10bcfe848"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioRSSI" ref="0x10bcfd270" loc="17:BaseC.nc">
      <component-ref qname="BaseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioRSSI" scoped="" ref="0x10bcfd270"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10bcfc838"/>
        <function-ref name="get" scoped="" ref="0x10bcfc328"/>
        <function-ref name="isSet" scoped="" ref="0x10bcfddf0"/>
        <function-ref name="set" scoped="" ref="0x10bcfcd48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x10bcee4a0" loc="7:BaseC.nc">
      <component-ref qname="BaseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x10bcee4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x10bcee7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x10bd20de8" loc="22:BaseC.nc">
      <component-ref qname="BaseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x10bd20de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x10bd1f170"/>
        <function-ref name="stopDone" scoped="" ref="0x10bd1f2f8"/>
        <function-ref name="start" scoped="" ref="0x10bd1f480"/>
        <function-ref name="stop" scoped="" ref="0x10bd1f608"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x10bd02930" loc="12:BaseC.nc">
      <component-ref qname="BaseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x10bd02930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10bd02c80"/>
        <function-ref name="payloadLength" scoped="" ref="0x10bd02e08"/>
        <function-ref name="getPayload" scoped="" ref="0x10bd01020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bd011a8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10bd01330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x10bd00c18" loc="14:BaseC.nc">
      <component-ref qname="BaseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x10bd00c18"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10bcff020"/>
        <function-ref name="getPayload" scoped="" ref="0x10bcff1a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bcff330"/>
        <function-ref name="cancel" scoped="" ref="0x10bcff4b8"/>
        <function-ref name="sendDone" scoped="" ref="0x10bcff640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer1" ref="0x10bd0d7d8" loc="10:BaseC.nc">
      <component-ref qname="BaseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer1" scoped="" ref="0x10bd0d7d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10bd09a18"/>
        <function-ref name="fired" scoped="" ref="0x10bd0a158"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x10bd0ae48"/>
        <function-ref name="isOneShot" scoped="" ref="0x10bd0a9f8"/>
        <function-ref name="getdt" scoped="" ref="0x10bd082e8"/>
        <function-ref name="gett0" scoped="" ref="0x10bd09e68"/>
        <function-ref name="isRunning" scoped="" ref="0x10bd0a5a8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x10bd0b370"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x10bd09448"/>
        <function-ref name="startOneShot" scoped="" ref="0x10bd0b810"/>
        <function-ref name="stop" scoped="" ref="0x10bd0bcb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialSend" ref="0x10bd227b0" loc="20:BaseC.nc">
      <component-ref qname="BaseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialSend" scoped="" ref="0x10bd227b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10bd22c00"/>
        <function-ref name="getPayload" scoped="" ref="0x10bd22d88"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bd20020"/>
        <function-ref name="cancel" scoped="" ref="0x10bd201a8"/>
        <function-ref name="sendDone" scoped="" ref="0x10bd20330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacket" ref="0x10bd1f9a8" loc="23:BaseC.nc">
      <component-ref qname="BaseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialPacket" scoped="" ref="0x10bd1f9a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x10bd1fcf8"/>
        <function-ref name="source" scoped="" ref="0x10bd1fe80"/>
        <function-ref name="address" scoped="" ref="0x10bd1e030"/>
        <function-ref name="destination" scoped="" ref="0x10bd1e1b8"/>
        <function-ref name="setSource" scoped="" ref="0x10bd1e340"/>
        <function-ref name="setDestination" scoped="" ref="0x10bd1e4c8"/>
        <function-ref name="type" scoped="" ref="0x10bd1e650"/>
        <function-ref name="setType" scoped="" ref="0x10bd1e7d8"/>
        <function-ref name="isForMe" scoped="" ref="0x10bd1e960"/>
        <function-ref name="setGroup" scoped="" ref="0x10bd1eae8"/>
        <function-ref name="localGroup" scoped="" ref="0x10bd1ec70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x10bcff910" loc="15:BaseC.nc">
      <component-ref qname="BaseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x10bcff910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10bcffc60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialReceive" ref="0x10bd206c8" loc="21:BaseC.nc">
      <component-ref qname="BaseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialReceive" scoped="" ref="0x10bd206c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10bd20a18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x10bceeaa8" loc="8:BaseC.nc">
      <component-ref qname="BaseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x10bceeaa8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x10bceedf8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x10bced020"/>
        <function-ref name="led1On" scoped="" ref="0x10bced1a8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x10bced330"/>
        <function-ref name="led2Toggle" scoped="" ref="0x10bced4b8"/>
        <function-ref name="get" scoped="" ref="0x10bced640"/>
        <function-ref name="led1Off" scoped="" ref="0x10bced7c8"/>
        <function-ref name="led2Off" scoped="" ref="0x10bcedde8"/>
        <function-ref name="set" scoped="" ref="0x10bced950"/>
        <function-ref name="led0On" scoped="" ref="0x10bcedad8"/>
        <function-ref name="led2On" scoped="" ref="0x10bcedc60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer2" ref="0x10bd08900" loc="11:BaseC.nc">
      <component-ref qname="BaseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer2" scoped="" ref="0x10bd08900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10bd04bc0"/>
        <function-ref name="fired" scoped="" ref="0x10bd05278"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x10bd04020"/>
        <function-ref name="isOneShot" scoped="" ref="0x10bd05b18"/>
        <function-ref name="getdt" scoped="" ref="0x10bd024d8"/>
        <function-ref name="gett0" scoped="" ref="0x10bd02088"/>
        <function-ref name="isRunning" scoped="" ref="0x10bd056c8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x10bd06490"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x10bd045f0"/>
        <function-ref name="startOneShot" scoped="" ref="0x10bd06930"/>
        <function-ref name="stop" scoped="" ref="0x10bd06dd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x10bd01610" loc="13:BaseC.nc">
      <component-ref qname="BaseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x10bd01610"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x10bd01960"/>
        <function-ref name="source" scoped="" ref="0x10bd01ae8"/>
        <function-ref name="address" scoped="" ref="0x10bd01c70"/>
        <function-ref name="destination" scoped="" ref="0x10bd01df8"/>
        <function-ref name="setSource" scoped="" ref="0x10bd00020"/>
        <function-ref name="setDestination" scoped="" ref="0x10bd001a8"/>
        <function-ref name="type" scoped="" ref="0x10bd00330"/>
        <function-ref name="setType" scoped="" ref="0x10bd004b8"/>
        <function-ref name="isForMe" scoped="" ref="0x10bd00640"/>
        <function-ref name="setGroup" scoped="" ref="0x10bd007c8"/>
        <function-ref name="localGroup" scoped="" ref="0x10bd00950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x10bd58a60" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/system/TimerMilliC.nc">
      <component-ref qname="BaseAppC.Timer0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x10bd58a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10bf00d60"/>
        <function-ref name="fired" scoped="" ref="0x10bf01470"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x10bf001c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x10bf01d10"/>
        <function-ref name="getdt" scoped="" ref="0x10beff648"/>
        <function-ref name="gett0" scoped="" ref="0x10beff1f8"/>
        <function-ref name="isRunning" scoped="" ref="0x10bf018c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x10bf03620"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x10bf00790"/>
        <function-ref name="startOneShot" scoped="" ref="0x10bf03ac0"/>
        <function-ref name="stop" scoped="" ref="0x10bf01020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x10bd7e6a0" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x10bd7e6a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10bd7aa18"/>
        <function-ref name="fired" scoped="" ref="0x10bd7c158"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x10bd7ce48"/>
        <function-ref name="isOneShot" scoped="" ref="0x10bd7c9f8"/>
        <function-ref name="getdt" scoped="" ref="0x10bd792e8"/>
        <function-ref name="gett0" scoped="" ref="0x10bd7ae68"/>
        <function-ref name="isRunning" scoped="" ref="0x10bd7c5a8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x10bd7d370"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x10bd7a448"/>
        <function-ref name="startOneShot" scoped="" ref="0x10bd7d810"/>
        <function-ref name="stop" scoped="" ref="0x10bd7dcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x10bd75de8" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x10bd75de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10bd710c0"/>
        <function-ref name="fired" scoped="" ref="0x10bd73798"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x10bd724d8"/>
        <function-ref name="isOneShot" scoped="" ref="0x10bd72088"/>
        <function-ref name="getdt" scoped="" ref="0x10bd71960"/>
        <function-ref name="gett0" scoped="" ref="0x10bd71510"/>
        <function-ref name="isRunning" scoped="" ref="0x10bd73be8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x10bd749e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x10bd72aa8"/>
        <function-ref name="startOneShot" scoped="" ref="0x10bd74e80"/>
        <function-ref name="stop" scoped="" ref="0x10bd73348"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x10bd6c338" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x10bd6c338"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10bd6e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10bd750f0" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10bd750f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10bd75440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x10bd8ec80" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x10bd8ec80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10bd8da28"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10bd8c4a8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10bd8c020"/>
        <function-ref name="overflow" scoped="" ref="0x10bd8c930"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10bd6bbd0" loc="27:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10bd6bbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10bd98020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x10bd90748" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x10bd90748"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10bd8e020"/>
        <function-ref name="fired" scoped="" ref="0x10bd96020"/>
        <function-ref name="startAt" scoped="" ref="0x10bd96930"/>
        <function-ref name="isRunning" scoped="" ref="0x10bd964a8"/>
        <function-ref name="getAlarm" scoped="" ref="0x10bd8e4a8"/>
        <function-ref name="start" scoped="" ref="0x10bd97578"/>
        <function-ref name="stop" scoped="" ref="0x10bd97a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x10be607c8" loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x10be607c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10be91020"/>
        <function-ref name="fired" scoped="" ref="0x10be92020"/>
        <function-ref name="startAt" scoped="" ref="0x10be92930"/>
        <function-ref name="isRunning" scoped="" ref="0x10be924a8"/>
        <function-ref name="getAlarm" scoped="" ref="0x10be914a8"/>
        <function-ref name="start" scoped="" ref="0x10be93578"/>
        <function-ref name="stop" scoped="" ref="0x10be93a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10be60020" loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10be60020"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x10b414208"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x10b414208"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10be60370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x10be91a90" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x10be91a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10be8f828"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10be8e190"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10be8fcb0"/>
        <function-ref name="overflow" scoped="" ref="0x10be8e618"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x10ccb20c0" loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x10ccb20c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x10ccb2410"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x10ccb2598"/>
        <function-ref name="getControlA" scoped="" ref="0x10ccb2720"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x10ccb28a8"/>
        <function-ref name="setControlB" scoped="" ref="0x10ccb2a30"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x10ccb2bb8"/>
        <function-ref name="getControlB" scoped="" ref="0x10ccb2d40"/>
        <function-ref name="setControlA" scoped="" ref="0x10ccb1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x10cc53020" loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x10cc53020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10cc50690"/>
        <function-ref name="fired" scoped="" ref="0x10cc526f8"/>
        <function-ref name="startAt" scoped="" ref="0x10cc50088"/>
        <function-ref name="isRunning" scoped="" ref="0x10cc52b80"/>
        <function-ref name="getAlarm" scoped="" ref="0x10cc50b18"/>
        <function-ref name="start" scoped="" ref="0x10cc53d70"/>
        <function-ref name="stop" scoped="" ref="0x10cc52270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10cc546e8" loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10cc546e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10cc54a38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x10cc4f128" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x10cc4f128"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10cc4fe78"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10cc4e7b8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10cc4e330"/>
        <function-ref name="overflow" scoped="" ref="0x10cc4ec40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerAsync" ref="0x10ccae510" loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x10ccae510"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x10ccae860"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x10ccae9e8"/>
        <function-ref name="controlABusy" scoped="" ref="0x10ccaeb70"/>
        <function-ref name="controlBBusy" scoped="" ref="0x10ccaecf8"/>
        <function-ref name="countBusy" scoped="" ref="0x10ccaee80"/>
        <function-ref name="compareABusy" scoped="" ref="0x10ccad030"/>
        <function-ref name="getAssr" scoped="" ref="0x10ccad1b8"/>
        <function-ref name="setAssr" scoped="" ref="0x10ccad340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x10ccb13b0" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x10ccb13b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x10ccafc20"/>
        <function-ref name="fired" scoped="" ref="0x10ccb0980"/>
        <function-ref name="get" scoped="" ref="0x10ccb0020"/>
        <function-ref name="reset" scoped="" ref="0x10ccb0e08"/>
        <function-ref name="isOn" scoped="" ref="0x10ccae0f8"/>
        <function-ref name="set" scoped="" ref="0x10ccb04a8"/>
        <function-ref name="start" scoped="" ref="0x10ccaf310"/>
        <function-ref name="stop" scoped="" ref="0x10ccaf798"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x10cc4d228" loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x10cc4d228"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x10ccb4310"/>
        <function-ref name="test" scoped="" ref="0x10ccb5998"/>
        <function-ref name="get" scoped="" ref="0x10cc4dda8"/>
        <function-ref name="setScale" scoped="" ref="0x10ccb4798"/>
        <function-ref name="getScale" scoped="" ref="0x10ccb4c70"/>
        <function-ref name="reset" scoped="" ref="0x10ccb6bd0"/>
        <function-ref name="overflow" scoped="" ref="0x10ccb6748"/>
        <function-ref name="isOn" scoped="" ref="0x10ccb5e20"/>
        <function-ref name="set" scoped="" ref="0x10ccb6270"/>
        <function-ref name="start" scoped="" ref="0x10ccb5088"/>
        <function-ref name="stop" scoped="" ref="0x10ccb5510"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x10be06558" loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x10be06558"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x10be068a8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x10be06a30"/>
        <function-ref name="getControlA" scoped="" ref="0x10be06bb8"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x10be06d40"/>
        <function-ref name="setControlB" scoped="" ref="0x10be05020"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x10be051a8"/>
        <function-ref name="getControlB" scoped="" ref="0x10be05330"/>
        <function-ref name="setControlA" scoped="" ref="0x10be054b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x10be01c38" loc="73:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x10be01c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x10be00020"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x10be001a8"/>
        <function-ref name="controlABusy" scoped="" ref="0x10be00330"/>
        <function-ref name="controlBBusy" scoped="" ref="0x10be004b8"/>
        <function-ref name="countBusy" scoped="" ref="0x10be00640"/>
        <function-ref name="compareABusy" scoped="" ref="0x10be007c8"/>
        <function-ref name="getAssr" scoped="" ref="0x10be00950"/>
        <function-ref name="setAssr" scoped="" ref="0x10be00ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x10be05980" loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x10be05980"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x10be01270"/>
        <function-ref name="fired" scoped="" ref="0x10be02020"/>
        <function-ref name="get" scoped="" ref="0x10be04560"/>
        <function-ref name="reset" scoped="" ref="0x10be024a8"/>
        <function-ref name="isOn" scoped="" ref="0x10be016f8"/>
        <function-ref name="set" scoped="" ref="0x10be049e8"/>
        <function-ref name="start" scoped="" ref="0x10be02930"/>
        <function-ref name="stop" scoped="" ref="0x10be02db8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x10be0b318" loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x10be0b318"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x10be07580"/>
        <function-ref name="test" scoped="" ref="0x10be08c20"/>
        <function-ref name="get" scoped="" ref="0x10be0a020"/>
        <function-ref name="setScale" scoped="" ref="0x10be07a08"/>
        <function-ref name="getScale" scoped="" ref="0x10be06020"/>
        <function-ref name="reset" scoped="" ref="0x10be0ae08"/>
        <function-ref name="overflow" scoped="" ref="0x10be0a980"/>
        <function-ref name="isOn" scoped="" ref="0x10be070f8"/>
        <function-ref name="set" scoped="" ref="0x10be0a4a8"/>
        <function-ref name="start" scoped="" ref="0x10be08310"/>
        <function-ref name="stop" scoped="" ref="0x10be08798"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x10be28020" loc="63:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x10be28020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x10be28370"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x10be284f8"/>
        <function-ref name="getControlA" scoped="" ref="0x10be28680"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x10be28808"/>
        <function-ref name="setControlB" scoped="" ref="0x10be28990"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x10be28b18"/>
        <function-ref name="getControlB" scoped="" ref="0x10be28ca0"/>
        <function-ref name="setControlA" scoped="" ref="0x10be28e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x10be24578" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x10be24578"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x10be248c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x10be24c78" loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x10be24c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x10be22020"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x10be221a8"/>
        <function-ref name="controlABusy" scoped="" ref="0x10be22330"/>
        <function-ref name="controlBBusy" scoped="" ref="0x10be224b8"/>
        <function-ref name="countBusy" scoped="" ref="0x10be22640"/>
        <function-ref name="compareABusy" scoped="" ref="0x10be227c8"/>
        <function-ref name="getAssr" scoped="" ref="0x10be22950"/>
        <function-ref name="setAssr" scoped="" ref="0x10be22ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x10be27340" loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x10be27340"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x10be25c20"/>
        <function-ref name="fired" scoped="" ref="0x10be26980"/>
        <function-ref name="get" scoped="" ref="0x10be26020"/>
        <function-ref name="reset" scoped="" ref="0x10be26e08"/>
        <function-ref name="isOn" scoped="" ref="0x10be240f8"/>
        <function-ref name="set" scoped="" ref="0x10be264a8"/>
        <function-ref name="start" scoped="" ref="0x10be25310"/>
        <function-ref name="stop" scoped="" ref="0x10be25798"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x10bdfc020" loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x10bdfc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x10be2a0f8"/>
        <function-ref name="test" scoped="" ref="0x10be2b7a8"/>
        <function-ref name="get" scoped="" ref="0x10bdfcba0"/>
        <function-ref name="setScale" scoped="" ref="0x10be2a580"/>
        <function-ref name="getScale" scoped="" ref="0x10be2aa58"/>
        <function-ref name="reset" scoped="" ref="0x10be2c9e8"/>
        <function-ref name="overflow" scoped="" ref="0x10be2c560"/>
        <function-ref name="isOn" scoped="" ref="0x10be2bc30"/>
        <function-ref name="set" scoped="" ref="0x10be2c088"/>
        <function-ref name="start" scoped="" ref="0x10be2ce70"/>
        <function-ref name="stop" scoped="" ref="0x10be2b320"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x10bec6cf0" loc="63:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x10bec6cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10bec50a0"/>
        <function-ref name="runTask" scoped="" ref="0x10bec5228"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x10be96c70" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x10be96c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10bec6410"/>
        <function-ref name="fired" scoped="" ref="0x10be944a8"/>
        <function-ref name="startAt" scoped="" ref="0x10be94db8"/>
        <function-ref name="isRunning" scoped="" ref="0x10be94930"/>
        <function-ref name="getAlarm" scoped="" ref="0x10bec6898"/>
        <function-ref name="start" scoped="" ref="0x10be959f0"/>
        <function-ref name="stop" scoped="" ref="0x10be94020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x10be9bab0" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x10be9bab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10be98d60"/>
        <function-ref name="fired" scoped="" ref="0x10be99470"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x10be981c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x10be99d10"/>
        <function-ref name="getdt" scoped="" ref="0x10be96648"/>
        <function-ref name="gett0" scoped="" ref="0x10be961f8"/>
        <function-ref name="isRunning" scoped="" ref="0x10be998c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x10be9a620"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x10be98790"/>
        <function-ref name="startOneShot" scoped="" ref="0x10be9aac0"/>
        <function-ref name="stop" scoped="" ref="0x10be99020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x10bf17930" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x10bf17930"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10bf17c80"/>
        <function-ref name="runTask" scoped="" ref="0x10bf17e08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x10bee6858" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x10bee6858"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10bee2bc0"/>
        <function-ref name="fired" scoped="" ref="0x10bee41c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x10bee2020"/>
        <function-ref name="isOneShot" scoped="" ref="0x10bee4a60"/>
        <function-ref name="getdt" scoped="" ref="0x10bf174d8"/>
        <function-ref name="gett0" scoped="" ref="0x10bf17088"/>
        <function-ref name="isRunning" scoped="" ref="0x10bee4610"/>
        <function-ref name="startPeriodic" scoped="" ref="0x10bee53d8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x10bee25f0"/>
        <function-ref name="startOneShot" scoped="" ref="0x10bee5878"/>
        <function-ref name="stop" scoped="" ref="0x10bee5d18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x10beec5e0" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x10beec5e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10bee8988"/>
        <function-ref name="fired" scoped="" ref="0x10beea020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x10beead70"/>
        <function-ref name="isOneShot" scoped="" ref="0x10beea900"/>
        <function-ref name="getdt" scoped="" ref="0x10bee62d8"/>
        <function-ref name="gett0" scoped="" ref="0x10bee8df8"/>
        <function-ref name="isRunning" scoped="" ref="0x10beea490"/>
        <function-ref name="startPeriodic" scoped="" ref="0x10beeb198"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x10bee8398"/>
        <function-ref name="startOneShot" scoped="" ref="0x10beeb658"/>
        <function-ref name="stop" scoped="" ref="0x10beebb18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x10bf13128" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x10bf13128"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10bf13ca8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x10bf0a330" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x10bf0a330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10bf090c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10bf099d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10bf09548"/>
        <function-ref name="overflow" scoped="" ref="0x10bf09e58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x10befd020" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/system/TimerMilliC.nc">
      <component-ref qname="BaseAppC.Timer1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x10befd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10bf2f2b8"/>
        <function-ref name="fired" scoped="" ref="0x10bf31978"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x10bf306c8"/>
        <function-ref name="isOneShot" scoped="" ref="0x10bf30278"/>
        <function-ref name="getdt" scoped="" ref="0x10bf2fb58"/>
        <function-ref name="gett0" scoped="" ref="0x10bf2f708"/>
        <function-ref name="isRunning" scoped="" ref="0x10bf31dc8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x10befdb68"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x10bf30c98"/>
        <function-ref name="startOneShot" scoped="" ref="0x10bf31088"/>
        <function-ref name="stop" scoped="" ref="0x10bf31528"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x10bf2d550" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/system/TimerMilliC.nc">
      <component-ref qname="BaseAppC.Timer2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x10bf2d550"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10bf29768"/>
        <function-ref name="fired" scoped="" ref="0x10bf2be50"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x10bf2ab78"/>
        <function-ref name="isOneShot" scoped="" ref="0x10bf2a728"/>
        <function-ref name="getdt" scoped="" ref="0x10bf28088"/>
        <function-ref name="gett0" scoped="" ref="0x10bf29bb8"/>
        <function-ref name="isRunning" scoped="" ref="0x10bf2a2d8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x10bf2b0c0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x10bf29198"/>
        <function-ref name="startOneShot" scoped="" ref="0x10bf2b560"/>
        <function-ref name="stop" scoped="" ref="0x10bf2ba00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x10c84a8d8" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMSenderC.nc">
      <component-ref qname="BaseAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x10c84a8d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c84ac28"/>
        <function-ref name="getPayload" scoped="" ref="0x10c84adb0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c849020"/>
        <function-ref name="cancel" scoped="" ref="0x10c8491a8"/>
        <function-ref name="sendDone" scoped="" ref="0x10c849330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x10c849578" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMSenderC.nc">
      <component-ref qname="BaseAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x10c849578"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c8498c8"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c849a50"/>
        <function-ref name="getPayload" scoped="" ref="0x10c849bd8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c849d60"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c848020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x10c848268" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMSenderC.nc">
      <component-ref qname="BaseAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x10c848268"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x10c8485b8"/>
        <function-ref name="source" scoped="" ref="0x10c848740"/>
        <function-ref name="address" scoped="" ref="0x10c8488c8"/>
        <function-ref name="destination" scoped="" ref="0x10c848a50"/>
        <function-ref name="setSource" scoped="" ref="0x10c848bd8"/>
        <function-ref name="setDestination" scoped="" ref="0x10c848d60"/>
        <function-ref name="type" scoped="" ref="0x10c847020"/>
        <function-ref name="setType" scoped="" ref="0x10c8471a8"/>
        <function-ref name="isForMe" scoped="" ref="0x10c847330"/>
        <function-ref name="setGroup" scoped="" ref="0x10c8474b8"/>
        <function-ref name="localGroup" scoped="" ref="0x10c847640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x10c8478c8" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMSenderC.nc">
      <component-ref qname="BaseAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x10c8478c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x10c847c18"/>
        <function-ref name="noAck" scoped="" ref="0x10c847da0"/>
        <function-ref name="wasAcked" scoped="" ref="0x10c846020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x10cd231a8" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/system/DirectAMSenderC.nc">
      <component-ref qname="BaseAppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x10cd231a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10cd234f8"/>
        <function-ref name="getPayload" scoped="" ref="0x10cd23680"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10cd23808"/>
        <function-ref name="cancel" scoped="" ref="0x10cd23990"/>
        <function-ref name="sendDone" scoped="" ref="0x10cd23b18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x10cd23d60" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/system/DirectAMSenderC.nc">
      <component-ref qname="BaseAppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x10cd23d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10cd220d8"/>
        <function-ref name="payloadLength" scoped="" ref="0x10cd22260"/>
        <function-ref name="getPayload" scoped="" ref="0x10cd223e8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10cd22570"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10cd226f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x10cd22940" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/system/DirectAMSenderC.nc">
      <component-ref qname="BaseAppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x10cd22940"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x10cd22c90"/>
        <function-ref name="source" scoped="" ref="0x10cd22e18"/>
        <function-ref name="address" scoped="" ref="0x10cd21020"/>
        <function-ref name="destination" scoped="" ref="0x10cd211a8"/>
        <function-ref name="setSource" scoped="" ref="0x10cd21330"/>
        <function-ref name="setDestination" scoped="" ref="0x10cd214b8"/>
        <function-ref name="type" scoped="" ref="0x10cd21640"/>
        <function-ref name="setType" scoped="" ref="0x10cd217c8"/>
        <function-ref name="isForMe" scoped="" ref="0x10cd21950"/>
        <function-ref name="setGroup" scoped="" ref="0x10cd21ad8"/>
        <function-ref name="localGroup" scoped="" ref="0x10cd21c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x10cd20020" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/system/DirectAMSenderC.nc">
      <component-ref qname="BaseAppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x10cd20020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x10cd20370"/>
        <function-ref name="noAck" scoped="" ref="0x10cd204f8"/>
        <function-ref name="wasAcked" scoped="" ref="0x10cd20680"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x10cd17378" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueEntryP.nc">
      <component-ref qname="BaseAppC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x10cd17378"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10cd176c8"/>
        <function-ref name="getPayload" scoped="" ref="0x10cd17850"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10cd179d8"/>
        <function-ref name="cancel" scoped="" ref="0x10cd17b60"/>
        <function-ref name="sendDone" scoped="" ref="0x10cd17ce8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x10cd16020" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueEntryP.nc">
      <component-ref qname="BaseAppC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x10cd16020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10cd16370"/>
        <function-ref name="getPayload" scoped="" ref="0x10cd164f8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10cd16680"/>
        <function-ref name="cancel" scoped="" ref="0x10cd16808"/>
        <function-ref name="sendDone" scoped="" ref="0x10cd16990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x10cd16bd8" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueEntryP.nc">
      <component-ref qname="BaseAppC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x10cd16bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x10cd15020"/>
        <function-ref name="source" scoped="" ref="0x10cd151a8"/>
        <function-ref name="address" scoped="" ref="0x10cd15330"/>
        <function-ref name="destination" scoped="" ref="0x10cd154b8"/>
        <function-ref name="setSource" scoped="" ref="0x10cd15640"/>
        <function-ref name="setDestination" scoped="" ref="0x10cd157c8"/>
        <function-ref name="type" scoped="" ref="0x10cd15950"/>
        <function-ref name="setType" scoped="" ref="0x10cd15ad8"/>
        <function-ref name="isForMe" scoped="" ref="0x10cd15c60"/>
        <function-ref name="setGroup" scoped="" ref="0x10cd15de8"/>
        <function-ref name="localGroup" scoped="" ref="0x10cd14020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x10bf464f8" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x10bf464f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10bf46848"/>
        <function-ref name="getPayload" scoped="" ref="0x10bf469d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bf46b58"/>
        <function-ref name="cancel" scoped="" ref="0x10bf46ce0"/>
        <function-ref name="sendDone" scoped="" ref="0x10bf46e68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x10bf42ac0" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x10bf42ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10bf42e30"/>
        <function-ref name="getPayload" scoped="" ref="0x10bf41020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bf411a8"/>
        <function-ref name="cancel" scoped="" ref="0x10bf41330"/>
        <function-ref name="sendDone" scoped="" ref="0x10bf414b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x10bf43d20" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x10bf43d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10bf420d8"/>
        <function-ref name="getPayload" scoped="" ref="0x10bf42260"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bf423e8"/>
        <function-ref name="cancel" scoped="" ref="0x10bf42570"/>
        <function-ref name="sendDone" scoped="" ref="0x10bf426f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x10bf40d20" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x10bf40d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10bf3f0a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x10bf3f228"/>
        <function-ref name="getPayload" scoped="" ref="0x10bf3f3b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bf3f538"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10bf3f6c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x10bf3f988" loc="161:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0x10bf3f988"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10bf3fcd8"/>
        <function-ref name="runTask" scoped="" ref="0x10bf3fe60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x10bf3e160" loc="118:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0x10bf3e160"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10bf3e4b0"/>
        <function-ref name="runTask" scoped="" ref="0x10bf3e638"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x10bf41700" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x10bf41700"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x10bf41a50"/>
        <function-ref name="source" scoped="" ref="0x10bf41bd8"/>
        <function-ref name="address" scoped="" ref="0x10bf41d60"/>
        <function-ref name="destination" scoped="" ref="0x10bf40020"/>
        <function-ref name="setSource" scoped="" ref="0x10bf401a8"/>
        <function-ref name="setDestination" scoped="" ref="0x10bf40330"/>
        <function-ref name="type" scoped="" ref="0x10bf404b8"/>
        <function-ref name="setType" scoped="" ref="0x10bf40640"/>
        <function-ref name="isForMe" scoped="" ref="0x10bf407c8"/>
        <function-ref name="setGroup" scoped="" ref="0x10bf40950"/>
        <function-ref name="localGroup" scoped="" ref="0x10bf40ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x10bf3a1a0" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x10bf3a1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x10bf3a4f0"/>
        <function-ref name="stopDone" scoped="" ref="0x10bf3a678"/>
        <function-ref name="start" scoped="" ref="0x10bf3a800"/>
        <function-ref name="stop" scoped="" ref="0x10bf3a988"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x10bf4e378" loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x10bf4e378"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x10bf837d8"/>
        <function-ref name="clear" scoped="" ref="0x10bf82020"/>
        <function-ref name="isValid" scoped="" ref="0x10bf830f8"/>
        <function-ref name="set" scoped="" ref="0x10bf82700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x10bf35420" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x10bf35420"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x10bf35770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x10bf391c8" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x10bf391c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10bf39518"/>
        <function-ref name="getPayload" scoped="" ref="0x10bf396a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bf39828"/>
        <function-ref name="cancel" scoped="" ref="0x10bf399b0"/>
        <function-ref name="sendDone" scoped="" ref="0x10bf39b38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x10bf37e48" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x10bf37e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10bf361c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x10bf359f8" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x10bf359f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10bf35d48"/>
        <function-ref name="payloadLength" scoped="" ref="0x10bf34020"/>
        <function-ref name="getPayload" scoped="" ref="0x10bf341a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bf34330"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10bf344b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x10bf5e450" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x10bf5e450"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x10bf5e7a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x10bf5e928"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x10bf5eab0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x10bf5ec38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x10bf37300" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x10bf37300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10bf37650"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x10bf67e00" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10bf67e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x10bf661a8"/>
        <function-ref name="noAck" scoped="" ref="0x10bf66330"/>
        <function-ref name="wasAcked" scoped="" ref="0x10bf664b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x10bf57418" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x10bf57418"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x10bf57768"/>
        <function-ref name="setRetries" scoped="" ref="0x10bf578f0"/>
        <function-ref name="getRetries" scoped="" ref="0x10bf57a78"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x10bf57c00"/>
        <function-ref name="wasDelivered" scoped="" ref="0x10bf57d88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x10bf34758" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x10bf34758"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x10bf34aa8"/>
        <function-ref name="source" scoped="" ref="0x10bf34c30"/>
        <function-ref name="address" scoped="" ref="0x10bf34db8"/>
        <function-ref name="destination" scoped="" ref="0x10bf67020"/>
        <function-ref name="setSource" scoped="" ref="0x10bf671a8"/>
        <function-ref name="setDestination" scoped="" ref="0x10bf67330"/>
        <function-ref name="type" scoped="" ref="0x10bf674b8"/>
        <function-ref name="setType" scoped="" ref="0x10bf67640"/>
        <function-ref name="isForMe" scoped="" ref="0x10bf677c8"/>
        <function-ref name="setGroup" scoped="" ref="0x10bf67950"/>
        <function-ref name="localGroup" scoped="" ref="0x10bf67ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMicro" ref="0x10bf5f378" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMicro" scoped="" ref="0x10bf5f378"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TMicro" ref="0x10b4ad778"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x10bf507d8"/>
        <function-ref name="clear" scoped="" ref="0x10bf4f020"/>
        <function-ref name="isValid" scoped="" ref="0x10bf500f8"/>
        <function-ref name="set" scoped="" ref="0x10bf4f700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x10bf818e0" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x10bf818e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x10bf81c30"/>
        <function-ref name="stopDone" scoped="" ref="0x10bf81db8"/>
        <function-ref name="start" scoped="" ref="0x10bf7e020"/>
        <function-ref name="stop" scoped="" ref="0x10bf7e1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x10bf6b020" loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x10bf6b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10bf6a608"/>
        <function-ref name="get" scoped="" ref="0x10bf6a0f8"/>
        <function-ref name="isSet" scoped="" ref="0x10bf6bba0"/>
        <function-ref name="set" scoped="" ref="0x10bf6ab18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x10bf7a1c8" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x10bf7a1c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x10bf7a518"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x10bf7a7a0" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x10bf7a7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10bf7aaf0"/>
        <function-ref name="payloadLength" scoped="" ref="0x10bf7ac78"/>
        <function-ref name="getPayload" scoped="" ref="0x10bf7ae00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bf79020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10bf791a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x10bf7e920" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x10bf7e920"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10bf7ec70"/>
        <function-ref name="getPayload" scoped="" ref="0x10bf7edf8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bf7d020"/>
        <function-ref name="cancel" scoped="" ref="0x10bf7d1a8"/>
        <function-ref name="sendDone" scoped="" ref="0x10bf7d330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x10bf7b628" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x10bf7b628"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10bf7b978"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x10bf70b78" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x10bf70b78"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10bf6d270"/>
        <function-ref name="get" scoped="" ref="0x10bf6ed30"/>
        <function-ref name="isSet" scoped="" ref="0x10bf6e820"/>
        <function-ref name="set" scoped="" ref="0x10bf6d780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x10bf774a0" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x10bf774a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x10bf777f0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x10bf77978"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x10bf77b00"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x10bf77c88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x10bf7dab0" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x10bf7dab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10bf7de00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x10bf9f848" loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x10bf9f848"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TRadio" ref="0x10b77a140"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x10bf9ecc0"/>
        <function-ref name="clear" scoped="" ref="0x10bf9d420"/>
        <function-ref name="isValid" scoped="" ref="0x10bf9e5e0"/>
        <function-ref name="set" scoped="" ref="0x10bf9db00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x10bfa0358" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x10bfa0358"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TRadio" ref="0x10b77a140"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10bf9f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x10bf756a0" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x10bf756a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10bf74dc8"/>
        <function-ref name="get" scoped="" ref="0x10bf748b8"/>
        <function-ref name="isSet" scoped="" ref="0x10bf743a8"/>
        <function-ref name="set" scoped="" ref="0x10bf70328"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x10bf78af0" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10bf78af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x10bf78e40"/>
        <function-ref name="noAck" scoped="" ref="0x10bf77020"/>
        <function-ref name="wasAcked" scoped="" ref="0x10bf771a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x10bf76020" loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x10bf76020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x10bf76370"/>
        <function-ref name="setRetries" scoped="" ref="0x10bf764f8"/>
        <function-ref name="getRetries" scoped="" ref="0x10bf76680"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x10bf76808"/>
        <function-ref name="wasDelivered" scoped="" ref="0x10bf76990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x10bf79448" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x10bf79448"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x10bf79798"/>
        <function-ref name="source" scoped="" ref="0x10bf79920"/>
        <function-ref name="address" scoped="" ref="0x10bf79aa8"/>
        <function-ref name="destination" scoped="" ref="0x10bf79c30"/>
        <function-ref name="setSource" scoped="" ref="0x10bf79db8"/>
        <function-ref name="setDestination" scoped="" ref="0x10bf78020"/>
        <function-ref name="type" scoped="" ref="0x10bf781a8"/>
        <function-ref name="setType" scoped="" ref="0x10bf78330"/>
        <function-ref name="isForMe" scoped="" ref="0x10bf784b8"/>
        <function-ref name="setGroup" scoped="" ref="0x10bf78640"/>
        <function-ref name="localGroup" scoped="" ref="0x10bf787c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x10bf71af0" loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x10bf71af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x10bf71e40"/>
        <function-ref name="setChannel" scoped="" ref="0x10bf75020"/>
        <function-ref name="getChannel" scoped="" ref="0x10bf751a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x10bf9b758" loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230ActiveMessageC.nc">
      <component-ref qname="RF230ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x10bf9b758"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x10bf9ac58"/>
        <function-ref name="clear" scoped="" ref="0x10bf99380"/>
        <function-ref name="isValid" scoped="" ref="0x10bf9a578"/>
        <function-ref name="set" scoped="" ref="0x10bf99a60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x10bf97af8" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x10bf97af8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x10bf97e48"/>
        <function-ref name="stopDone" scoped="" ref="0x10bf94020"/>
        <function-ref name="start" scoped="" ref="0x10bf941a8"/>
        <function-ref name="stop" scoped="" ref="0x10bf94330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x10bfa4348" loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x10bfa4348"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10bfa3a40"/>
        <function-ref name="get" scoped="" ref="0x10bfa3530"/>
        <function-ref name="isSet" scoped="" ref="0x10bfa3020"/>
        <function-ref name="set" scoped="" ref="0x10bfa1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Notifier" ref="0x10bf8dbf8" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Notifier" scoped="" ref="0x10bf8dbf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x10bf8c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendResource" ref="0x10bfb7b58" loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendResource" scoped="" ref="0x10bfb7b58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x10bfbc020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x10bfbc1a8"/>
        <function-ref name="request" scoped="" ref="0x10bfbc330"/>
        <function-ref name="granted" scoped="" ref="0x10bfbc4b8"/>
        <function-ref name="isOwner" scoped="" ref="0x10bfbc640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x10bf91348" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x10bf91348"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x10bf91698"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x10bf94aa8" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x10bf94aa8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10bf94df8"/>
        <function-ref name="getPayload" scoped="" ref="0x10bf93020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bf931a8"/>
        <function-ref name="cancel" scoped="" ref="0x10bf93330"/>
        <function-ref name="sendDone" scoped="" ref="0x10bf934b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x10bf92818" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x10bf92818"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10bf92b68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x10bfae9c0" loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x10bfae9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x10bfaed10"/>
        <function-ref name="address" scoped="" ref="0x10bfbb020"/>
        <function-ref name="destination" scoped="" ref="0x10bfbb1a8"/>
        <function-ref name="setSource" scoped="" ref="0x10bfbb330"/>
        <function-ref name="setDestination" scoped="" ref="0x10bfbb4b8"/>
        <function-ref name="pan" scoped="" ref="0x10bfbb640"/>
        <function-ref name="setPan" scoped="" ref="0x10bfbb7c8"/>
        <function-ref name="isForMe" scoped="" ref="0x10bfbb950"/>
        <function-ref name="localPan" scoped="" ref="0x10bfbbad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketForIeee154Message" ref="0x10bfb6020" loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketForIeee154Message" scoped="" ref="0x10bfb6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10bfb6470"/>
        <function-ref name="payloadLength" scoped="" ref="0x10bfb65f8"/>
        <function-ref name="getPayload" scoped="" ref="0x10bfb6780"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bfb6908"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10bfb6a90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x10bfad778" loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x10bfad778"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x10bfadac8"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x10bfadc50"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x10bfaddd8"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x10bfac020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x10bfa7020" loc="63:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x10bfa7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10bfa6608"/>
        <function-ref name="get" scoped="" ref="0x10bfa60f8"/>
        <function-ref name="isSet" scoped="" ref="0x10bfa7ba0"/>
        <function-ref name="set" scoped="" ref="0x10bfa6b18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x10bf93c38" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x10bf93c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10bf92020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketForActiveMessage" ref="0x10bf8e060" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketForActiveMessage" scoped="" ref="0x10bf8e060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10bf8e3b0"/>
        <function-ref name="payloadLength" scoped="" ref="0x10bf8e538"/>
        <function-ref name="getPayload" scoped="" ref="0x10bf8e6c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bf8e848"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10bf8e9d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x10bfd8c38" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x10bfd8c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TRadio" ref="0x10b77a140"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x10bfd50f8"/>
        <function-ref name="clear" scoped="" ref="0x10bfd57d8"/>
        <function-ref name="isValid" scoped="" ref="0x10bfd79f0"/>
        <function-ref name="set" scoped="" ref="0x10bfd4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x10bfa1828" loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x10bfa1828"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TRadio" ref="0x10b77a140"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10bfd8410"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x10bfabb78" loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x10bfabb78"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10bfa8190"/>
        <function-ref name="get" scoped="" ref="0x10bfaac38"/>
        <function-ref name="isSet" scoped="" ref="0x10bfaa728"/>
        <function-ref name="set" scoped="" ref="0x10bfa86a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x10bfb6db8" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10bfb6db8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x10bfad170"/>
        <function-ref name="noAck" scoped="" ref="0x10bfad2f8"/>
        <function-ref name="wasAcked" scoped="" ref="0x10bfad480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x10bf856d0" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x10bf856d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10bf85a20"/>
        <function-ref name="getPayload" scoped="" ref="0x10bf85ba8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bf85d30"/>
        <function-ref name="cancel" scoped="" ref="0x10bf8d020"/>
        <function-ref name="sendDone" scoped="" ref="0x10bf8d1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x10bfac2d0" loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x10bfac2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x10bfac620"/>
        <function-ref name="setRetries" scoped="" ref="0x10bfac7a8"/>
        <function-ref name="getRetries" scoped="" ref="0x10bfac930"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x10bfacab8"/>
        <function-ref name="wasDelivered" scoped="" ref="0x10bfacc40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x10bf91938" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x10bf91938"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x10bf91c88"/>
        <function-ref name="source" scoped="" ref="0x10bf91e10"/>
        <function-ref name="address" scoped="" ref="0x10bf8f020"/>
        <function-ref name="destination" scoped="" ref="0x10bf8f1a8"/>
        <function-ref name="setSource" scoped="" ref="0x10bf8f330"/>
        <function-ref name="setDestination" scoped="" ref="0x10bf8f4b8"/>
        <function-ref name="type" scoped="" ref="0x10bf8f640"/>
        <function-ref name="setType" scoped="" ref="0x10bf8f7c8"/>
        <function-ref name="isForMe" scoped="" ref="0x10bf8f950"/>
        <function-ref name="setGroup" scoped="" ref="0x10bf8fad8"/>
        <function-ref name="localGroup" scoped="" ref="0x10bf8fc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x10bf8d508" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x10bf8d508"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10bf8d858"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x10bfab020" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x10bfab020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x10bfab370"/>
        <function-ref name="setChannel" scoped="" ref="0x10bfab4f8"/>
        <function-ref name="getChannel" scoped="" ref="0x10bfab680"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x10bfd4bf0" loc="68:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioC.nc">
      <component-ref qname="RF230RadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x10bfd4bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x10bfd1088"/>
        <function-ref name="clear" scoped="" ref="0x10bfd1768"/>
        <function-ref name="isValid" scoped="" ref="0x10bfd3970"/>
        <function-ref name="set" scoped="" ref="0x10bfd1e48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DummyConfig" ref="0x10bfe3c10" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="DummyConfig" scoped="" ref="0x10bfe3c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x10bfdd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TrafficMonitorConfig" ref="0x10bfef020" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TrafficMonitorConfig" scoped="" ref="0x10bfef020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getReceiveAverage" scoped="" ref="0x10bfefe28"/>
        <function-ref name="channelError" scoped="" ref="0x10bfef4f8"/>
        <function-ref name="getUpdatePeriod" scoped="" ref="0x10bfef680"/>
        <function-ref name="getChannelTime" scoped="" ref="0x10bfef808"/>
        <function-ref name="getErrorAverage" scoped="" ref="0x10bfef990"/>
        <function-ref name="getTransmitAverage" scoped="" ref="0x10bfefb18"/>
        <function-ref name="getSender" scoped="" ref="0x10bfefca0"/>
        <function-ref name="getNeighborAverage" scoped="" ref="0x10bfef370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageConfig" ref="0x10c00f130" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageConfig" scoped="" ref="0x10c00f130"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x10c00f480"/>
        <function-ref name="checkFrame" scoped="" ref="0x10c00f608"/>
        <function-ref name="source" scoped="" ref="0x10c00f790"/>
        <function-ref name="destination" scoped="" ref="0x10c00f918"/>
        <function-ref name="setSource" scoped="" ref="0x10c00faa0"/>
        <function-ref name="setDestination" scoped="" ref="0x10c00fc28"/>
        <function-ref name="setGroup" scoped="" ref="0x10c00fdb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SlottedCollisionConfig" ref="0x10bfde130" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SlottedCollisionConfig" scoped="" ref="0x10bfde130"/></type-interface>
      <instance>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getInitialDelay" scoped="" ref="0x10bfde480"/>
        <function-ref name="getScheduleExponent" scoped="" ref="0x10bfde608"/>
        <function-ref name="getCollisionWindowLength" scoped="" ref="0x10bfde790"/>
        <function-ref name="getTransmitTime" scoped="" ref="0x10bfde918"/>
        <function-ref name="getCollisionWindowStart" scoped="" ref="0x10bfdeaa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x10c02b6f8" loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x10c02b6f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x10c02ba48"/>
        <function-ref name="wait" scoped="" ref="0x10c02bbd0"/>
        <function-ref name="cancel" scoped="" ref="0x10c02bd58"/>
        <function-ref name="isFree" scoped="" ref="0x10bff6020"/>
        <function-ref name="getNow" scoped="" ref="0x10bff61a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RF230Packet" ref="0x10c025918" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RF230Packet" scoped="" ref="0x10c025918"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c025c68"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c025df0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bff5020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10bff51a8"/>
        <function-ref name="headerLength" scoped="" ref="0x10bff5330"/>
        <function-ref name="metadataLength" scoped="" ref="0x10bff54b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x10bff5a40" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x10bff5a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TRadio" ref="0x10b77a140"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x10c023020"/>
        <function-ref name="clear" scoped="" ref="0x10c023700"/>
        <function-ref name="isValid" scoped="" ref="0x10c02a8f8"/>
        <function-ref name="set" scoped="" ref="0x10c023de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RF230DriverConfig" ref="0x10bfc6428" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RF230DriverConfig" scoped="" ref="0x10bfc6428"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10bfc6778"/>
        <function-ref name="headerLength" scoped="" ref="0x10bfc6900"/>
        <function-ref name="metadataLength" scoped="" ref="0x10bfc6a88"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x10bfc6c10"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x10bfc6d98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaConfig" ref="0x10bfc5d20" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaConfig" scoped="" ref="0x10bfc5d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="requiresSoftwareCCA" scoped="" ref="0x10bff40a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareAckConfig" ref="0x10bfbd0f0" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareAckConfig" scoped="" ref="0x10bfbd0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0x10bfbd440"/>
        <function-ref name="createAckPacket" scoped="" ref="0x10bfbd5c8"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x10bfbd750"/>
        <function-ref name="isAckPacket" scoped="" ref="0x10bfbd8d8"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0x10bfbda60"/>
        <function-ref name="getAckTimeout" scoped="" ref="0x10bfbdbe8"/>
        <function-ref name="setAckRequired" scoped="" ref="0x10bfbdd70"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x10bfca020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154PacketLayer" ref="0x10bff70d0" loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x10bff70d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x10bff7420"/>
        <function-ref name="getFramePending" scoped="" ref="0x10c00d7c8"/>
        <function-ref name="setFCF" scoped="" ref="0x10bff7730"/>
        <function-ref name="isAckFrame" scoped="" ref="0x10bff78b8"/>
        <function-ref name="getDSN" scoped="" ref="0x10bff7a40"/>
        <function-ref name="createDataFrame" scoped="" ref="0x10bff7bc8"/>
        <function-ref name="setDSN" scoped="" ref="0x10bff7d50"/>
        <function-ref name="createAckReply" scoped="" ref="0x10c00e020"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x10c00e1a8"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x10c00e330"/>
        <function-ref name="isDataFrame" scoped="" ref="0x10c00e4b8"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x10c00e640"/>
        <function-ref name="getAckRequired" scoped="" ref="0x10c00e7c8"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x10c00ea50"/>
        <function-ref name="createAckFrame" scoped="" ref="0x10c00ebd8"/>
        <function-ref name="setFramePending" scoped="" ref="0x10c00ed60"/>
        <function-ref name="setDestAddr" scoped="" ref="0x10c00d020"/>
        <function-ref name="setDestPan" scoped="" ref="0x10c00d1a8"/>
        <function-ref name="setAckRequired" scoped="" ref="0x10c00d330"/>
        <function-ref name="getFCF" scoped="" ref="0x10c00d4b8"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x10bff75a8"/>
        <function-ref name="getDestAddr" scoped="" ref="0x10c00d640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UniqueConfig" ref="0x10bff0338" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UniqueConfig" scoped="" ref="0x10bff0338"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x10bff0688"/>
        <function-ref name="reportChannelError" scoped="" ref="0x10bff0810"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x10bff0998"/>
        <function-ref name="getSender" scoped="" ref="0x10bff0b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RandomCollisionConfig" ref="0x10bfe4e40" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230RadioP.nc">
      <component-ref qname="RF230RadioP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RandomCollisionConfig" scoped="" ref="0x10bfe4e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x10bfe81c0"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x10bfe8348"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x10bfe84d0"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x10bfe8658"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioAlarm" ref="0x10c075698" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarmC.nc">
      <component-ref qname="RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x10c075698"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x10c0759e8"/>
        <function-ref name="wait" scoped="" ref="0x10c075b70"/>
        <function-ref name="cancel" scoped="" ref="0x10c075cf8"/>
        <function-ref name="isFree" scoped="" ref="0x10c075e80"/>
        <function-ref name="getNow" scoped="" ref="0x10c074030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x10c074a28" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarmC.nc">
      <component-ref qname="RadioAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x10c074a28"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x10b414570"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x10b414570"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TRadio" ref="0x10b77a140"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10c070088"/>
        <function-ref name="fired" scoped="" ref="0x10c071130"/>
        <function-ref name="startAt" scoped="" ref="0x10c071a40"/>
        <function-ref name="isRunning" scoped="" ref="0x10c0715b8"/>
        <function-ref name="getAlarm" scoped="" ref="0x10c070510"/>
        <function-ref name="start" scoped="" ref="0x10c0727a8"/>
        <function-ref name="stop" scoped="" ref="0x10c072c80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioAlarm" ref="0x10c06b748" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarmP.nc">
      <component-ref qname="RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x10c06b748"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x10c06ba98"/>
        <function-ref name="wait" scoped="" ref="0x10c06bc20"/>
        <function-ref name="cancel" scoped="" ref="0x10c06bda8"/>
        <function-ref name="isFree" scoped="" ref="0x10c06a020"/>
        <function-ref name="getNow" scoped="" ref="0x10c06a1a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x10c06a770" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarmP.nc">
      <component-ref qname="RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x10c06a770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TRadio" ref="0x10b77a140"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10c0a2020"/>
        <function-ref name="fired" scoped="" ref="0x10c0a4020"/>
        <function-ref name="startAt" scoped="" ref="0x10c0a4930"/>
        <function-ref name="isRunning" scoped="" ref="0x10c0a44a8"/>
        <function-ref name="getAlarm" scoped="" ref="0x10c0a24a8"/>
        <function-ref name="start" scoped="" ref="0x10c069578"/>
        <function-ref name="stop" scoped="" ref="0x10c069a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x10c0a1020" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarmP.nc">
      <component-ref qname="RadioAlarmP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x10c0a1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x10c0a1370"/>
        <function-ref name="suspend" scoped="" ref="0x10c0a14f8"/>
        <function-ref name="resume" scoped="" ref="0x10c0a1680"/>
        <function-ref name="run" scoped="" ref="0x10c0a1808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Tasklet" ref="0x10c06c400" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/TaskletC.nc">
      <component-ref qname="TaskletC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x10c06c400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x10c06c750"/>
        <function-ref name="suspend" scoped="" ref="0x10c06c8d8"/>
        <function-ref name="resume" scoped="" ref="0x10c06ca60"/>
        <function-ref name="run" scoped="" ref="0x10c06cbe8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x10c0b3020" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <component-ref qname="ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x10c0b3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c0b3370"/>
        <function-ref name="cancel" scoped="" ref="0x10c0b34f8"/>
        <function-ref name="sendDone" scoped="" ref="0x10c0b3680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x10c0ad9a8" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <component-ref qname="ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x10c0ad9a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c0adcf8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x10c0b6e50" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <component-ref qname="ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x10c0b6e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x10c0b51e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x10c0ba430" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <component-ref qname="ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x10c0ba430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c0ba780"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c0ba908"/>
        <function-ref name="getPayload" scoped="" ref="0x10c0baa90"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c0bac18"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c0bada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x10c0b9570" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <component-ref qname="ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x10c0b9570"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c0b98c0"/>
        <function-ref name="getPayload" scoped="" ref="0x10c0b9a48"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c0b9bd0"/>
        <function-ref name="cancel" scoped="" ref="0x10c0b9d58"/>
        <function-ref name="sendDone" scoped="" ref="0x10c0b8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x10c0b6348" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <component-ref qname="ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x10c0b6348"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c0b6698"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x10c0b55e0" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <component-ref qname="ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x10c0b55e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c0b5930"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c0b5ab8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c0b5c40"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c0b5dc8"/>
        <function-ref name="headerLength" scoped="" ref="0x10c0b4020"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c0b41a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x10c0b2100" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <component-ref qname="ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x10c0b2100"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x10c0b2450"/>
        <function-ref name="checkFrame" scoped="" ref="0x10c0b25d8"/>
        <function-ref name="source" scoped="" ref="0x10c0b2760"/>
        <function-ref name="destination" scoped="" ref="0x10c0b28e8"/>
        <function-ref name="setSource" scoped="" ref="0x10c0b2a70"/>
        <function-ref name="setDestination" scoped="" ref="0x10c0b2bf8"/>
        <function-ref name="setGroup" scoped="" ref="0x10c0b2d80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x10c0b87a0" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <component-ref qname="ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x10c0b87a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c0b8af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x10c08ce10" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerC.nc">
      <component-ref qname="ActiveMessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x10c08ce10"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x10c0bb1a8"/>
        <function-ref name="source" scoped="" ref="0x10c0bb330"/>
        <function-ref name="address" scoped="" ref="0x10c0bb4b8"/>
        <function-ref name="destination" scoped="" ref="0x10c0bb640"/>
        <function-ref name="setSource" scoped="" ref="0x10c0bb7c8"/>
        <function-ref name="setDestination" scoped="" ref="0x10c0bb950"/>
        <function-ref name="type" scoped="" ref="0x10c0bbad8"/>
        <function-ref name="setType" scoped="" ref="0x10c0bbc60"/>
        <function-ref name="isForMe" scoped="" ref="0x10c0bbde8"/>
        <function-ref name="setGroup" scoped="" ref="0x10c0ba020"/>
        <function-ref name="localGroup" scoped="" ref="0x10c0ba1a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x10c0dfe40" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc">
      <component-ref qname="ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x10c0dfe40"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c0de1c0"/>
        <function-ref name="cancel" scoped="" ref="0x10c0de348"/>
        <function-ref name="sendDone" scoped="" ref="0x10c0de4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x10c0de830" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc">
      <component-ref qname="ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x10c0de830"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c0deb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x10c0e07d8" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc">
      <component-ref qname="ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x10c0e07d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x10c0e0b28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x10c0a9d60" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc">
      <component-ref qname="ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x10c0a9d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c0a80d8"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c0a8260"/>
        <function-ref name="getPayload" scoped="" ref="0x10c0a83e8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c0a8570"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c0a86f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x10c0ae968" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc">
      <component-ref qname="ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x10c0ae968"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c0aecb8"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c0aee40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c0aa020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c0aa1a8"/>
        <function-ref name="headerLength" scoped="" ref="0x10c0aa330"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c0aa4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x10c0a8e70" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc">
      <component-ref qname="ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x10c0a8e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c0a71e8"/>
        <function-ref name="getPayload" scoped="" ref="0x10c0a7370"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c0a74f8"/>
        <function-ref name="cancel" scoped="" ref="0x10c0a7680"/>
        <function-ref name="sendDone" scoped="" ref="0x10c0a7808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x10c0a5b68" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc">
      <component-ref qname="ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x10c0a5b68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c0e0020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x10c0df020" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc">
      <component-ref qname="ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x10c0df020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c0df370"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c0df4f8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c0df680"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c0df808"/>
        <function-ref name="headerLength" scoped="" ref="0x10c0df990"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c0dfb18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x10c0a5020" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc">
      <component-ref qname="ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x10c0a5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c0a5370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x10c0dd020" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc">
      <component-ref qname="ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x10c0dd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x10c0dd370"/>
        <function-ref name="checkFrame" scoped="" ref="0x10c0dd4f8"/>
        <function-ref name="source" scoped="" ref="0x10c0dd680"/>
        <function-ref name="destination" scoped="" ref="0x10c0dd808"/>
        <function-ref name="setSource" scoped="" ref="0x10c0dd990"/>
        <function-ref name="setDestination" scoped="" ref="0x10c0ddb18"/>
        <function-ref name="setGroup" scoped="" ref="0x10c0ddca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x10c0d7a28" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc">
      <component-ref qname="ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x10c0d7a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x10c0d7d78"/>
        <function-ref name="changed" scoped="" ref="0x10c0db020"/>
        <function-ref name="amGroup" scoped="" ref="0x10c0db1a8"/>
        <function-ref name="setAddress" scoped="" ref="0x10c0db330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x10c0aa758" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageLayerP.nc">
      <component-ref qname="ActiveMessageLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x10c0aa758"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x10c0aaaa8"/>
        <function-ref name="source" scoped="" ref="0x10c0aac30"/>
        <function-ref name="address" scoped="" ref="0x10c0aadb8"/>
        <function-ref name="destination" scoped="" ref="0x10c0a9020"/>
        <function-ref name="setSource" scoped="" ref="0x10c0a91a8"/>
        <function-ref name="setDestination" scoped="" ref="0x10c0a9330"/>
        <function-ref name="type" scoped="" ref="0x10c0a94b8"/>
        <function-ref name="setType" scoped="" ref="0x10c0a9640"/>
        <function-ref name="isForMe" scoped="" ref="0x10c0a97c8"/>
        <function-ref name="setGroup" scoped="" ref="0x10c0a9950"/>
        <function-ref name="localGroup" scoped="" ref="0x10c0a9ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x10c13b650" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x10c13b650"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x10c13b9a0"/>
        <function-ref name="changed" scoped="" ref="0x10c13bb28"/>
        <function-ref name="amGroup" scoped="" ref="0x10c13bcb0"/>
        <function-ref name="setAddress" scoped="" ref="0x10c13be38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x10c153180" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x10c153180"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c1534d0"/>
        <function-ref name="cancel" scoped="" ref="0x10c153658"/>
        <function-ref name="sendDone" scoped="" ref="0x10c1537e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x10c153a28" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x10c153a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x10c153d78"/>
        <function-ref name="immediateRequest" scoped="" ref="0x10c152020"/>
        <function-ref name="request" scoped="" ref="0x10c1521a8"/>
        <function-ref name="granted" scoped="" ref="0x10c152330"/>
        <function-ref name="isOwner" scoped="" ref="0x10c1524b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x10c124800" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/AutoResourceAcquireLayerC.nc">
      <component-ref qname="RF230RadioC.AutoResourceAcquireLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BareSend" scoped="" ref="0x10c124800"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c124b50"/>
        <function-ref name="cancel" scoped="" ref="0x10c124cd8"/>
        <function-ref name="sendDone" scoped="" ref="0x10c124e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x10c1af020" loc="76:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x10c1af020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x10c1af390"/>
        <function-ref name="immediateRequested" scoped="" ref="0x10c1af518"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x10c1ae020" loc="79:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x10c1ae020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x10c1ae390"/>
        <function-ref name="configure" scoped="" ref="0x10c1ae518"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x10c1b0200" loc="75:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x10c1b0200"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x10c1b0570"/>
        <function-ref name="immediateRequest" scoped="" ref="0x10c1b06f8"/>
        <function-ref name="request" scoped="" ref="0x10c1b0880"/>
        <function-ref name="granted" scoped="" ref="0x10c1b0a08"/>
        <function-ref name="isOwner" scoped="" ref="0x10c1b0b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x10c1af760" loc="77:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="RF230RadioC.SendResourceC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x10c1af760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x10c1afab0"/>
        <function-ref name="userId" scoped="" ref="0x10c1afc38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10cd96140" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10cd96140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10cd96490"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x10cd96718" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x10cd96718"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x10cd96a68"/>
        <function-ref name="isEmpty" scoped="" ref="0x10cd96bf0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x10cd96d78"/>
        <function-ref name="dequeue" scoped="" ref="0x10cd95020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x10cd92388" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x10cd92388"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x10cd926f8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x10cd92880"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x10cd913e8" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x10cd913e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x10cd91758"/>
        <function-ref name="configure" scoped="" ref="0x10cd918e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x10cd91b68" loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x10cd91b68"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x10cd90020"/>
        <function-ref name="isEmpty" scoped="" ref="0x10cd901a8"/>
        <function-ref name="isEnqueued" scoped="" ref="0x10cd90330"/>
        <function-ref name="dequeue" scoped="" ref="0x10cd904b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x10cd93590" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x10cd93590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x10cd93900"/>
        <function-ref name="immediateRequest" scoped="" ref="0x10cd93a88"/>
        <function-ref name="request" scoped="" ref="0x10cd93c10"/>
        <function-ref name="granted" scoped="" ref="0x10cd93d98"/>
        <function-ref name="isOwner" scoped="" ref="0x10cd92020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x10cd92ac8" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x10cd92ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x10cd92e18"/>
        <function-ref name="userId" scoped="" ref="0x10cd91020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x10cd90780" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleArbiterP.nc">
      <component-ref qname="RF230RadioC.SendResourceC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x10cd90780"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10cd90ad0"/>
        <function-ref name="runTask" scoped="" ref="0x10cd90c58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x10c1a1020" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x10c1a1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c1a1370"/>
        <function-ref name="cancel" scoped="" ref="0x10c1a14f8"/>
        <function-ref name="sendDone" scoped="" ref="0x10c1a1680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x10c1a19e0" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x10c1a19e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c1a1d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x10c1a8ca8" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendNotifier" scoped="" ref="0x10c1a8ca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x10c1a7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x10c1adba0" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x10c1adba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c1a9020"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c1a91a8"/>
        <function-ref name="getPayload" scoped="" ref="0x10c1a9330"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c1a94b8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c1a9640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154Packet" ref="0x10c1a5da8" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x10c1a5da8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x10c1a4170"/>
        <function-ref name="address" scoped="" ref="0x10c1a42f8"/>
        <function-ref name="destination" scoped="" ref="0x10c1a4480"/>
        <function-ref name="setSource" scoped="" ref="0x10c1a4608"/>
        <function-ref name="setDestination" scoped="" ref="0x10c1a4790"/>
        <function-ref name="pan" scoped="" ref="0x10c1a4918"/>
        <function-ref name="setPan" scoped="" ref="0x10c1a4aa0"/>
        <function-ref name="isForMe" scoped="" ref="0x10c1a4c28"/>
        <function-ref name="localPan" scoped="" ref="0x10c1a4db0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioPacket" ref="0x10c1a20c0" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x10c1a20c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c1a2410"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c1a2598"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c1a2720"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c1a28a8"/>
        <function-ref name="headerLength" scoped="" ref="0x10c1a2a30"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c1a2bb8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ieee154PacketLayer" ref="0x10c1a73c0" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x10c1a73c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x10c1a7710"/>
        <function-ref name="getFramePending" scoped="" ref="0x10c1a5ad8"/>
        <function-ref name="setFCF" scoped="" ref="0x10c1a7a20"/>
        <function-ref name="isAckFrame" scoped="" ref="0x10c1a7ba8"/>
        <function-ref name="getDSN" scoped="" ref="0x10c1a7d30"/>
        <function-ref name="createDataFrame" scoped="" ref="0x10c1a6020"/>
        <function-ref name="setDSN" scoped="" ref="0x10c1a61a8"/>
        <function-ref name="createAckReply" scoped="" ref="0x10c1a6330"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x10c1a64b8"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x10c1a6640"/>
        <function-ref name="isDataFrame" scoped="" ref="0x10c1a67c8"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x10c1a6950"/>
        <function-ref name="getAckRequired" scoped="" ref="0x10c1a6ad8"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x10c1a6d60"/>
        <function-ref name="createAckFrame" scoped="" ref="0x10c1a5020"/>
        <function-ref name="setFramePending" scoped="" ref="0x10c1a51a8"/>
        <function-ref name="setDestAddr" scoped="" ref="0x10c1a5330"/>
        <function-ref name="setDestPan" scoped="" ref="0x10c1a54b8"/>
        <function-ref name="setAckRequired" scoped="" ref="0x10c1a5640"/>
        <function-ref name="getFCF" scoped="" ref="0x10c1a57c8"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x10c1a7898"/>
        <function-ref name="getDestAddr" scoped="" ref="0x10c1a5950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x10c1a98f8" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x10c1a98f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c1a9c48"/>
        <function-ref name="getPayload" scoped="" ref="0x10c1a9dd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c1a8020"/>
        <function-ref name="cancel" scoped="" ref="0x10c1a81a8"/>
        <function-ref name="sendDone" scoped="" ref="0x10c1a8330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x10c1a8690" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154MessageLayerC.nc">
      <component-ref qname="Ieee154MessageLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x10c1a8690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c1a89e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x10c1f43e8" loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x10c1f43e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c1f4738"/>
        <function-ref name="cancel" scoped="" ref="0x10c1f48c0"/>
        <function-ref name="sendDone" scoped="" ref="0x10c1f4a48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x10c1f4da8" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x10c1f4da8"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c1f3170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x10c1f73a0" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x10c1f73a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c1f76f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c1f7878"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c1f7a00"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c1f7b88"/>
        <function-ref name="headerLength" scoped="" ref="0x10c1f7d10"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c1f6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosReceive" ref="0x10c1f6d48" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosReceive" scoped="" ref="0x10c1f6d48"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c1f50d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x10c1f34c8" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x10c1f34c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c1f3818"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c1f39a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c1f3b28"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c1f3cb0"/>
        <function-ref name="headerLength" scoped="" ref="0x10c1f3e38"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c1f2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosSend" ref="0x10c1f6368" loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosSend" scoped="" ref="0x10c1f6368"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c1f66b8"/>
        <function-ref name="cancel" scoped="" ref="0x10c1f6840"/>
        <function-ref name="sendDone" scoped="" ref="0x10c1f69c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Send" ref="0x10c1f81c8" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Send" scoped="" ref="0x10c1f81c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c1f8518"/>
        <function-ref name="cancel" scoped="" ref="0x10c1f86a0"/>
        <function-ref name="sendDone" scoped="" ref="0x10c1f8828"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Receive" ref="0x10c1f8bb0" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Receive" scoped="" ref="0x10c1f8bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c1f7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TinyosPacket" ref="0x10c1f5450" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TinyosNetworkLayerC.nc">
      <component-ref qname="TinyosNetworkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TinyosPacket" scoped="" ref="0x10c1f5450"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c1f57a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c1f5928"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c1f5ab0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c1f5c38"/>
        <function-ref name="headerLength" scoped="" ref="0x10c1f5dc0"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c1f4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x10c207da8" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x10c207da8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x10c206170"/>
        <function-ref name="address" scoped="" ref="0x10c2062f8"/>
        <function-ref name="destination" scoped="" ref="0x10c206480"/>
        <function-ref name="setSource" scoped="" ref="0x10c206608"/>
        <function-ref name="setDestination" scoped="" ref="0x10c206790"/>
        <function-ref name="pan" scoped="" ref="0x10c206918"/>
        <function-ref name="setPan" scoped="" ref="0x10c206aa0"/>
        <function-ref name="isForMe" scoped="" ref="0x10c206c28"/>
        <function-ref name="localPan" scoped="" ref="0x10c206db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x10c2050c0" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x10c2050c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c205410"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c205598"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c205720"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c2058a8"/>
        <function-ref name="headerLength" scoped="" ref="0x10c205a30"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c205bb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154PacketLayer" ref="0x10c20b418" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x10c20b418"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x10c20b768"/>
        <function-ref name="getFramePending" scoped="" ref="0x10c207ad8"/>
        <function-ref name="setFCF" scoped="" ref="0x10c20ba78"/>
        <function-ref name="isAckFrame" scoped="" ref="0x10c20bc00"/>
        <function-ref name="getDSN" scoped="" ref="0x10c20bd88"/>
        <function-ref name="createDataFrame" scoped="" ref="0x10c208020"/>
        <function-ref name="setDSN" scoped="" ref="0x10c2081a8"/>
        <function-ref name="createAckReply" scoped="" ref="0x10c208330"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x10c2084b8"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x10c208640"/>
        <function-ref name="isDataFrame" scoped="" ref="0x10c2087c8"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x10c208950"/>
        <function-ref name="getAckRequired" scoped="" ref="0x10c208ad8"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x10c208d60"/>
        <function-ref name="createAckFrame" scoped="" ref="0x10c207020"/>
        <function-ref name="setFramePending" scoped="" ref="0x10c2071a8"/>
        <function-ref name="setDestAddr" scoped="" ref="0x10c207330"/>
        <function-ref name="setDestPan" scoped="" ref="0x10c2074b8"/>
        <function-ref name="setAckRequired" scoped="" ref="0x10c207640"/>
        <function-ref name="getFCF" scoped="" ref="0x10c2077c8"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x10c20b8f0"/>
        <function-ref name="getDestAddr" scoped="" ref="0x10c207950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x10c204020" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayerC.nc">
      <component-ref qname="Ieee154PacketLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x10c204020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c204370"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c2044f8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c204680"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c204808"/>
        <function-ref name="headerLength" scoped="" ref="0x10c204990"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c204b18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154Packet" ref="0x10c1fe080" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154Packet" scoped="" ref="0x10c1fe080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="source" scoped="" ref="0x10c1fe3d0"/>
        <function-ref name="address" scoped="" ref="0x10c1fe558"/>
        <function-ref name="destination" scoped="" ref="0x10c1fe6e0"/>
        <function-ref name="setSource" scoped="" ref="0x10c1fe868"/>
        <function-ref name="setDestination" scoped="" ref="0x10c1fe9f0"/>
        <function-ref name="pan" scoped="" ref="0x10c1feb78"/>
        <function-ref name="setPan" scoped="" ref="0x10c1fed00"/>
        <function-ref name="isForMe" scoped="" ref="0x10c23f020"/>
        <function-ref name="localPan" scoped="" ref="0x10c23f1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x10c23f460" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x10c23f460"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c23f7b0"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c23f938"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c23fac0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c23fc48"/>
        <function-ref name="headerLength" scoped="" ref="0x10c23fdd0"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c23d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ieee154PacketLayer" ref="0x10c203788" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ieee154PacketLayer" scoped="" ref="0x10c203788"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
      </instance>
      <interface-functions>
        <function-ref name="getDestPan" scoped="" ref="0x10c203ad8"/>
        <function-ref name="getFramePending" scoped="" ref="0x10c1ffd60"/>
        <function-ref name="setFCF" scoped="" ref="0x10c203de8"/>
        <function-ref name="isAckFrame" scoped="" ref="0x10c200020"/>
        <function-ref name="getDSN" scoped="" ref="0x10c2001a8"/>
        <function-ref name="createDataFrame" scoped="" ref="0x10c200330"/>
        <function-ref name="setDSN" scoped="" ref="0x10c2004b8"/>
        <function-ref name="createAckReply" scoped="" ref="0x10c200640"/>
        <function-ref name="setSrcAddr" scoped="" ref="0x10c2007c8"/>
        <function-ref name="getSrcAddr" scoped="" ref="0x10c200950"/>
        <function-ref name="isDataFrame" scoped="" ref="0x10c200ad8"/>
        <function-ref name="verifyAckReply" scoped="" ref="0x10c200c60"/>
        <function-ref name="getAckRequired" scoped="" ref="0x10c200de8"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x10c1ff120"/>
        <function-ref name="createAckFrame" scoped="" ref="0x10c1ff2a8"/>
        <function-ref name="setFramePending" scoped="" ref="0x10c1ff430"/>
        <function-ref name="setDestAddr" scoped="" ref="0x10c1ff5b8"/>
        <function-ref name="setDestPan" scoped="" ref="0x10c1ff740"/>
        <function-ref name="setAckRequired" scoped="" ref="0x10c1ff8c8"/>
        <function-ref name="getFCF" scoped="" ref="0x10c1ffa50"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x10c203c60"/>
        <function-ref name="getDestAddr" scoped="" ref="0x10c1ffbd8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x10c23d3d8" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x10c23d3d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x10c23d728"/>
        <function-ref name="changed" scoped="" ref="0x10c23d8b0"/>
        <function-ref name="amGroup" scoped="" ref="0x10c23da38"/>
        <function-ref name="setAddress" scoped="" ref="0x10c23dbc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x10c23c020" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayerP.nc">
      <component-ref qname="Ieee154PacketLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x10c23c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c23c370"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c23c4f8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c23c680"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c23c808"/>
        <function-ref name="headerLength" scoped="" ref="0x10c23c990"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c23cb18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x10c297c80" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerC.nc">
      <component-ref qname="UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x10c297c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c299020"/>
        <function-ref name="cancel" scoped="" ref="0x10c2991a8"/>
        <function-ref name="sendDone" scoped="" ref="0x10c299330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x10c2996a0" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerC.nc">
      <component-ref qname="UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x10c2996a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c2999f0"/>
        <function-ref name="header" scoped="" ref="0x10c299b78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x10c29edf0" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerC.nc">
      <component-ref qname="UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x10c29edf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c29b170"/>
        <function-ref name="cancel" scoped="" ref="0x10c29b2f8"/>
        <function-ref name="sendDone" scoped="" ref="0x10c29b480"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x10c296020" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerC.nc">
      <component-ref qname="UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x10c296020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x10c296370"/>
        <function-ref name="reportChannelError" scoped="" ref="0x10c2964f8"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x10c296680"/>
        <function-ref name="getSender" scoped="" ref="0x10c296808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x10c2973e0" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerC.nc">
      <component-ref qname="UniqueLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x10c2973e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c297730"/>
        <function-ref name="header" scoped="" ref="0x10c2978b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x10c292bf0" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerP.nc">
      <component-ref qname="UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x10c292bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c291020"/>
        <function-ref name="cancel" scoped="" ref="0x10c2911a8"/>
        <function-ref name="sendDone" scoped="" ref="0x10c291330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x10c2916a0" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerP.nc">
      <component-ref qname="UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x10c2916a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c2919f0"/>
        <function-ref name="header" scoped="" ref="0x10c291b78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="NeighborhoodFlag" ref="0x10c286a50" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerP.nc">
      <component-ref qname="UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x10c286a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c286da0"/>
        <function-ref name="clearAll" scoped="" ref="0x10c28e020"/>
        <function-ref name="get" scoped="" ref="0x10c28e1a8"/>
        <function-ref name="set" scoped="" ref="0x10c28e330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x10c295420" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerP.nc">
      <component-ref qname="UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x10c295420"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c295770"/>
        <function-ref name="cancel" scoped="" ref="0x10c2958f8"/>
        <function-ref name="sendDone" scoped="" ref="0x10c295a80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Neighborhood" ref="0x10c289438" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerP.nc">
      <component-ref qname="UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x10c289438"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x10c289788"/>
        <function-ref name="insertNode" scoped="" ref="0x10c289910"/>
        <function-ref name="getNode" scoped="" ref="0x10c289a98"/>
        <function-ref name="evicted" scoped="" ref="0x10c289c20"/>
        <function-ref name="getIndex" scoped="" ref="0x10c289da8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x10c295d48" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerP.nc">
      <component-ref qname="UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x10c295d48"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c2920d8"/>
        <function-ref name="header" scoped="" ref="0x10c292260"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10c2924d8" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerP.nc">
      <component-ref qname="UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10c2924d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10c292828"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UniqueConfig" ref="0x10c291e40" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueLayerP.nc">
      <component-ref qname="UniqueLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UniqueConfig" scoped="" ref="0x10c291e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="UniqueConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x10c2901c0"/>
        <function-ref name="reportChannelError" scoped="" ref="0x10c290348"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x10c2904d0"/>
        <function-ref name="getSender" scoped="" ref="0x10c290658"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Neighborhood" ref="0x10c293b38" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodC.nc">
      <component-ref qname="NeighborhoodC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x10c293b38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x10c2b6020"/>
        <function-ref name="insertNode" scoped="" ref="0x10c2b61a8"/>
        <function-ref name="getNode" scoped="" ref="0x10c2b6330"/>
        <function-ref name="evicted" scoped="" ref="0x10c2b64b8"/>
        <function-ref name="getIndex" scoped="" ref="0x10c2b6640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NeighborhoodFlag" ref="0x10c2b1990" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodP.nc">
      <component-ref qname="NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x10c2b1990"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c2b1ce0"/>
        <function-ref name="clearAll" scoped="" ref="0x10c2b1e68"/>
        <function-ref name="get" scoped="" ref="0x10c2b0020"/>
        <function-ref name="set" scoped="" ref="0x10c2b01a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Neighborhood" ref="0x10c2b3768" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodP.nc">
      <component-ref qname="NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Neighborhood" scoped="" ref="0x10c2b3768"/></type-interface>
      <instance>
        <interfacedef-ref qname="Neighborhood"/>
      </instance>
      <interface-functions>
        <function-ref name="getAge" scoped="" ref="0x10c2b3ab8"/>
        <function-ref name="insertNode" scoped="" ref="0x10c2b3c40"/>
        <function-ref name="getNode" scoped="" ref="0x10c2b3dc8"/>
        <function-ref name="evicted" scoped="" ref="0x10c2b1020"/>
        <function-ref name="getIndex" scoped="" ref="0x10c2b11a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10c2b3150" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodP.nc">
      <component-ref qname="NeighborhoodP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10c2b3150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10c2b34a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="NeighborhoodFlag" ref="0x10c2b7c08" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodFlagC.nc">
      <component-ref qname="UniqueLayerC.NeighborhoodFlagC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="NeighborhoodFlag" scoped="" ref="0x10c2b7c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="NeighborhoodFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c2cf020"/>
        <function-ref name="clearAll" scoped="" ref="0x10c2cf1a8"/>
        <function-ref name="get" scoped="" ref="0x10c2cf330"/>
        <function-ref name="set" scoped="" ref="0x10c2cf4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x10c2c9c50" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="LowPowerListeningDummyC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x10c2c9c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x10c30b020"/>
        <function-ref name="stopDone" scoped="" ref="0x10c30b1a8"/>
        <function-ref name="start" scoped="" ref="0x10c30b330"/>
        <function-ref name="stop" scoped="" ref="0x10c30b4b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x10c308d58" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="LowPowerListeningDummyC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x10c308d58"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c3070d8"/>
        <function-ref name="cancel" scoped="" ref="0x10c307260"/>
        <function-ref name="sendDone" scoped="" ref="0x10c3073e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x10c307748" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="LowPowerListeningDummyC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x10c307748"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c307a98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x10c30b7c8" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="LowPowerListeningDummyC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x10c30b7c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c30bb18"/>
        <function-ref name="cancel" scoped="" ref="0x10c30bca0"/>
        <function-ref name="sendDone" scoped="" ref="0x10c30be28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x10c30a7c0" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="LowPowerListeningDummyC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x10c30a7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c30ab10"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c30ac98"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c30ae20"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c309020"/>
        <function-ref name="headerLength" scoped="" ref="0x10c3091a8"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c309330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x10c309628" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="LowPowerListeningDummyC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x10c309628"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x10c309978"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x10c309b00"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x10c309c88"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x10c309e10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x10c308248" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="LowPowerListeningDummyC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x10c308248"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x10c308598"/>
        <function-ref name="stopDone" scoped="" ref="0x10c308720"/>
        <function-ref name="start" scoped="" ref="0x10c3088a8"/>
        <function-ref name="stop" scoped="" ref="0x10c308a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x10c30a1b8" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="LowPowerListeningDummyC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x10c30a1b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c30a508"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x10c307df0" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/LowPowerListeningDummyC.nc">
      <component-ref qname="LowPowerListeningDummyC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x10c307df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c306170"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c3062f8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c306480"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c306608"/>
        <function-ref name="headerLength" scoped="" ref="0x10c306790"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c306918"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x10c302020" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/LowPowerListeningDummyP.nc">
      <component-ref qname="LowPowerListeningDummyP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x10c302020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x10c302370"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x10c3024f8"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x10c302680"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x10c302808"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x10c2f69e8" loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerC.nc">
      <component-ref qname="PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x10c2f69e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c2f6d38"/>
        <function-ref name="cancel" scoped="" ref="0x10c2f5020"/>
        <function-ref name="sendDone" scoped="" ref="0x10c2f51a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x10c2fa4f8" loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerC.nc">
      <component-ref qname="PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x10c2fa4f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c2fa848"/>
        <function-ref name="cancel" scoped="" ref="0x10c2fa9d0"/>
        <function-ref name="sendDone" scoped="" ref="0x10c2fab58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x10c2f7a80" loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerC.nc">
      <component-ref qname="PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x10c2f7a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c2f7dd0"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c2f6020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c2f61a8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c2f6330"/>
        <function-ref name="headerLength" scoped="" ref="0x10c2f64b8"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c2f6640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x10c2f5500" loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerC.nc">
      <component-ref qname="PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x10c2f5500"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c2f5850"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c2f59d8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c2f5b60"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c2f5ce8"/>
        <function-ref name="headerLength" scoped="" ref="0x10c2f5e70"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c2f4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x10c2f4348" loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerC.nc">
      <component-ref qname="PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10c2f4348"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x10c2f4698"/>
        <function-ref name="noAck" scoped="" ref="0x10c2f4820"/>
        <function-ref name="wasAcked" scoped="" ref="0x10c2f49a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x10c2fae08" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerC.nc">
      <component-ref qname="PacketLinkLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x10c2fae08"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x10c2f71a8"/>
        <function-ref name="setRetries" scoped="" ref="0x10c2f7330"/>
        <function-ref name="getRetries" scoped="" ref="0x10c2f74b8"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x10c2f7640"/>
        <function-ref name="wasDelivered" scoped="" ref="0x10c2f77c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x10c2eeb70" loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerP.nc">
      <component-ref qname="PacketLinkLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x10c2eeb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c2ed020"/>
        <function-ref name="cancel" scoped="" ref="0x10c2ed1a8"/>
        <function-ref name="sendDone" scoped="" ref="0x10c2ed330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="send" ref="0x10c32a380" loc="87:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerP.nc">
      <component-ref qname="PacketLinkLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="send" scoped="" ref="0x10c32a380"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10c32a6d0"/>
        <function-ref name="runTask" scoped="" ref="0x10c32a858"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="DelayTimer" ref="0x10c2eb1b0" loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerP.nc">
      <component-ref qname="PacketLinkLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="DelayTimer" scoped="" ref="0x10c2eb1b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10c32e5f0"/>
        <function-ref name="fired" scoped="" ref="0x10c2eaaf0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x10c2e98c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x10c2e9470"/>
        <function-ref name="getdt" scoped="" ref="0x10c32c020"/>
        <function-ref name="gett0" scoped="" ref="0x10c32ea40"/>
        <function-ref name="isRunning" scoped="" ref="0x10c2e9020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x10c2ebcf8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x10c32e020"/>
        <function-ref name="startOneShot" scoped="" ref="0x10c2ea200"/>
        <function-ref name="stop" scoped="" ref="0x10c2ea6a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x10c2f36b8" loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerP.nc">
      <component-ref qname="PacketLinkLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x10c2f36b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c2f3a08"/>
        <function-ref name="cancel" scoped="" ref="0x10c2f3b90"/>
        <function-ref name="sendDone" scoped="" ref="0x10c2f3d18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x10c2efc48" loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerP.nc">
      <component-ref qname="PacketLinkLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x10c2efc48"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c2ee020"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c2ee1a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c2ee330"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c2ee4b8"/>
        <function-ref name="headerLength" scoped="" ref="0x10c2ee640"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c2ee7c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x10c32c508" loc="73:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerP.nc">
      <component-ref qname="PacketLinkLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x10c32c508"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c32c858"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c32c9e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c32cb68"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c32ccf0"/>
        <function-ref name="headerLength" scoped="" ref="0x10c32ce78"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c32b030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x10c2ed658" loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerP.nc">
      <component-ref qname="PacketLinkLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10c2ed658"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x10c2ed9a8"/>
        <function-ref name="noAck" scoped="" ref="0x10c2edb30"/>
        <function-ref name="wasAcked" scoped="" ref="0x10c2edcb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x10c2ef020" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/PacketLinkLayerP.nc">
      <component-ref qname="PacketLinkLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLink" scoped="" ref="0x10c2ef020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x10c2ef370"/>
        <function-ref name="setRetries" scoped="" ref="0x10c2ef4f8"/>
        <function-ref name="getRetries" scoped="" ref="0x10c2ef680"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x10c2ef808"/>
        <function-ref name="wasDelivered" scoped="" ref="0x10c2ef990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x10c33e8d8" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/system/TimerMilliC.nc">
      <component-ref qname="PacketLinkLayerC.DelayTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x10c33e8d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10c33bbc0"/>
        <function-ref name="fired" scoped="" ref="0x10c33c238"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x10c33b020"/>
        <function-ref name="isOneShot" scoped="" ref="0x10c33cad8"/>
        <function-ref name="getdt" scoped="" ref="0x10c3394d8"/>
        <function-ref name="gett0" scoped="" ref="0x10c339088"/>
        <function-ref name="isRunning" scoped="" ref="0x10c33c688"/>
        <function-ref name="startPeriodic" scoped="" ref="0x10c33d458"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x10c33b5f0"/>
        <function-ref name="startOneShot" scoped="" ref="0x10c33d8f8"/>
        <function-ref name="stop" scoped="" ref="0x10c33dd98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x10c3343e0" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerC.nc">
      <component-ref qname="MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x10c3343e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x10c334730"/>
        <function-ref name="stopDone" scoped="" ref="0x10c3348b8"/>
        <function-ref name="start" scoped="" ref="0x10c334a40"/>
        <function-ref name="stop" scoped="" ref="0x10c334bc8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioState" ref="0x10c36f0d0" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerC.nc">
      <component-ref qname="MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x10c36f0d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x10c36f420"/>
        <function-ref name="turnOn" scoped="" ref="0x10c36f5a8"/>
        <function-ref name="setChannel" scoped="" ref="0x10c36f730"/>
        <function-ref name="done" scoped="" ref="0x10c36f8b8"/>
        <function-ref name="standby" scoped="" ref="0x10c36fa40"/>
        <function-ref name="getChannel" scoped="" ref="0x10c36fbc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x10c331020" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerC.nc">
      <component-ref qname="MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x10c331020"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c331370"/>
        <function-ref name="cancel" scoped="" ref="0x10c3314f8"/>
        <function-ref name="sendDone" scoped="" ref="0x10c331680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0x10c36bb28" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerC.nc">
      <component-ref qname="MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x10c36bb28"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c36be78"/>
        <function-ref name="header" scoped="" ref="0x10c374030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x10c3319c0" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerC.nc">
      <component-ref qname="MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x10c3319c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c331d10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0x10c36b200" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerC.nc">
      <component-ref qname="MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x10c36b200"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c36b550"/>
        <function-ref name="ready" scoped="" ref="0x10c36b6d8"/>
        <function-ref name="sendDone" scoped="" ref="0x10c36b860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x10c330020" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerC.nc">
      <component-ref qname="MessageBufferLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x10c330020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x10c330370"/>
        <function-ref name="setChannel" scoped="" ref="0x10c3304f8"/>
        <function-ref name="getChannel" scoped="" ref="0x10c330680"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x10c374c18" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerP.nc">
      <component-ref qname="MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x10c374c18"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x10c369020"/>
        <function-ref name="stopDone" scoped="" ref="0x10c3691a8"/>
        <function-ref name="start" scoped="" ref="0x10c369330"/>
        <function-ref name="stop" scoped="" ref="0x10c3694b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0x10c3697f0" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerP.nc">
      <component-ref qname="MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x10c3697f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10c369b40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioState" ref="0x10c367848" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerP.nc">
      <component-ref qname="MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x10c367848"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x10c367b98"/>
        <function-ref name="turnOn" scoped="" ref="0x10c367d20"/>
        <function-ref name="setChannel" scoped="" ref="0x10c366020"/>
        <function-ref name="done" scoped="" ref="0x10c3661a8"/>
        <function-ref name="standby" scoped="" ref="0x10c366330"/>
        <function-ref name="getChannel" scoped="" ref="0x10c3664b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x10c369e50" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerP.nc">
      <component-ref qname="MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x10c369e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c3681e8"/>
        <function-ref name="cancel" scoped="" ref="0x10c368370"/>
        <function-ref name="sendDone" scoped="" ref="0x10c3684f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stateDoneTask" ref="0x10c355368" loc="125:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerP.nc">
      <component-ref qname="MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stateDoneTask" scoped="" ref="0x10c355368"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10c3556b8"/>
        <function-ref name="runTask" scoped="" ref="0x10c355840"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioReceive" ref="0x10c365bf0" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerP.nc">
      <component-ref qname="MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x10c365bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c364020"/>
        <function-ref name="header" scoped="" ref="0x10c3641a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendTask" ref="0x10c391190" loc="170:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerP.nc">
      <component-ref qname="MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendTask" scoped="" ref="0x10c391190"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10c3914e0"/>
        <function-ref name="runTask" scoped="" ref="0x10c391668"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x10c368838" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerP.nc">
      <component-ref qname="MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x10c368838"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c368b88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="deliverTask" ref="0x10c378368" loc="280:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerP.nc">
      <component-ref qname="MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="deliverTask" scoped="" ref="0x10c378368"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10c3786b8"/>
        <function-ref name="runTask" scoped="" ref="0x10c378840"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSend" ref="0x10c3652c8" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerP.nc">
      <component-ref qname="MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x10c3652c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c365618"/>
        <function-ref name="ready" scoped="" ref="0x10c3657a0"/>
        <function-ref name="sendDone" scoped="" ref="0x10c365928"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioChannel" ref="0x10c368e50" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerP.nc">
      <component-ref qname="MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioChannel" scoped="" ref="0x10c368e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioChannel"/>
      </instance>
      <interface-functions>
        <function-ref name="setChannelDone" scoped="" ref="0x10c3671e8"/>
        <function-ref name="setChannel" scoped="" ref="0x10c367370"/>
        <function-ref name="getChannel" scoped="" ref="0x10c3674f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x10c366748" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MessageBufferLayerP.nc">
      <component-ref qname="MessageBufferLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x10c366748"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x10c366a98"/>
        <function-ref name="suspend" scoped="" ref="0x10c366c20"/>
        <function-ref name="resume" scoped="" ref="0x10c366da8"/>
        <function-ref name="run" scoped="" ref="0x10c365020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x10c39b978" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x10c39b978"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x10c39bcc8"/>
        <function-ref name="stopDone" scoped="" ref="0x10c39be50"/>
        <function-ref name="start" scoped="" ref="0x10c39a020"/>
        <function-ref name="stop" scoped="" ref="0x10c39a1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x10c3de060" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x10c3de060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x10c3de3b0"/>
        <function-ref name="request" scoped="" ref="0x10c3de538"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x10c3dc740" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x10c3dc740"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c3dca90"/>
        <function-ref name="cancel" scoped="" ref="0x10c3dcc18"/>
        <function-ref name="sendDone" scoped="" ref="0x10c3dcda0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x10c3db060" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x10c3db060"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c3db3b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioSend" ref="0x10c3da5b8" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioSend" scoped="" ref="0x10c3da5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c3da908"/>
        <function-ref name="ready" scoped="" ref="0x10c3daa90"/>
        <function-ref name="sendDone" scoped="" ref="0x10c3dac18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x10c3992e8" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x10c3992e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x10c399638"/>
        <function-ref name="turnOn" scoped="" ref="0x10c3997c0"/>
        <function-ref name="setChannel" scoped="" ref="0x10c399948"/>
        <function-ref name="done" scoped="" ref="0x10c399ad0"/>
        <function-ref name="standby" scoped="" ref="0x10c399c58"/>
        <function-ref name="getChannel" scoped="" ref="0x10c399de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x10c39a430" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x10c39a430"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c39a780"/>
        <function-ref name="cancel" scoped="" ref="0x10c39a908"/>
        <function-ref name="sendDone" scoped="" ref="0x10c39aa90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x10c3de780" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x10c3de780"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c3dead0"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c3dec58"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c3dede0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c3dd020"/>
        <function-ref name="headerLength" scoped="" ref="0x10c3dd1a8"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c3dd330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedConfig" ref="0x10c3dd5b8" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedConfig" scoped="" ref="0x10c3dd5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x10c3dd908"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x10c3df908" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x10c3df908"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c3dfc58"/>
        <function-ref name="header" scoped="" ref="0x10c3dfde0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubState" ref="0x10c3db638" loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubState" scoped="" ref="0x10c3db638"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x10c3dba88"/>
        <function-ref name="turnOn" scoped="" ref="0x10c3dbc10"/>
        <function-ref name="setChannel" scoped="" ref="0x10c3dbd98"/>
        <function-ref name="done" scoped="" ref="0x10c3da020"/>
        <function-ref name="standby" scoped="" ref="0x10c3da1a8"/>
        <function-ref name="getChannel" scoped="" ref="0x10c3da330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x10c3ddbf0" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x10c3ddbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x10c3dc020"/>
        <function-ref name="stopDone" scoped="" ref="0x10c3dc1a8"/>
        <function-ref name="start" scoped="" ref="0x10c3dc330"/>
        <function-ref name="stop" scoped="" ref="0x10c3dc4b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x10c3d7020" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x10c3d7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c3d7370"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c3d74f8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c3d7680"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c3d7808"/>
        <function-ref name="headerLength" scoped="" ref="0x10c3d7990"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c3d7b18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x10c39ad18" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x10c39ad18"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c3990a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x10c3d7da0" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x10c3d7da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x10c3d6170"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioReceive" ref="0x10c3d9020" loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioReceive" scoped="" ref="0x10c3d9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c3d9370"/>
        <function-ref name="header" scoped="" ref="0x10c3d94f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x10c3df060" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x10c3df060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c3df3b0"/>
        <function-ref name="ready" scoped="" ref="0x10c3df538"/>
        <function-ref name="sendDone" scoped="" ref="0x10c3df6c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioCCA" ref="0x10c3d9780" loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.TrafficMonitorLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioCCA" scoped="" ref="0x10c3d9780"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x10c3d9ad0"/>
        <function-ref name="request" scoped="" ref="0x10c3d9c58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x10c3cf578" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RandomCollisionLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x10c3cf578"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c3cf8c8"/>
        <function-ref name="ready" scoped="" ref="0x10c3cfa50"/>
        <function-ref name="sendDone" scoped="" ref="0x10c3cfbd8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x10c3ce020" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RandomCollisionLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x10c3ce020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c3ce370"/>
        <function-ref name="header" scoped="" ref="0x10c3ce4f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x10c3ce898" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RandomCollisionLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x10c3ce898"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x10c3cebe8"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x10c3ced70"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x10c3cd020"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x10c3cd1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x10c3d0be0" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RandomCollisionLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x10c3d0be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c3cf020"/>
        <function-ref name="header" scoped="" ref="0x10c3cf1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x10c3d02b8" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerC.nc">
      <component-ref qname="RandomCollisionLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x10c3d02b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c3d0608"/>
        <function-ref name="ready" scoped="" ref="0x10c3d0790"/>
        <function-ref name="sendDone" scoped="" ref="0x10c3d0918"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x10c3c9020" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x10c3c9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c3c9370"/>
        <function-ref name="ready" scoped="" ref="0x10c3c94f8"/>
        <function-ref name="sendDone" scoped="" ref="0x10c3c9680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x10c3c99f0" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x10c3c99f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c3c9d40"/>
        <function-ref name="header" scoped="" ref="0x10c3c8020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x10c3c82d0" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x10c3c82d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x10c3c8620"/>
        <function-ref name="wait" scoped="" ref="0x10c3c87a8"/>
        <function-ref name="cancel" scoped="" ref="0x10c3c8930"/>
        <function-ref name="isFree" scoped="" ref="0x10c3c8ab8"/>
        <function-ref name="getNow" scoped="" ref="0x10c3c8c40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x10c3c43a0" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x10c3c43a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x10c3c46f0"/>
        <function-ref name="rand32" scoped="" ref="0x10c3c4878"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x10c3c4c18" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x10c3c4c18"/></type-interface>
      <instance>
        <interfacedef-ref qname="RandomCollisionConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getCongestionBackoff" scoped="" ref="0x10c3c6020"/>
        <function-ref name="getInitialBackoff" scoped="" ref="0x10c3c61a8"/>
        <function-ref name="getMinimumBackoff" scoped="" ref="0x10c3c6330"/>
        <function-ref name="getTransmitBarrier" scoped="" ref="0x10c3c64b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x10c3ca748" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x10c3ca748"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c3caa98"/>
        <function-ref name="header" scoped="" ref="0x10c3cac20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x10c3cdda0" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x10c3cdda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c3ca170"/>
        <function-ref name="ready" scoped="" ref="0x10c3ca2f8"/>
        <function-ref name="sendDone" scoped="" ref="0x10c3ca480"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="calcNextRandom" ref="0x10c3c0cd8" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionLayerP.nc">
      <component-ref qname="RandomCollisionLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="calcNextRandom" scoped="" ref="0x10c3c0cd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10c3bf0a0"/>
        <function-ref name="runTask" scoped="" ref="0x10c3bf228"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x10c3e9208" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x10c3e9208"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x10c3e9558"/>
        <function-ref name="rand32" scoped="" ref="0x10c3e96e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x10c3ea1a0" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x10c3ea1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10c3eace8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10c3ed348" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10c3ed348"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10c3ed698"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x10c3e2080" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x10c3e2080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x10c3e23d0"/>
        <function-ref name="rand32" scoped="" ref="0x10c3e2558"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x10c3e3020" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x10c3e3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10c3e3b68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10c3e46a0" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10c3e46a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10c3e49f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x10c41aa50" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerC.nc">
      <component-ref qname="SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x10c41aa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c41ada0"/>
        <function-ref name="ready" scoped="" ref="0x10c419020"/>
        <function-ref name="sendDone" scoped="" ref="0x10c4191a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x10c419518" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerC.nc">
      <component-ref qname="SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x10c419518"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c419868"/>
        <function-ref name="header" scoped="" ref="0x10c4199f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x10c419d68" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerC.nc">
      <component-ref qname="SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x10c419d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0x10c4180f0"/>
        <function-ref name="createAckPacket" scoped="" ref="0x10c418278"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x10c418400"/>
        <function-ref name="isAckPacket" scoped="" ref="0x10c418588"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0x10c418710"/>
        <function-ref name="getAckTimeout" scoped="" ref="0x10c418898"/>
        <function-ref name="setAckRequired" scoped="" ref="0x10c418a20"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x10c418ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x10c41b748" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerC.nc">
      <component-ref qname="SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x10c41b748"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c41ba98"/>
        <function-ref name="header" scoped="" ref="0x10c41bc20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x10c41edf0" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerC.nc">
      <component-ref qname="SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x10c41edf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c41b170"/>
        <function-ref name="ready" scoped="" ref="0x10c41b2f8"/>
        <function-ref name="sendDone" scoped="" ref="0x10c41b480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x10c41a020" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerC.nc">
      <component-ref qname="SoftwareAckLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10c41a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x10c41a370"/>
        <function-ref name="noAck" scoped="" ref="0x10c41a4f8"/>
        <function-ref name="wasAcked" scoped="" ref="0x10c41a680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x10c4133f0" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerP.nc">
      <component-ref qname="SoftwareAckLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x10c4133f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c413740"/>
        <function-ref name="ready" scoped="" ref="0x10c4138c8"/>
        <function-ref name="sendDone" scoped="" ref="0x10c413a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x10c413dc0" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerP.nc">
      <component-ref qname="SoftwareAckLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x10c413dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c412170"/>
        <function-ref name="header" scoped="" ref="0x10c4122f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x10c4125a8" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerP.nc">
      <component-ref qname="SoftwareAckLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x10c4125a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x10c4128f8"/>
        <function-ref name="wait" scoped="" ref="0x10c412a80"/>
        <function-ref name="cancel" scoped="" ref="0x10c412c08"/>
        <function-ref name="isFree" scoped="" ref="0x10c412d90"/>
        <function-ref name="getNow" scoped="" ref="0x10c411020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AckReceivedFlag" ref="0x10c40a468" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerP.nc">
      <component-ref qname="SoftwareAckLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AckReceivedFlag" scoped="" ref="0x10c40a468"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c40a7b8"/>
        <function-ref name="get" scoped="" ref="0x10c40a940"/>
        <function-ref name="setValue" scoped="" ref="0x10c40aac8"/>
        <function-ref name="set" scoped="" ref="0x10c40ac50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x10c414140" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerP.nc">
      <component-ref qname="SoftwareAckLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x10c414140"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c414490"/>
        <function-ref name="header" scoped="" ref="0x10c414618"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareAckConfig" ref="0x10c411318" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerP.nc">
      <component-ref qname="SoftwareAckLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareAckConfig" scoped="" ref="0x10c411318"/></type-interface>
      <instance>
        <interfacedef-ref qname="SoftwareAckConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="reportChannelError" scoped="" ref="0x10c411668"/>
        <function-ref name="createAckPacket" scoped="" ref="0x10c4117f0"/>
        <function-ref name="requiresAckWait" scoped="" ref="0x10c411978"/>
        <function-ref name="isAckPacket" scoped="" ref="0x10c411b00"/>
        <function-ref name="verifyAckPacket" scoped="" ref="0x10c411c88"/>
        <function-ref name="getAckTimeout" scoped="" ref="0x10c411e10"/>
        <function-ref name="setAckRequired" scoped="" ref="0x10c410020"/>
        <function-ref name="requiresAckReply" scoped="" ref="0x10c4101a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x10c4177f0" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerP.nc">
      <component-ref qname="SoftwareAckLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x10c4177f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c417b40"/>
        <function-ref name="ready" scoped="" ref="0x10c417cc8"/>
        <function-ref name="sendDone" scoped="" ref="0x10c417e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x10c414940" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckLayerP.nc">
      <component-ref qname="SoftwareAckLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x10c414940"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x10c414c90"/>
        <function-ref name="noAck" scoped="" ref="0x10c414e18"/>
        <function-ref name="wasAcked" scoped="" ref="0x10c413020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketFlag" ref="0x10c436980" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/MetadataFlagC.nc">
      <component-ref qname="SoftwareAckLayerC.MetadataFlagC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketFlag" scoped="" ref="0x10c436980"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c436cd0"/>
        <function-ref name="get" scoped="" ref="0x10c436e58"/>
        <function-ref name="setValue" scoped="" ref="0x10c434020"/>
        <function-ref name="set" scoped="" ref="0x10c4341a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x10c42f460" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x10c42f460"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c42f7b0"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c42f938"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c42fac0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c42fc48"/>
        <function-ref name="headerLength" scoped="" ref="0x10c42fdd0"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c42e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x10c42e418" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x10c42e418"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c42e768"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c42e8f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c42ea78"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c42ec00"/>
        <function-ref name="headerLength" scoped="" ref="0x10c42ed88"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c42d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketFlag" ref="0x10c432900" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/MetadataFlagsLayerC.nc">
      <component-ref qname="MetadataFlagsLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketFlag" scoped="" ref="0x10c432900"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c432c50"/>
        <function-ref name="get" scoped="" ref="0x10c432dd8"/>
        <function-ref name="setValue" scoped="" ref="0x10c42f020"/>
        <function-ref name="set" scoped="" ref="0x10c42f1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x10c458978" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x10c458978"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x10c458cc8"/>
        <function-ref name="stopDone" scoped="" ref="0x10c458e50"/>
        <function-ref name="start" scoped="" ref="0x10c457020"/>
        <function-ref name="stop" scoped="" ref="0x10c4571a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x10c453060" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x10c453060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x10c4533b0"/>
        <function-ref name="request" scoped="" ref="0x10c453538"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x10c451740" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x10c451740"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c451a90"/>
        <function-ref name="cancel" scoped="" ref="0x10c451c18"/>
        <function-ref name="sendDone" scoped="" ref="0x10c451da0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x10c450060" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x10c450060"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c4503b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioSend" ref="0x10c49a5b8" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioSend" scoped="" ref="0x10c49a5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c49a908"/>
        <function-ref name="ready" scoped="" ref="0x10c49aa90"/>
        <function-ref name="sendDone" scoped="" ref="0x10c49ac18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x10c4562e8" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x10c4562e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x10c456638"/>
        <function-ref name="turnOn" scoped="" ref="0x10c4567c0"/>
        <function-ref name="setChannel" scoped="" ref="0x10c456948"/>
        <function-ref name="done" scoped="" ref="0x10c456ad0"/>
        <function-ref name="standby" scoped="" ref="0x10c456c58"/>
        <function-ref name="getChannel" scoped="" ref="0x10c456de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x10c457430" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x10c457430"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c457780"/>
        <function-ref name="cancel" scoped="" ref="0x10c457908"/>
        <function-ref name="sendDone" scoped="" ref="0x10c457a90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x10c453780" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x10c453780"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c453ad0"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c453c58"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c453de0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c452020"/>
        <function-ref name="headerLength" scoped="" ref="0x10c4521a8"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c452330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UnconnectedConfig" ref="0x10c4525b8" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnconnectedConfig" scoped="" ref="0x10c4525b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x10c452908"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x10c454908" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x10c454908"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c454c58"/>
        <function-ref name="header" scoped="" ref="0x10c454de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubState" ref="0x10c450638" loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubState" scoped="" ref="0x10c450638"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x10c450a88"/>
        <function-ref name="turnOn" scoped="" ref="0x10c450c10"/>
        <function-ref name="setChannel" scoped="" ref="0x10c450d98"/>
        <function-ref name="done" scoped="" ref="0x10c49a020"/>
        <function-ref name="standby" scoped="" ref="0x10c49a1a8"/>
        <function-ref name="getChannel" scoped="" ref="0x10c49a330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x10c452bf0" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubControl" scoped="" ref="0x10c452bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x10c451020"/>
        <function-ref name="stopDone" scoped="" ref="0x10c4511a8"/>
        <function-ref name="start" scoped="" ref="0x10c451330"/>
        <function-ref name="stop" scoped="" ref="0x10c4514b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x10c497020" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x10c497020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c497370"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c4974f8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c497680"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c497808"/>
        <function-ref name="headerLength" scoped="" ref="0x10c497990"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c497b18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x10c457d18" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x10c457d18"/></type-interface>
      <instance>
        <interfacedef-ref qname="BareReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c4560a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x10c497da0" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x10c497da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="DummyConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="nothing" scoped="" ref="0x10c496170"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioReceive" ref="0x10c499020" loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioReceive" scoped="" ref="0x10c499020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c499370"/>
        <function-ref name="header" scoped="" ref="0x10c4994f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x10c454060" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x10c454060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c4543b0"/>
        <function-ref name="ready" scoped="" ref="0x10c454538"/>
        <function-ref name="sendDone" scoped="" ref="0x10c4546c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubRadioCCA" ref="0x10c499780" loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyLayerC.nc">
      <component-ref qname="RF230RadioC.CsmaLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubRadioCCA" scoped="" ref="0x10c499780"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x10c499ad0"/>
        <function-ref name="request" scoped="" ref="0x10c499c58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x10c489810" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerC.nc">
      <component-ref qname="TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x10c489810"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c489b60"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c489ce8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c489e70"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c488020"/>
        <function-ref name="headerLength" scoped="" ref="0x10c4881a8"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c488330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x10c487978" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerC.nc">
      <component-ref qname="TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x10c487978"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c487cc8"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c487e50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c486020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c4861a8"/>
        <function-ref name="headerLength" scoped="" ref="0x10c486330"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c4864b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x10c48dcc8" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerC.nc">
      <component-ref qname="TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x10c48dcc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TRadio" ref="0x10b77a140"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x10c48b150"/>
        <function-ref name="clear" scoped="" ref="0x10c48b830"/>
        <function-ref name="isValid" scoped="" ref="0x10c48ca40"/>
        <function-ref name="set" scoped="" ref="0x10c489020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x10c488890" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerC.nc">
      <component-ref qname="TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x10c488890"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TRadio" ref="0x10b77a140"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10c487490"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x10c493e68" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerC.nc">
      <component-ref qname="TimeStampingLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x10c493e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x10c48f300"/>
        <function-ref name="clear" scoped="" ref="0x10c48f9e0"/>
        <function-ref name="isValid" scoped="" ref="0x10c490be8"/>
        <function-ref name="set" scoped="" ref="0x10c48d0f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeStampFlag" ref="0x10c47a020" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerP.nc">
      <component-ref qname="TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeStampFlag" scoped="" ref="0x10c47a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c47a370"/>
        <function-ref name="get" scoped="" ref="0x10c47a4f8"/>
        <function-ref name="setValue" scoped="" ref="0x10c47a680"/>
        <function-ref name="set" scoped="" ref="0x10c47a808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x10c47b020" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerP.nc">
      <component-ref qname="TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x10c47b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c47b370"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c47b4f8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c47b680"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c47b808"/>
        <function-ref name="headerLength" scoped="" ref="0x10c47b990"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c47bb18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x10c4760c0" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerP.nc">
      <component-ref qname="TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x10c4760c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c476410"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c476598"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c476720"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c4768a8"/>
        <function-ref name="headerLength" scoped="" ref="0x10c476a30"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c476bb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampRadio" ref="0x10c47f478" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerP.nc">
      <component-ref qname="TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampRadio" scoped="" ref="0x10c47f478"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TRadio" ref="0x10b77a140"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x10c47e900"/>
        <function-ref name="clear" scoped="" ref="0x10c47c020"/>
        <function-ref name="isValid" scoped="" ref="0x10c47e220"/>
        <function-ref name="set" scoped="" ref="0x10c47c700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeRadio" ref="0x10c47acc8" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerP.nc">
      <component-ref qname="TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x10c47acc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TRadio" ref="0x10b77a140"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10c479870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x10c478020" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerP.nc">
      <component-ref qname="TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeMilli" scoped="" ref="0x10c478020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10c478ba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x10c483510" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TimeStampingLayerP.nc">
      <component-ref qname="TimeStampingLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x10c483510"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x10c482a88"/>
        <function-ref name="clear" scoped="" ref="0x10c480190"/>
        <function-ref name="isValid" scoped="" ref="0x10c4823a8"/>
        <function-ref name="set" scoped="" ref="0x10c480870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x10c485e38" loc="20:/usr/local/Cellar/tinyos/2.1.1/tos/system/LocalTimeMilliC.nc">
      <component-ref qname="LocalTimeMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x10c485e38"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ae0b8"/>
            <typename><typedef-ref name="TMilli" ref="0x10b4ae410"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10c49ea18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketFlag" ref="0x10c49c060" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/MetadataFlagC.nc">
      <component-ref qname="TimeStampingLayerC.TimeStampFlagC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketFlag" scoped="" ref="0x10c49c060"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c49c3b0"/>
        <function-ref name="get" scoped="" ref="0x10c49c538"/>
        <function-ref name="setValue" scoped="" ref="0x10c49c6c0"/>
        <function-ref name="set" scoped="" ref="0x10c49c848"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x10c4e0d70" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x10c4e0d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x10c4df0f0"/>
        <function-ref name="request" scoped="" ref="0x10c4df278"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x10c4dcb20" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x10c4dcb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c4d9190"/>
        <function-ref name="get" scoped="" ref="0x10c4dac38"/>
        <function-ref name="isSet" scoped="" ref="0x10c4da728"/>
        <function-ref name="set" scoped="" ref="0x10c4d96a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x10c4cfa40" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x10c4cfa40"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TRadio" ref="0x10b77a140"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x10c4cd020"/>
        <function-ref name="clear" scoped="" ref="0x10c4cd700"/>
        <function-ref name="isValid" scoped="" ref="0x10c4ce828"/>
        <function-ref name="set" scoped="" ref="0x10c4cdde0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x10c4e5e78" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x10c4e5e78"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x10c4e11f8"/>
        <function-ref name="turnOn" scoped="" ref="0x10c4e1380"/>
        <function-ref name="setChannel" scoped="" ref="0x10c4e1508"/>
        <function-ref name="done" scoped="" ref="0x10c4e1690"/>
        <function-ref name="standby" scoped="" ref="0x10c4e1818"/>
        <function-ref name="getChannel" scoped="" ref="0x10c4e19a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x10c4df530" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x10c4df530"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c4df880"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c4dfa08"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c4dfb90"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c4dfd18"/>
        <function-ref name="headerLength" scoped="" ref="0x10c4de020"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c4de1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x10c4de6b0" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x10c4de6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c4dddc8"/>
        <function-ref name="get" scoped="" ref="0x10c4dd8b8"/>
        <function-ref name="isSet" scoped="" ref="0x10c4dd3a8"/>
        <function-ref name="set" scoped="" ref="0x10c4dc328"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x10c4e05f8" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x10c4e05f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c4e0948"/>
        <function-ref name="header" scoped="" ref="0x10c4e0ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x10c4d7020" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x10c4d7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c4d6608"/>
        <function-ref name="get" scoped="" ref="0x10c4d60f8"/>
        <function-ref name="isSet" scoped="" ref="0x10c4d7ba0"/>
        <function-ref name="set" scoped="" ref="0x10c4d6b18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x10c4d19b8" loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x10c4d19b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c4d1d08"/>
        <function-ref name="headerLength" scoped="" ref="0x10c4cf020"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c4cf1a8"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x10c4cf330"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x10c4cf4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x10c4d2828" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x10c4d2828"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TRadio" ref="0x10b77a140"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10c4d1410"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x10c4e1c48" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x10c4e1c48"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c4e0020"/>
        <function-ref name="ready" scoped="" ref="0x10c4e01a8"/>
        <function-ref name="sendDone" scoped="" ref="0x10c4e0330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x10c4d5390" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerC.nc">
      <component-ref qname="RF230DriverLayerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x10c4d5390"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c4d3a40"/>
        <function-ref name="get" scoped="" ref="0x10c4d3530"/>
        <function-ref name="isSet" scoped="" ref="0x10c4d3020"/>
        <function-ref name="set" scoped="" ref="0x10c4d2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioCCA" ref="0x10c4c32c0" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioCCA" scoped="" ref="0x10c4c32c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioCCA"/>
      </instance>
      <interface-functions>
        <function-ref name="done" scoped="" ref="0x10c4c3610"/>
        <function-ref name="request" scoped="" ref="0x10c4c3798"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x10c4f1748" loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x10c4f1748"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TMicro" ref="0x10b4ad778"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x10c4f7578"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketRSSI" ref="0x10c50b020" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketRSSI" scoped="" ref="0x10c50b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c509608"/>
        <function-ref name="get" scoped="" ref="0x10c5090f8"/>
        <function-ref name="isSet" scoped="" ref="0x10c50bba0"/>
        <function-ref name="set" scoped="" ref="0x10c509b18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSIFlag" ref="0x10c4ef678" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSSIFlag" scoped="" ref="0x10c4ef678"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c4ef9c8"/>
        <function-ref name="get" scoped="" ref="0x10c4efb50"/>
        <function-ref name="setValue" scoped="" ref="0x10c4efcd8"/>
        <function-ref name="set" scoped="" ref="0x10c4efe60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0x10c4c6ca8" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x10c4c6ca8"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x10b414570"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x10b414570"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10c4c5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x10c4ec020" loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp" scoped="" ref="0x10c4ec020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TRadio" ref="0x10b77a140"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x10c4eb478"/>
        <function-ref name="clear" scoped="" ref="0x10c4ebb58"/>
        <function-ref name="isValid" scoped="" ref="0x10c4ecd70"/>
        <function-ref name="set" scoped="" ref="0x10c4ea278"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSTN" ref="0x10c4fe7d0" loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSTN" scoped="" ref="0x10c4fe7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c4feb20"/>
        <function-ref name="isInput" scoped="" ref="0x10c4feca8"/>
        <function-ref name="toggle" scoped="" ref="0x10c4fee30"/>
        <function-ref name="isOutput" scoped="" ref="0x10c4f9020"/>
        <function-ref name="get" scoped="" ref="0x10c4f91a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c4f9330"/>
        <function-ref name="set" scoped="" ref="0x10c4f94b8"/>
        <function-ref name="clr" scoped="" ref="0x10c4f9640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioAlarm" ref="0x10c4e8768" loc="73:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioAlarm" scoped="" ref="0x10c4e8768"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioAlarm"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x10c4e8ab8"/>
        <function-ref name="wait" scoped="" ref="0x10c4e8c40"/>
        <function-ref name="cancel" scoped="" ref="0x10c4e8dc8"/>
        <function-ref name="isFree" scoped="" ref="0x10c4e7020"/>
        <function-ref name="getNow" scoped="" ref="0x10c4e71a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioState" ref="0x10c4c52d0" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioState" scoped="" ref="0x10c4c52d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioState"/>
      </instance>
      <interface-functions>
        <function-ref name="turnOff" scoped="" ref="0x10c4c5620"/>
        <function-ref name="turnOn" scoped="" ref="0x10c4c57a8"/>
        <function-ref name="setChannel" scoped="" ref="0x10c4c5930"/>
        <function-ref name="done" scoped="" ref="0x10c4c5ab8"/>
        <function-ref name="standby" scoped="" ref="0x10c4c5c40"/>
        <function-ref name="getChannel" scoped="" ref="0x10c4c5dc8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime" ref="0x10c4f7b48" loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x10c4f7b48"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TRadio" ref="0x10b77a140"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10c4f3728"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTransmitPower" ref="0x10c4c2b48" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTransmitPower" scoped="" ref="0x10c4c2b48"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c50c190"/>
        <function-ref name="get" scoped="" ref="0x10c50dc38"/>
        <function-ref name="isSet" scoped="" ref="0x10c50d728"/>
        <function-ref name="set" scoped="" ref="0x10c50c6a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioPacket" ref="0x10c4c3a50" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioPacket" scoped="" ref="0x10c4c3a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c4c3da0"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c4c2020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c4c21a8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c4c2330"/>
        <function-ref name="headerLength" scoped="" ref="0x10c4c24b8"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c4c2640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SLP_TR" ref="0x10c4ff658" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SLP_TR" scoped="" ref="0x10c4ff658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c4ff9a8"/>
        <function-ref name="isInput" scoped="" ref="0x10c4ffb30"/>
        <function-ref name="toggle" scoped="" ref="0x10c4ffcb8"/>
        <function-ref name="isOutput" scoped="" ref="0x10c4ffe40"/>
        <function-ref name="get" scoped="" ref="0x10c4fe020"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c4fe1a8"/>
        <function-ref name="set" scoped="" ref="0x10c4fe330"/>
        <function-ref name="clr" scoped="" ref="0x10c4fe4b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Config" ref="0x10c4f3c30" loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Config" scoped="" ref="0x10c4f3c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="RF230DriverConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c4f0020"/>
        <function-ref name="headerLength" scoped="" ref="0x10c4f01a8"/>
        <function-ref name="metadataLength" scoped="" ref="0x10c4f0330"/>
        <function-ref name="headerPreloadLength" scoped="" ref="0x10c4f04b8"/>
        <function-ref name="requiresRssiCca" scoped="" ref="0x10c4f0640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioReceive" ref="0x10c4c49e8" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioReceive" scoped="" ref="0x10c4c49e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioReceive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c4c4d38"/>
        <function-ref name="header" scoped="" ref="0x10c4c3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x10c5083b0" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x10c5083b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c507a40"/>
        <function-ref name="get" scoped="" ref="0x10c507530"/>
        <function-ref name="isSet" scoped="" ref="0x10c507020"/>
        <function-ref name="set" scoped="" ref="0x10c505020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x10c4c61f0" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x10c4c61f0"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x10b414570"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x10b414570"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10c4c6540"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x10c501ca0" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiResource" scoped="" ref="0x10c501ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x10c500170"/>
        <function-ref name="immediateRequest" scoped="" ref="0x10c5002f8"/>
        <function-ref name="request" scoped="" ref="0x10c500480"/>
        <function-ref name="granted" scoped="" ref="0x10c500608"/>
        <function-ref name="isOwner" scoped="" ref="0x10c500790"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SELN" ref="0x10c502a88" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SELN" scoped="" ref="0x10c502a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c502dd8"/>
        <function-ref name="isInput" scoped="" ref="0x10c501020"/>
        <function-ref name="toggle" scoped="" ref="0x10c5011a8"/>
        <function-ref name="isOutput" scoped="" ref="0x10c501330"/>
        <function-ref name="get" scoped="" ref="0x10c5014b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c501640"/>
        <function-ref name="set" scoped="" ref="0x10c5017c8"/>
        <function-ref name="clr" scoped="" ref="0x10c501950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLinkQuality" ref="0x10c505860" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketLinkQuality" scoped="" ref="0x10c505860"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketField"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c504e30"/>
        <function-ref name="get" scoped="" ref="0x10c504920"/>
        <function-ref name="isSet" scoped="" ref="0x10c504410"/>
        <function-ref name="set" scoped="" ref="0x10c502388"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioSend" ref="0x10c4c40c0" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioSend" scoped="" ref="0x10c4c40c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c4c4410"/>
        <function-ref name="ready" scoped="" ref="0x10c4c4598"/>
        <function-ref name="sendDone" scoped="" ref="0x10c4c4720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IRQ" ref="0x10c4f8020" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x10c4f8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x10c4f8370"/>
        <function-ref name="disable" scoped="" ref="0x10c4f84f8"/>
        <function-ref name="captured" scoped="" ref="0x10c4f8680"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x10c4f8808"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FastSpiByte" ref="0x10c4faaf8" loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x10c4faaf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x10c4fae48"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x10c4ff020"/>
        <function-ref name="splitRead" scoped="" ref="0x10c4ff1a8"/>
        <function-ref name="write" scoped="" ref="0x10c4ff330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSyncFlag" ref="0x10c4ed208" loc="68:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimeSyncFlag" scoped="" ref="0x10c4ed208"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c4ed558"/>
        <function-ref name="get" scoped="" ref="0x10c4ed6e0"/>
        <function-ref name="setValue" scoped="" ref="0x10c4ed868"/>
        <function-ref name="set" scoped="" ref="0x10c4ed9f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TransmitPowerFlag" ref="0x10c4f09e0" loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TransmitPowerFlag" scoped="" ref="0x10c4f09e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c4f0d30"/>
        <function-ref name="get" scoped="" ref="0x10c4ef020"/>
        <function-ref name="setValue" scoped="" ref="0x10c4ef1a8"/>
        <function-ref name="set" scoped="" ref="0x10c4ef330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Tasklet" ref="0x10c4eaa40" loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverLayerP.nc">
      <component-ref qname="RF230DriverLayerP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Tasklet" scoped="" ref="0x10c4eaa40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Tasklet"/>
      </instance>
      <interface-functions>
        <function-ref name="schedule" scoped="" ref="0x10c4e8020"/>
        <function-ref name="suspend" scoped="" ref="0x10c4e81a8"/>
        <function-ref name="resume" scoped="" ref="0x10c4e8330"/>
        <function-ref name="run" scoped="" ref="0x10c4e84b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSTN" ref="0x10c5f84c0" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RSTN" scoped="" ref="0x10c5f84c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c5f8810"/>
        <function-ref name="isInput" scoped="" ref="0x10c5f8998"/>
        <function-ref name="toggle" scoped="" ref="0x10c5f8b20"/>
        <function-ref name="isOutput" scoped="" ref="0x10c5f8ca8"/>
        <function-ref name="get" scoped="" ref="0x10c5f8e30"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c5f6020"/>
        <function-ref name="set" scoped="" ref="0x10c5f61a8"/>
        <function-ref name="clr" scoped="" ref="0x10c5f6330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SLP_TR" ref="0x10c5f9348" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SLP_TR" scoped="" ref="0x10c5f9348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c5f9698"/>
        <function-ref name="isInput" scoped="" ref="0x10c5f9820"/>
        <function-ref name="toggle" scoped="" ref="0x10c5f99a8"/>
        <function-ref name="isOutput" scoped="" ref="0x10c5f9b30"/>
        <function-ref name="get" scoped="" ref="0x10c5f9cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c5f9e40"/>
        <function-ref name="set" scoped="" ref="0x10c5f8020"/>
        <function-ref name="clr" scoped="" ref="0x10c5f81a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x10c5f5418" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x10c5f5418"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TRadio" ref="0x10b77a140"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10c5f3ab0"/>
        <function-ref name="fired" scoped="" ref="0x10c5f4af0"/>
        <function-ref name="startAt" scoped="" ref="0x10c5f34a8"/>
        <function-ref name="isRunning" scoped="" ref="0x10c5f3020"/>
        <function-ref name="getAlarm" scoped="" ref="0x10c5f2020"/>
        <function-ref name="start" scoped="" ref="0x10c5f4190"/>
        <function-ref name="stop" scoped="" ref="0x10c5f4668"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiResource" ref="0x10c5fbb18" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiResource" scoped="" ref="0x10c5fbb18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x10c5fbe68"/>
        <function-ref name="immediateRequest" scoped="" ref="0x10c5fa020"/>
        <function-ref name="request" scoped="" ref="0x10c5fa1a8"/>
        <function-ref name="granted" scoped="" ref="0x10c5fa330"/>
        <function-ref name="isOwner" scoped="" ref="0x10c5fa4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SELN" ref="0x10c5af920" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SELN" scoped="" ref="0x10c5af920"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c5afc70"/>
        <function-ref name="isInput" scoped="" ref="0x10c5afdf8"/>
        <function-ref name="toggle" scoped="" ref="0x10c5fb020"/>
        <function-ref name="isOutput" scoped="" ref="0x10c5fb1a8"/>
        <function-ref name="get" scoped="" ref="0x10c5fb330"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c5fb4b8"/>
        <function-ref name="set" scoped="" ref="0x10c5fb640"/>
        <function-ref name="clr" scoped="" ref="0x10c5fb7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IRQ" ref="0x10c5f6648" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x10c5f6648"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x10c5f6998"/>
        <function-ref name="disable" scoped="" ref="0x10c5f6b20"/>
        <function-ref name="captured" scoped="" ref="0x10c5f6ca8"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x10c5f6e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x10c5fa770" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x10c5fa770"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x10c5faac0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x10c5fac48"/>
        <function-ref name="splitRead" scoped="" ref="0x10c5fadd0"/>
        <function-ref name="write" scoped="" ref="0x10c5f9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTimeRadio" ref="0x10c5f2670" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230C.nc">
      <component-ref qname="HplRF230C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeRadio" scoped="" ref="0x10c5f2670"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TRadio" ref="0x10b77a140"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10c5f0220"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PortCLKM" ref="0x10c5e8c18" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortCLKM" scoped="" ref="0x10c5e8c18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c5e7020"/>
        <function-ref name="isInput" scoped="" ref="0x10c5e71a8"/>
        <function-ref name="toggle" scoped="" ref="0x10c5e7330"/>
        <function-ref name="isOutput" scoped="" ref="0x10c5e74b8"/>
        <function-ref name="get" scoped="" ref="0x10c5e7640"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c5e77c8"/>
        <function-ref name="set" scoped="" ref="0x10c5e7950"/>
        <function-ref name="clr" scoped="" ref="0x10c5e7ad8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Capture" ref="0x10c5ec598" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x10c5ec598"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x10c5e86f8"/>
        <function-ref name="test" scoped="" ref="0x10c5eadb8"/>
        <function-ref name="get" scoped="" ref="0x10c5eb150"/>
        <function-ref name="captured" scoped="" ref="0x10c5ebab0"/>
        <function-ref name="reset" scoped="" ref="0x10c5ea020"/>
        <function-ref name="isOn" scoped="" ref="0x10c5e8270"/>
        <function-ref name="set" scoped="" ref="0x10c5eb5d8"/>
        <function-ref name="start" scoped="" ref="0x10c5ea4a8"/>
        <function-ref name="stop" scoped="" ref="0x10c5ea930"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PortIRQ" ref="0x10c5e7e08" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortIRQ" scoped="" ref="0x10c5e7e08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c5e61a8"/>
        <function-ref name="isInput" scoped="" ref="0x10c5e6330"/>
        <function-ref name="toggle" scoped="" ref="0x10c5e64b8"/>
        <function-ref name="isOutput" scoped="" ref="0x10c5e6640"/>
        <function-ref name="get" scoped="" ref="0x10c5e67c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c5e6950"/>
        <function-ref name="set" scoped="" ref="0x10c5e6ad8"/>
        <function-ref name="clr" scoped="" ref="0x10c5e6c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x10c5edb40" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x10c5edb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10c5ec020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IRQ" ref="0x10c5ed020" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/chips/rf230/HplRF230P.nc">
      <component-ref qname="HplRF230P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IRQ" scoped="" ref="0x10c5ed020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x10c5ed370"/>
        <function-ref name="disable" scoped="" ref="0x10c5ed4f8"/>
        <function-ref name="captured" scoped="" ref="0x10c5ed680"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x10c5ed808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x10c61d1d8" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0x10c61d1d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c61d528"/>
        <function-ref name="sendDone" scoped="" ref="0x10c61d6b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x10c5d4388" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x10c5d4388"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x10c5d46d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10c5eece0" loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10c5eece0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10c5d70a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x10c5d49d0" loc="68:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x10c5d49d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x10c5d4d20"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x10c5d6020"/>
        <function-ref name="splitRead" scoped="" ref="0x10c5d61a8"/>
        <function-ref name="write" scoped="" ref="0x10c5d6330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x10c61de80" loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x10c61de80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x10c5d51f8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x10c5d5380"/>
        <function-ref name="request" scoped="" ref="0x10c5d5508"/>
        <function-ref name="granted" scoped="" ref="0x10c5d5690"/>
        <function-ref name="isOwner" scoped="" ref="0x10c5d5818"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="zeroTask" ref="0x10c62bca0" loc="241:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="zeroTask" scoped="" ref="0x10c62bca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10c62a020"/>
        <function-ref name="runTask" scoped="" ref="0x10c62a1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x10c619140" loc="80:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0x10c619140"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x10c619490"/>
        <function-ref name="sendDone" scoped="" ref="0x10c619618"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceArbiter" ref="0x10c5fc3c8" loc="85:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceArbiter" scoped="" ref="0x10c5fc3c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x10c5fc718"/>
        <function-ref name="immediateRequest" scoped="" ref="0x10c5fc8a0"/>
        <function-ref name="request" scoped="" ref="0x10c5fca28"/>
        <function-ref name="granted" scoped="" ref="0x10c5fcbb0"/>
        <function-ref name="isOwner" scoped="" ref="0x10c5fcd38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x10c61a080" loc="78:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x10c61a080"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x10c61a3d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10c61ea30" loc="77:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10c61ea30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10c61ed80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Spi" ref="0x10c5fd150" loc="84:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Spi" scoped="" ref="0x10c5fd150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x10c5fd4a0"/>
        <function-ref name="sleep" scoped="" ref="0x10c616950"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x10c5fd7b0"/>
        <function-ref name="dataReady" scoped="" ref="0x10c616ad8"/>
        <function-ref name="initMaster" scoped="" ref="0x10c5fdac0"/>
        <function-ref name="setMasterBit" scoped="" ref="0x10c5fdc48"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x10c5fddd0"/>
        <function-ref name="read" scoped="" ref="0x10c617020"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x10c6171a8"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x10c617330"/>
        <function-ref name="setClock" scoped="" ref="0x10c6174b8"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x10c617640"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x10c6177c8"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x10c617a50"/>
        <function-ref name="setDataOrder" scoped="" ref="0x10c617bd8"/>
        <function-ref name="write" scoped="" ref="0x10c617d60"/>
        <function-ref name="enableSpi" scoped="" ref="0x10c616020"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x10c6161a8"/>
        <function-ref name="getClockPhase" scoped="" ref="0x10c616330"/>
        <function-ref name="getClock" scoped="" ref="0x10c6164b8"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x10c616640"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x10c5fd628"/>
        <function-ref name="setClockPhase" scoped="" ref="0x10c5fd938"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x10c6167c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x10c61a688" loc="79:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x10c61a688"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x10c61a9d8"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x10c61ab60"/>
        <function-ref name="splitRead" scoped="" ref="0x10c61ace8"/>
        <function-ref name="write" scoped="" ref="0x10c61ae70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x10c619da8" loc="81:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x10c619da8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x10c618170"/>
        <function-ref name="immediateRequest" scoped="" ref="0x10c6182f8"/>
        <function-ref name="request" scoped="" ref="0x10c618480"/>
        <function-ref name="granted" scoped="" ref="0x10c618608"/>
        <function-ref name="isOwner" scoped="" ref="0x10c618790"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x10c64c020" loc="86:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x10c64c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x10c64c370"/>
        <function-ref name="userId" scoped="" ref="0x10c64c4f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x10c64c7c8" loc="87:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x10c64c7c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x10c64cb18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiBus" ref="0x10c652100" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <component-ref qname="HplAtm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiBus" scoped="" ref="0x10c652100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x10c652450"/>
        <function-ref name="sleep" scoped="" ref="0x10c650950"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x10c652760"/>
        <function-ref name="dataReady" scoped="" ref="0x10c650ad8"/>
        <function-ref name="initMaster" scoped="" ref="0x10c652a70"/>
        <function-ref name="setMasterBit" scoped="" ref="0x10c652bf8"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x10c652d80"/>
        <function-ref name="read" scoped="" ref="0x10c651020"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x10c6511a8"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x10c651330"/>
        <function-ref name="setClock" scoped="" ref="0x10c6514b8"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x10c651640"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x10c6517c8"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x10c651a50"/>
        <function-ref name="setDataOrder" scoped="" ref="0x10c651bd8"/>
        <function-ref name="write" scoped="" ref="0x10c651d60"/>
        <function-ref name="enableSpi" scoped="" ref="0x10c650020"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x10c6501a8"/>
        <function-ref name="getClockPhase" scoped="" ref="0x10c650330"/>
        <function-ref name="getClock" scoped="" ref="0x10c6504b8"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x10c650640"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x10c6525d8"/>
        <function-ref name="setClockPhase" scoped="" ref="0x10c6528e8"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x10c6507c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MISO" ref="0x10c696190" loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MISO" scoped="" ref="0x10c696190"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c6964e0"/>
        <function-ref name="isInput" scoped="" ref="0x10c696668"/>
        <function-ref name="toggle" scoped="" ref="0x10c6967f0"/>
        <function-ref name="isOutput" scoped="" ref="0x10c696978"/>
        <function-ref name="get" scoped="" ref="0x10c696b00"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c696c88"/>
        <function-ref name="set" scoped="" ref="0x10c696e10"/>
        <function-ref name="clr" scoped="" ref="0x10c695020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SCK" ref="0x10c69ce60" loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SCK" scoped="" ref="0x10c69ce60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c69b1e8"/>
        <function-ref name="isInput" scoped="" ref="0x10c69b370"/>
        <function-ref name="toggle" scoped="" ref="0x10c69b4f8"/>
        <function-ref name="isOutput" scoped="" ref="0x10c69b680"/>
        <function-ref name="get" scoped="" ref="0x10c69b808"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c69b990"/>
        <function-ref name="set" scoped="" ref="0x10c69bb18"/>
        <function-ref name="clr" scoped="" ref="0x10c69bca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SS" ref="0x10c699d28" loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SS" scoped="" ref="0x10c699d28"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c69c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x10c69c228"/>
        <function-ref name="toggle" scoped="" ref="0x10c69c3b0"/>
        <function-ref name="isOutput" scoped="" ref="0x10c69c538"/>
        <function-ref name="get" scoped="" ref="0x10c69c6c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c69c848"/>
        <function-ref name="set" scoped="" ref="0x10c69c9d0"/>
        <function-ref name="clr" scoped="" ref="0x10c69cb58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x10c6994f0" loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x10c6994f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x10c699840"/>
        <function-ref name="stop" scoped="" ref="0x10c6999c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Mcu" ref="0x10c695350" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Mcu" scoped="" ref="0x10c695350"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x10c6956a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SPI" ref="0x10c69f020" loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SPI" scoped="" ref="0x10c69f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x10c69f370"/>
        <function-ref name="sleep" scoped="" ref="0x10c69d7c8"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x10c69f680"/>
        <function-ref name="dataReady" scoped="" ref="0x10c69d950"/>
        <function-ref name="initMaster" scoped="" ref="0x10c69f990"/>
        <function-ref name="setMasterBit" scoped="" ref="0x10c69fb18"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x10c69fca0"/>
        <function-ref name="read" scoped="" ref="0x10c69fe28"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x10c69e020"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x10c69e1a8"/>
        <function-ref name="setClock" scoped="" ref="0x10c69e330"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x10c69e4b8"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x10c69e640"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x10c69e8c8"/>
        <function-ref name="setDataOrder" scoped="" ref="0x10c69ea50"/>
        <function-ref name="write" scoped="" ref="0x10c69ebd8"/>
        <function-ref name="enableSpi" scoped="" ref="0x10c69ed60"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x10c69d020"/>
        <function-ref name="getClockPhase" scoped="" ref="0x10c69d1a8"/>
        <function-ref name="getClock" scoped="" ref="0x10c69d330"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x10c69d4b8"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x10c69f4f8"/>
        <function-ref name="setClockPhase" scoped="" ref="0x10c69f808"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x10c69d640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MOSI" ref="0x10c698020" loc="63:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MOSI" scoped="" ref="0x10c698020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x10c698370"/>
        <function-ref name="isInput" scoped="" ref="0x10c6984f8"/>
        <function-ref name="toggle" scoped="" ref="0x10c698680"/>
        <function-ref name="isOutput" scoped="" ref="0x10c698808"/>
        <function-ref name="get" scoped="" ref="0x10c698990"/>
        <function-ref name="makeOutput" scoped="" ref="0x10c698b18"/>
        <function-ref name="set" scoped="" ref="0x10c698ca0"/>
        <function-ref name="clr" scoped="" ref="0x10c698e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x10c6a3698" loc="76:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x10c6a3698"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x10c6a3a08"/>
        <function-ref name="immediateRequested" scoped="" ref="0x10c6a3b90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x10c6a16a0" loc="79:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x10c6a16a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x10c6a1a10"/>
        <function-ref name="configure" scoped="" ref="0x10c6a1b98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x10c6a4878" loc="75:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x10c6a4878"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x10c6a4be8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x10c6a4d70"/>
        <function-ref name="request" scoped="" ref="0x10c6a3020"/>
        <function-ref name="granted" scoped="" ref="0x10c6a31a8"/>
        <function-ref name="isOwner" scoped="" ref="0x10c6a3330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x10c6a3dd8" loc="77:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x10c6a3dd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x10c6a1170"/>
        <function-ref name="userId" scoped="" ref="0x10c6a12f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10ce14020" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10ce14020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10ce14370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x10ce145f8" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x10ce145f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x10ce14948"/>
        <function-ref name="isEmpty" scoped="" ref="0x10ce14ad0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x10ce14c58"/>
        <function-ref name="dequeue" scoped="" ref="0x10ce14de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x10ce100c8" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x10ce100c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x10ce10438"/>
        <function-ref name="immediateRequested" scoped="" ref="0x10ce105c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x10ce0f100" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x10ce0f100"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x10ce0f470"/>
        <function-ref name="configure" scoped="" ref="0x10ce0f5f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x10ce0f880" loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x10ce0f880"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x10ce0fbd0"/>
        <function-ref name="isEmpty" scoped="" ref="0x10ce0fd58"/>
        <function-ref name="isEnqueued" scoped="" ref="0x10ce0e020"/>
        <function-ref name="dequeue" scoped="" ref="0x10ce0e1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x10ce11390" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x10ce11390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x10ce11700"/>
        <function-ref name="immediateRequest" scoped="" ref="0x10ce11888"/>
        <function-ref name="request" scoped="" ref="0x10ce11a10"/>
        <function-ref name="granted" scoped="" ref="0x10ce11b98"/>
        <function-ref name="isOwner" scoped="" ref="0x10ce11d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x10ce10808" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x10ce10808"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x10ce10b58"/>
        <function-ref name="userId" scoped="" ref="0x10ce10ce0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x10ce0e470" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x10ce0e470"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10ce0e7c0"/>
        <function-ref name="runTask" scoped="" ref="0x10ce0e948"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x10c6e6838" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x10c6e6838"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x10c6e6b88"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x10c6e6d10"/>
        <function-ref name="getControlA" scoped="" ref="0x10c6e5020"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x10c6e51a8"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x10c6e5330"/>
        <function-ref name="setControlB" scoped="" ref="0x10c6e54b8"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x10c6e5640"/>
        <function-ref name="getControlB" scoped="" ref="0x10c6e57c8"/>
        <function-ref name="setControlC" scoped="" ref="0x10c6e5950"/>
        <function-ref name="setControlA" scoped="" ref="0x10c6e5ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x10c6e4020" loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x10c6e4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x10c6e0270"/>
        <function-ref name="test" scoped="" ref="0x10c6e1930"/>
        <function-ref name="get" scoped="" ref="0x10c6e4ba0"/>
        <function-ref name="captured" scoped="" ref="0x10c6e3560"/>
        <function-ref name="reset" scoped="" ref="0x10c6e3a38"/>
        <function-ref name="isOn" scoped="" ref="0x10c6e1db8"/>
        <function-ref name="set" scoped="" ref="0x10c6e3088"/>
        <function-ref name="start" scoped="" ref="0x10c6e1020"/>
        <function-ref name="stop" scoped="" ref="0x10c6e14a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x10c6e0e18" loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x10c6e0e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x10c6dc798"/>
        <function-ref name="fired" scoped="" ref="0x10c6de4f8"/>
        <function-ref name="get" scoped="" ref="0x10c6dfa18"/>
        <function-ref name="reset" scoped="" ref="0x10c6de980"/>
        <function-ref name="isOn" scoped="" ref="0x10c6dcc20"/>
        <function-ref name="set" scoped="" ref="0x10c6de020"/>
        <function-ref name="start" scoped="" ref="0x10c6dee08"/>
        <function-ref name="stop" scoped="" ref="0x10c6dc310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x10c6ed6f0" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x10c6ed6f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x10c6e8930"/>
        <function-ref name="test" scoped="" ref="0x10c6e8020"/>
        <function-ref name="get" scoped="" ref="0x10c6ea3a8"/>
        <function-ref name="setScale" scoped="" ref="0x10c6e8db8"/>
        <function-ref name="getScale" scoped="" ref="0x10c6e62f0"/>
        <function-ref name="reset" scoped="" ref="0x10c6e91f8"/>
        <function-ref name="overflow" scoped="" ref="0x10c6ead08"/>
        <function-ref name="isOn" scoped="" ref="0x10c6e84a8"/>
        <function-ref name="set" scoped="" ref="0x10c6ea830"/>
        <function-ref name="start" scoped="" ref="0x10c6e9680"/>
        <function-ref name="stop" scoped="" ref="0x10c6e9b08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x10c6d2160" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x10c6d2160"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getControlC" scoped="" ref="0x10c6d24b0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x10c6d2638"/>
        <function-ref name="getControlA" scoped="" ref="0x10c6d27c0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x10c6d2948"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x10c6d2ad0"/>
        <function-ref name="setControlB" scoped="" ref="0x10c6d2c58"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x10c6d2de0"/>
        <function-ref name="getControlB" scoped="" ref="0x10c6d1020"/>
        <function-ref name="setControlC" scoped="" ref="0x10c6d11a8"/>
        <function-ref name="setControlA" scoped="" ref="0x10c6d1330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x10c6cc020" loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x10c6cc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x10c7217a8"/>
        <function-ref name="fired" scoped="" ref="0x10c6cb560"/>
        <function-ref name="get" scoped="" ref="0x10c6ccba0"/>
        <function-ref name="reset" scoped="" ref="0x10c6cb9e8"/>
        <function-ref name="isOn" scoped="" ref="0x10c721c30"/>
        <function-ref name="set" scoped="" ref="0x10c6cb088"/>
        <function-ref name="start" scoped="" ref="0x10c6cbe70"/>
        <function-ref name="stop" scoped="" ref="0x10c721320"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x10c6d1808" loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x10c6d1808"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x10c6ce930"/>
        <function-ref name="test" scoped="" ref="0x10c6ce020"/>
        <function-ref name="get" scoped="" ref="0x10c6d03c8"/>
        <function-ref name="captured" scoped="" ref="0x10c6d0d28"/>
        <function-ref name="reset" scoped="" ref="0x10c6cf238"/>
        <function-ref name="isOn" scoped="" ref="0x10c6ce4a8"/>
        <function-ref name="set" scoped="" ref="0x10c6d0850"/>
        <function-ref name="start" scoped="" ref="0x10c6cf6c0"/>
        <function-ref name="stop" scoped="" ref="0x10c6cfb48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x10c71f360" loc="63:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x10c71f360"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x10c71dc20"/>
        <function-ref name="fired" scoped="" ref="0x10c71e980"/>
        <function-ref name="get" scoped="" ref="0x10c71e020"/>
        <function-ref name="reset" scoped="" ref="0x10c71ee08"/>
        <function-ref name="isOn" scoped="" ref="0x10c71c0f8"/>
        <function-ref name="set" scoped="" ref="0x10c71e4a8"/>
        <function-ref name="start" scoped="" ref="0x10c71d310"/>
        <function-ref name="stop" scoped="" ref="0x10c71d798"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x10c71c770" loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x10c71c770"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x10c718020"/>
        <function-ref name="fired" scoped="" ref="0x10c71ad08"/>
        <function-ref name="get" scoped="" ref="0x10c71a3a8"/>
        <function-ref name="reset" scoped="" ref="0x10c7191f8"/>
        <function-ref name="isOn" scoped="" ref="0x10c7184a8"/>
        <function-ref name="set" scoped="" ref="0x10c71a830"/>
        <function-ref name="start" scoped="" ref="0x10c719680"/>
        <function-ref name="stop" scoped="" ref="0x10c719b08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x10c6d8180" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer1P.nc">
      <component-ref qname="HplAtm1281Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x10c6d8180"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x10c6d4270"/>
        <function-ref name="test" scoped="" ref="0x10c6d5930"/>
        <function-ref name="get" scoped="" ref="0x10c6d8d00"/>
        <function-ref name="setScale" scoped="" ref="0x10c6d46f8"/>
        <function-ref name="getScale" scoped="" ref="0x10c6d4bd0"/>
        <function-ref name="reset" scoped="" ref="0x10c6d6b58"/>
        <function-ref name="overflow" scoped="" ref="0x10c6d66d0"/>
        <function-ref name="isOn" scoped="" ref="0x10c6d5db8"/>
        <function-ref name="set" scoped="" ref="0x10c6d61f8"/>
        <function-ref name="start" scoped="" ref="0x10c6d5020"/>
        <function-ref name="stop" scoped="" ref="0x10c6d54a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x10c7ba6f0" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/AlarmOne16C.nc">
      <component-ref qname="HplRF230C.AlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x10c7ba6f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TOne" ref="0x10b4e99f0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10c7b7020"/>
        <function-ref name="fired" scoped="" ref="0x10c7b8020"/>
        <function-ref name="startAt" scoped="" ref="0x10c7b8930"/>
        <function-ref name="isRunning" scoped="" ref="0x10c7b84a8"/>
        <function-ref name="getAlarm" scoped="" ref="0x10c7b74a8"/>
        <function-ref name="start" scoped="" ref="0x10c7b9578"/>
        <function-ref name="stop" scoped="" ref="0x10c7b9a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10c79e770" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x10c79e770"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x10b414208"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x10b414208"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10c79eac0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x10c79d020" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x10c79d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x10c7990f8"/>
        <function-ref name="test" scoped="" ref="0x10c79a7a8"/>
        <function-ref name="get" scoped="" ref="0x10c79dba0"/>
        <function-ref name="setScale" scoped="" ref="0x10c799580"/>
        <function-ref name="getScale" scoped="" ref="0x10c799a58"/>
        <function-ref name="reset" scoped="" ref="0x10c79b9e8"/>
        <function-ref name="overflow" scoped="" ref="0x10c79b560"/>
        <function-ref name="isOn" scoped="" ref="0x10c79ac30"/>
        <function-ref name="set" scoped="" ref="0x10c79b088"/>
        <function-ref name="start" scoped="" ref="0x10c79be70"/>
        <function-ref name="stop" scoped="" ref="0x10c79a320"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x10cde52d8" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x10cde52d8"/></type-interface>
      <attribute-value>
        <attribute-ref name="atmostonce" ref="0x10b40be78"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atmostonce" ref="0x10b40be78"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TOne" ref="0x10b4e99f0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10ce54928"/>
        <function-ref name="fired" scoped="" ref="0x10cde49e8"/>
        <function-ref name="startAt" scoped="" ref="0x10ce54320"/>
        <function-ref name="isRunning" scoped="" ref="0x10cde4e70"/>
        <function-ref name="getAlarm" scoped="" ref="0x10ce54db0"/>
        <function-ref name="start" scoped="" ref="0x10cde4088"/>
        <function-ref name="stop" scoped="" ref="0x10cde4560"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Compare" ref="0x10ce4e540" loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Compare" scoped="" ref="0x10ce4e540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x10ce4cdb8"/>
        <function-ref name="fired" scoped="" ref="0x10ce4da58"/>
        <function-ref name="get" scoped="" ref="0x10ce4d0f8"/>
        <function-ref name="reset" scoped="" ref="0x10ce4c020"/>
        <function-ref name="isOn" scoped="" ref="0x10ce4a270"/>
        <function-ref name="set" scoped="" ref="0x10ce4d580"/>
        <function-ref name="start" scoped="" ref="0x10ce4c4a8"/>
        <function-ref name="stop" scoped="" ref="0x10ce4c930"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Timer" ref="0x10ce53308" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128AlarmC.nc">
      <component-ref qname="HplRF230C.AlarmC.NAlarm"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Timer" scoped="" ref="0x10ce53308"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x10ce4f580"/>
        <function-ref name="test" scoped="" ref="0x10ce50c20"/>
        <function-ref name="get" scoped="" ref="0x10ce52020"/>
        <function-ref name="setScale" scoped="" ref="0x10ce4fa08"/>
        <function-ref name="getScale" scoped="" ref="0x10ce4e020"/>
        <function-ref name="reset" scoped="" ref="0x10ce52e08"/>
        <function-ref name="overflow" scoped="" ref="0x10ce52980"/>
        <function-ref name="isOn" scoped="" ref="0x10ce4f0f8"/>
        <function-ref name="set" scoped="" ref="0x10ce524a8"/>
        <function-ref name="start" scoped="" ref="0x10ce50310"/>
        <function-ref name="stop" scoped="" ref="0x10ce50798"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x10c7b3208" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/iris/LocalTimeMicroC.nc">
      <component-ref qname="LocalTimeMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x10c7b3208"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TMicro" ref="0x10b4ad778"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10c7b3d88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x10c7ae020" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/mica/CounterOne16C.nc">
      <component-ref qname="CounterOne16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x10c7ae020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TOne" ref="0x10b4e99f0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10c7aed70"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10c7ad6b8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10c7ad230"/>
        <function-ref name="overflow" scoped="" ref="0x10c7adb40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x10c7abb90" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x10c7abb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TOne" ref="0x10b4e99f0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10c7a9930"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10c7a8270"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10c7a9db8"/>
        <function-ref name="overflow" scoped="" ref="0x10c7a86f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x10c7a8c58" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x10c7a8c58"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x10c7a4db8"/>
        <function-ref name="test" scoped="" ref="0x10c7a44a8"/>
        <function-ref name="get" scoped="" ref="0x10c7a7820"/>
        <function-ref name="setScale" scoped="" ref="0x10c7fb270"/>
        <function-ref name="getScale" scoped="" ref="0x10c7fb748"/>
        <function-ref name="reset" scoped="" ref="0x10c7a5658"/>
        <function-ref name="overflow" scoped="" ref="0x10c7a51d0"/>
        <function-ref name="isOn" scoped="" ref="0x10c7a4930"/>
        <function-ref name="set" scoped="" ref="0x10c7a7ca8"/>
        <function-ref name="start" scoped="" ref="0x10c7a5ae0"/>
        <function-ref name="stop" scoped="" ref="0x10c7a4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x10c7f47f8" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="LocalTimeMicroC.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x10c7f47f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TMicro" ref="0x10b4ad778"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10c7f3578"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10c7f2020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10c7f3a00"/>
        <function-ref name="overflow" scoped="" ref="0x10c7f24a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x10c7f75a8" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="LocalTimeMicroC.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x10c7f75a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TMicro" ref="0x10b4ad778"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10c7f63a8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10c7f6cb8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10c7f6830"/>
        <function-ref name="overflow" scoped="" ref="0x10c7f4190"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x10c7ef020" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="LocalTimeMicroC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x10c7ef020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TMicro" ref="0x10b4ad778"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10c7efba0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x10c7ee230" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="LocalTimeMicroC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x10c7ee230"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TMicro" ref="0x10b4ad778"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10c7ed020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10c7ed930"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10c7ed4a8"/>
        <function-ref name="overflow" scoped="" ref="0x10c7eddb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x10c7e67e0" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/micaz/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x10c7e67e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x10b4ad020"/>
            <typename><typedef-ref name="TMicro" ref="0x10b4ad778"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x10c7e3578"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketFlag" ref="0x10c7de0e0" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/MetadataFlagC.nc">
      <component-ref qname="RF230DriverLayerC.TransmitPowerFlagC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketFlag" scoped="" ref="0x10c7de0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c7de430"/>
        <function-ref name="get" scoped="" ref="0x10c7de5b8"/>
        <function-ref name="setValue" scoped="" ref="0x10c7de740"/>
        <function-ref name="set" scoped="" ref="0x10c7de8c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketFlag" ref="0x10c7dc540" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/MetadataFlagC.nc">
      <component-ref qname="RF230DriverLayerC.RSSIFlagC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketFlag" scoped="" ref="0x10c7dc540"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c7dc890"/>
        <function-ref name="get" scoped="" ref="0x10c7dca18"/>
        <function-ref name="setValue" scoped="" ref="0x10c7dcba0"/>
        <function-ref name="set" scoped="" ref="0x10c7dcd28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketFlag" ref="0x10c7daaa0" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/MetadataFlagC.nc">
      <component-ref qname="RF230DriverLayerC.TimeSyncFlagC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketFlag" scoped="" ref="0x10c7daaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketFlag"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c7dadf0"/>
        <function-ref name="get" scoped="" ref="0x10c7d9020"/>
        <function-ref name="setValue" scoped="" ref="0x10c7d91a8"/>
        <function-ref name="set" scoped="" ref="0x10c7d9330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x10c83c268" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMReceiverC.nc">
      <component-ref qname="BaseAppC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x10c83c268"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10c83c5b8"/>
        <function-ref name="payloadLength" scoped="" ref="0x10c83c740"/>
        <function-ref name="getPayload" scoped="" ref="0x10c83c8c8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x10c83ca50"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x10c83cbd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x10c83dc20" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMReceiverC.nc">
      <component-ref qname="BaseAppC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x10c83dc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x10c83c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x10c83ce20" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/system/AMReceiverC.nc">
      <component-ref qname="BaseAppC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x10c83ce20"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x10c83b1a8"/>
        <function-ref name="source" scoped="" ref="0x10c83b330"/>
        <function-ref name="address" scoped="" ref="0x10c83b4b8"/>
        <function-ref name="destination" scoped="" ref="0x10c83b640"/>
        <function-ref name="setSource" scoped="" ref="0x10c83b7c8"/>
        <function-ref name="setDestination" scoped="" ref="0x10c83b950"/>
        <function-ref name="type" scoped="" ref="0x10c83bad8"/>
        <function-ref name="setType" scoped="" ref="0x10c83bc60"/>
        <function-ref name="isForMe" scoped="" ref="0x10c83bde8"/>
        <function-ref name="setGroup" scoped="" ref="0x10c83a020"/>
        <function-ref name="localGroup" scoped="" ref="0x10c83a1a8"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Init.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x10b53c588" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Init.nc">
        <documentation loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Boot.nc">
      <documentation loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x10b52f258" loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Boot.nc">
        <documentation loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x10b541408" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x10b541198" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x10b539ba8" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x10b5435e0" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x10b543370" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x10b5420a8" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x10b543df8" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x10b5428f0" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="27:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/GeneralIO.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x10b557ab0" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x10b5561d8" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x10b558d20" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x10b554020" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x10b557400" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x10b556890" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x10b558020" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x10b558690" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Scheduler.nc">
      <documentation loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x10b413850" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Scheduler.nc">
        <documentation loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x10b4107c0" loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Scheduler.nc">
        <documentation loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x10b410020" loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Scheduler.nc">
        <documentation loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x10b41b290" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/TaskBasic.nc">
        <documentation loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x10b41ba80" loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/TaskBasic.nc">
        <documentation loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/McuSleep.nc">
      <documentation loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x10b4f1e38" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/McuSleep.nc">
        <documentation loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="1:/usr/local/Cellar/tinyos/2.1.1/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.7 2009-07-01 19:27:00 scipio Exp $&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x10b516d60" loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x10b488450"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/McuPowerState.nc">
      <documentation loc="27:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x10b517020" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/McuPowerState.nc">
        <documentation loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SplitControl.nc">
      <documentation loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x10b7afa48" loc="92:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SplitControl.nc">
        <documentation loc="85:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x10b7af7d8" loc="92:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x10b7aee38" loc="117:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SplitControl.nc">
        <documentation loc="111:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x10b7aebc8" loc="117:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x10b79ad90" loc="83:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SplitControl.nc">
        <documentation loc="68:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x10b7ae258" loc="109:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SplitControl.nc">
        <documentation loc="94:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMSend.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x10b7aa020" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMSend.nc">
        <documentation loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x10b7ab5c8" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x10b7ab928" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x10b7abc38" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x10b7a5380" loc="124:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMSend.nc">
        <documentation loc="115:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10b7a6d48" loc="124:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x10b7a50c8" loc="124:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x10b7a6540" loc="112:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMSend.nc">
        <documentation loc="102:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x10b7a92d0" loc="85:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMSend.nc">
        <documentation loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10b7a9060" loc="85:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x10b7a8708" loc="99:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMSend.nc">
        <documentation loc="87:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10b7a8160" loc="99:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x10b7a8488" loc="99:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Packet.nc">
      <documentation loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x10b7b54e8" loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Packet.nc">
        <documentation loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10b7b5278" loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x10b7b44e8" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Packet.nc">
        <documentation loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10b7b4278" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x10b7c7690" loc="115:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Packet.nc">
        <documentation loc="98:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10b7c70c8" loc="115:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x10b7c73d8" loc="115:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x10b7c87c8" loc="95:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Packet.nc">
        <documentation loc="85:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x10b7b28d8" loc="83:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Packet.nc">
        <documentation loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10b7b2348" loc="83:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x10b7b2658" loc="83:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Receive.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x10b7b9718" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Receive.nc">
        <documentation loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
              <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10b799dc8" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x10b7b9140" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x10b7b9450" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
      <documentation loc="22:/usr/local/Cellar/tinyos/2.1.1/tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x10b7d9428" loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x10b7d9b60" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x10b7d8328" loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x10b7d71d8" loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="68:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x10b7d6810" loc="89:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="85:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x10b7ed020" loc="106:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="92:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x10b7d8a40" loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="63:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x10b7edb20" loc="123:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="109:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x10b7ed8b0" loc="123:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x10b7dbcd8" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x10b7d7948" loc="78:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="75:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x10b7d60d8" loc="83:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="80:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x10b7ca290" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10b7ca020" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x10b7c93b0" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10b7c9140" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x10b7df468" loc="74:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10b7df1f8" loc="74:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
      <documentation loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x10b7cf930" loc="166:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="153:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x10b789b50"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x10b7cf6c0" loc="166:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x10b7c0a88" loc="77:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x10b7c0818" loc="77:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x10b7c3020" loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x10b7c3a78" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x10b7c3808" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x10b7be2a0" loc="110:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="94:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x10b7c1c98" loc="110:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x10b7be020" loc="110:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x10b7bfdc0" loc="92:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="79:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x10b7bf808" loc="92:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x10b7bfb40" loc="92:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x10b7d35c8" loc="136:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="127:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x10b7d3358" loc="136:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x10b7d1840" loc="151:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="138:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x10b7d12c0" loc="151:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x10b7d15c0" loc="151:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x10b7897a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x10b7d4478" loc="125:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="112:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x10b7d4208" loc="125:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x10b7ced20" loc="176:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="168:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x10b789b50"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x10b7ce770" loc="176:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x10b7ceaa0" loc="176:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x10b789b50"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x10b7ccac8" loc="184:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
        <documentation loc="178:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x10b789b50"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Send.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x10b7e2bb0" loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Send.nc">
        <documentation loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10b7e2620" loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x10b7e2930" loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x10b7f62d8" loc="114:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Send.nc">
        <documentation loc="104:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10b7f7c90" loc="114:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x10b7f6020" loc="114:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x10b7f7488" loc="101:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Send.nc">
        <documentation loc="91:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x10b7fa0a8" loc="78:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Send.nc">
        <documentation loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10b7e1e08" loc="78:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x10b7f95c8" loc="89:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Send.nc">
        <documentation loc="80:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10b7f9020" loc="89:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x10b7f9348" loc="89:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x10b84f2a0" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10b851b70" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x10b84f020" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x10b852458" loc="15:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x10b8512a0" loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10b852c70" loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x10b851020" loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/StdControl.nc">
      <documentation loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x10b88ce30" loc="74:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/StdControl.nc">
        <documentation loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x10b889600" loc="84:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/StdControl.nc">
        <documentation loc="76:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFlush.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x10b886328" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFlush.nc">
        <documentation loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x10b88bbc0" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFlush.nc">
        <documentation loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x10b8751d8" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x10b874528" loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x10b871020" loc="83:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="76:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x10b872d60" loc="83:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x10b874d40" loc="68:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="63:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x10b875cc8" loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x10b875a58" loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x10b871818" loc="89:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="85:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x10b8725b8" loc="74:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SendBytePacket.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x10b87c020" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x10b87c8d8" loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x10b87d668" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x10b87d3f8" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x10b87b430" loc="80:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x10b87b1c0" loc="80:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x10b878020" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x10b878bc8" loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x10b878958" loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x10b877640" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x10b8773d0" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
      <documentation loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x10b9a2b50" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
        <documentation loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x10b9a25b0" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x10b9a28d0" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x10b99c4e0" loc="79:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
        <documentation loc="74:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x10b99c270" loc="79:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x10b99b2a0" loc="90:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
        <documentation loc="81:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x10b99cc58" loc="90:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x10b99b020" loc="90:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x10b99e258" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
        <documentation loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x10b99aa38" loc="99:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
        <documentation loc="92:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x10b99a160" loc="99:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x10b99a480" loc="99:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x10b99a7a8" loc="99:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x10b99ead0" loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
        <documentation loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x10b9a0358" loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
        <documentation loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x10b99f9f8" loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x10b99fd18" loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x10b9a00c8" loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartByte.nc">
      <documentation loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x10b9ba8f8" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartByte.nc">
        <documentation loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x10b9ba688" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x10b9b96f8" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartByte.nc">
        <documentation loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x10b9b9140" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x10b9b9478" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Counter.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x10b9d2020" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x10b9d2020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x10b9d2250" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10b9d2250"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x10b9d2ae8" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Counter.nc">
        <documentation loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10b9d2250"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x10b9d0b18" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Counter.nc">
        <documentation loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x10b9d0328" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Counter.nc">
        <documentation loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x10b9cf258" loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Counter.nc">
        <documentation loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Uart" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128Uart.nc">
      <documentation loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128Uart.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x10b9e3a08" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x10b9e4b80" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0x10b9df0a8" loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x10b9e0df8" loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x10b9e00d8" loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x10b9e7cb0" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x10b9e4468" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x10b9e3328" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxEmpty" ref="0x10b9e1110" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x10b9e19c8" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x10b9e1758" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x10b9e0788" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl16" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
      <documentation loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <short>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 16-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControlC" ref="0x10bacb8e0" loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x10bac9c70" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0x10bacea60" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x10bac7d90" loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x10bac7630" loc="68:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x10bac73c0" loc="68:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0x10bacabb8" loc="63:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x10baca948" loc="63:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x10bac6750" loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x10bac64e0" loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0x10bacb1d8" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlC" ref="0x10bac9510" loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x10bac92a0" loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0x10baca290" loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x10baca020" loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl16.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Capture" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <short>&#10; HPL Interface to Atmega128 capture capabilities.</short>
        <long>&#10; HPL Interface to Atmega128 capture capabilities.&#10; @param size_type Integer type of capture register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x10bacc4e0" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <interfacedef-ref qname="HplAtm128Capture"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10bacc4e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setEdge" ref="0x10bae1020" loc="79:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="75:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Sets the capture edge.</short>
          <long> &#10; Sets the capture edge.&#10; @param up   TRUE = detect rising edge, FALSE = detect falling edge&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="up" ref="0x10babfc98" loc="79:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x10bac0e18" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="63:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Did a capture interrupt occur?&#10; </short>
          <long> &#10; Did a capture interrupt occur?&#10; @return TRUE if capture triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x10baccd98" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Get the time to be captured.</short>
          <long> &#10; Get the time to be captured.&#10; @return  the capture time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10bacc4e0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x10bac1108" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Signalled on capture interrupt.</short>
          <long> &#10; Signalled on capture interrupt.&#10; @param t     the time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10bacc4e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x10bac3e48" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10bacc4e0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x10bac1848" loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Clear the capture interrupt flag.</short>
          <long> Clear the capture interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x10babf5c0" loc="73:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Is capture interrupt on? &#10; </short>
          <long> &#10; Is capture interrupt on? &#10; @return TRUE if capture enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x10bac3710" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Set the time to be captured.</short>
          <long> &#10; Set the time to be captured.&#10; @param t     the time of the next capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10bacc4e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x10bac34a0" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10bacc4e0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x10bac0020" loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Enable the capture interrupt.</short>
          <long> Enable the capture interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x10bac0708" loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Turn off capture interrupts.</short>
          <long> Turn off capture interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x10badc158" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10badc158"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x10bad9788" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x10badbab8" loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x10badca10" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10badc158"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x10bada258" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x10bad7020" loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x10badb378" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10badc158"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x10badb108" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10badc158"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x10bada950" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x10bad9070" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x10bab5418" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x10bab5418"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x10bab0900" loc="89:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="88:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x10bab1a40" loc="78:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x10bab5cb8" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x10bab5418"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x10baaf290" loc="95:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="91:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x10baaf020" loc="95:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x10baafa10" loc="101:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x10bab34c0" loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x10bab4d50" loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x10bab01d8" loc="84:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x10bab4630" loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x10bab5418"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x10bab43c0" loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x10bab5418"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x10bab3bb8" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="68:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x10bab1328" loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Queue" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Queue.nc">
      <documentation loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Queue.nc">
        <short>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type.</short>
        <long>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type. The queue has a maximum size.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x10bc53020" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Queue.nc">
          <interfacedef-ref qname="Queue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x10bc53020"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="head" ref="0x10bc51020" loc="73:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Queue.nc">
        <documentation loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Queue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x10bc53020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0x10bc4f8e8" loc="90:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Queue.nc">
        <documentation loc="83:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Queue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x10bc53020"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x10bc4f678" loc="90:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Queue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x10bc53020"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x10b0f6508"/>
              <value-structured>
                <type-tag size="I:2" alignment="I:1"><attribute-ref name="one" ref="0x10b0f6508"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="element" ref="0x10bc4d7b0" loc="101:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Queue.nc">
        <documentation loc="92:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Queue.nc">
          <short>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail.</short>
          <long>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail. &#10; If the element requested is larger than the current queue size,&#10; the return value is undefined.&#10;&#10; @param index - the index of the element to return&#10; @return 't ONE' the requested element in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x10bc53020"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x10bc4d540" loc="101:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Queue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x10bc527b0" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Queue.nc">
        <documentation loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Queue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x10bc51b40" loc="81:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Queue.nc">
        <documentation loc="75:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Queue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x10bc53020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x10bc53848" loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Queue.nc">
        <documentation loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x10bc52020" loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Queue.nc">
        <documentation loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Queue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x10bcec820" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x10bcec820"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x10bce3110" loc="125:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="121:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x10bce8ca0" loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x10bce58d0" loc="103:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="89:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x10bce5338" loc="103:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x10bce5650" loc="103:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x10bce7bd8" loc="87:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="83:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x10bce2070" loc="140:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="135:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x10bce3830" loc="133:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="127:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x10bce7440" loc="81:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="75:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x10bce9338" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x10bce90c8" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x10bce47c8" loc="118:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="105:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x10bce4230" loc="118:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x10bce4548" loc="118:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x10bce9d78" loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x10bce9b08" loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x10bce8600" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketField" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketField.nc">
      <parameters>
        <typedef name="value_type" ref="0x10bcfb020" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketField.nc">
          <interfacedef-ref qname="PacketField"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x10bcfb020"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="clear" ref="0x10bcf8020" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketField.nc">
        <documentation loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketField.nc">
          <short>&#10; Clears the isSet flag.</short>
          <long>&#10; Clears the isSet flag.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bcfad40" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x10bcfa5b8" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketField.nc">
        <documentation loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketField.nc">
          <short>&#10; Returns the stored value of this field in the message.</short>
          <long>&#10; Returns the stored value of this field in the message. If the&#10; value is not set, then the returned value is undefined.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x10bcfb020"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bcfa348" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSet" ref="0x10bcfbb30" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketField.nc">
        <documentation loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketField.nc">
          <short>&#10; Returns TRUE if the value is set for this message.</short>
          <long>&#10; Returns TRUE if the value is set for this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bcfb8c0" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x10bcf8cd8" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketField.nc">
        <documentation loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketField.nc">
          <short>&#10; Sets the isSet false to TRUE and the time stamp value to the &#10; specified value.</short>
          <long>&#10; Sets the isSet false to TRUE and the time stamp value to the &#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketField"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x10bcfb020"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bcf8710" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketField.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x10bcf8a58" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketField.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="value_type" scoped="" ref="0x10bcfb020"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/LocalTime.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x10bd6f568" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x10bd6f568"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x10bd6fdf8" loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/LocalTime.nc">
        <documentation loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x10bd98ac8" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x10bd98ac8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x10bd98cf8" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10bd98cf8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x10bd917a0" loc="98:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
        <documentation loc="94:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10bd98cf8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x10bd94770" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
        <documentation loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x10bd93d70" loc="92:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
        <documentation loc="79:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10bd98cf8"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10bd98cf8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x10bd937d0" loc="92:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10bd98cf8"/></type-var>
          </variable>
          <variable name="dt" ref="0x10bd93af0" loc="92:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10bd98cf8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x10bd93020" loc="77:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
        <documentation loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x10bd90020" loc="105:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
        <documentation loc="100:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10bd98cf8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x10bd95810" loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
        <documentation loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10bd98cf8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x10bd955a0" loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10bd98cf8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x10bd94020" loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
        <documentation loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getInterruptFlag" ref="0x10bdc9b40" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="68:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x10bdcaa30" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0x10bd9c7a0" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x10bdc93e0" loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x10bdc9170" loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0x10bdca2d0" loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x10bdca060" loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x10bdc74e8" loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x10bdc7278" loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0x10bd9b020" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0x10bd9b948" loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x10bd9b6d8" loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
      <documentation loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="compareBBusy" ref="0x10bdbe9a8" loc="81:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="77:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; @return TRUE if OCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer2Asynchronous" ref="0x10bdc0a60" loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 2 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlABusy" ref="0x10bdbf1d8" loc="63:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; @return TRUE if TCCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlBBusy" ref="0x10bdbf9a8" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; @return TRUE if TCCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x10bdbc1d8" loc="87:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="83:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; @return TRUE if TCNT2 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareABusy" ref="0x10bdbe1d8" loc="75:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; @return TRUE if OCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x10bdc3890" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer2 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x10b4c4978"/>
            <typename><typedef-ref name="Atm128_ASSR_t" ref="0x10b4c4d80"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x10bdc0290" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer2 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x10b4c4978"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0x10b4c4d80"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x10bdc0020" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x10b4c4978"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0x10b4c4d80"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeStamp" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketTimeStamp.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x10bf64518" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x10bf64518"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x10bf64748" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10bf64748"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="timestamp" ref="0x10bf54408" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to get timestamp from.&#10;&#10; Return the time stamp for the given message. Please check with the&#10; isValid command if this value can be relied upon. If this command is&#10; called after transmission, then the transmit time of the packet&#10; is returned (the time when the frame synchronization byte was&#10; transmitted). If this command is called after the message is received,&#10; the tne receive time of the message is returned. It is recommended that&#10; the timestamp command be called only from the receive or sendDone event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10bf64748"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bf54198" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x10bf534e8" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to FALSE.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bf53278" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isValid" ref="0x10bf55290" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to examine.&#10;&#10; Returns TRUE if the time stamp of the message is valid. Under special&#10; circumstances the radio chip might not be able to correctly assign a&#10; precise time value to an incoming packet (e.g. under very heavy traffic&#10; multiple interrupts can occur before they could be serviced, and even&#10; if capture registers are used, it is not possible to get the time stamp&#10; for the first or last unserviced event), in which case the time stamp&#10; value should not be used. It is recommended that the isValid command be&#10; called from the receive or sendDone event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bf55020" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x10bf51700" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to TRUE and the time stamp value to the&#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10bf64748"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bf51140" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x10bf51480" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketTimeStamp.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10bf64748"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendNotifier" loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SendNotifier.nc">
      <documentation loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SendNotifier.nc">
        <short> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.</short>
        <long> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.  Other modules in the system can call back within this event&#10; to modify the packet's metadata. For example, we can setup a module&#10; in the system to make every CTP data packet send with low power listening&#10; enabled:&#10;&#10;   event void SendNotifier.aboutToSend[AM_COLLECTION_DATA](uint8_t dest,&#10;       message_t *msg) {&#10;     call LowPowerListening.setRxSleepInterval(msg, 512);&#10;   }&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="aboutToSend" ref="0x10bf33600" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SendNotifier.nc">
        <documentation loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SendNotifier.nc">
          <short>&#10; The system is about to send this message.</short>
          <long>&#10; The system is about to send this message. Fill in any last modifications&#10; and the message will be sent.&#10; &#10; @param dest The destination address of the messsage&#10; @param 'message_t* ONE msg' The message about to be transmitted&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendNotifier"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x10bf33020" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SendNotifier.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x10bf33380" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SendNotifier.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/LowPowerListening.nc">
      <documentation loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author Jonathan Hui&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="setRemoteWakeupInterval" ref="0x10bf62b08" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/LowPowerListening.nc">
        <documentation loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param intervalMs The receiving node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bf62520" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="intervalMs" ref="0x10bf62888" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemoteWakeupInterval" ref="0x10bf60bd8" loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/LowPowerListening.nc">
        <documentation loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's wakeup interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bf60968" loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalWakeupInterval" ref="0x10bf63d70" loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/LowPowerListening.nc">
        <documentation loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalWakeupInterval" ref="0x10bf63418" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/LowPowerListening.nc">
        <documentation loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this this node's radio wakeup interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio wakeup interval, in milliseconds. After&#10; each interval, the node will wakeup and check for radio activity.&#10;&#10; Note: The wakeup interval can be set to 0 to indicate that the radio&#10; should stay on all the time but in order to get a startDone this&#10; should only be done when the duty-cycling is off (after a stopDone).&#10;&#10; @param intervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="intervalMs" ref="0x10bf631a8" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketLink" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketLink.nc">
      <documentation loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketLink.nc">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRetryDelay" ref="0x10bf59c40" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketLink.nc">
        <documentation loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the delay between retry attempts in ms for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bf599d0" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetries" ref="0x10bf65de0" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketLink.nc">
        <documentation loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketLink.nc">
          <short>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; </short>
          <long>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; @param 'message_t* ONE msg'&#10; @param maxRetries the maximum number of attempts to deliver&#10;     the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bf657f8" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="maxRetries" ref="0x10bf65b60" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRetries" ref="0x10bf5ccd8" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketLink.nc">
        <documentation loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketLink.nc">
          <short> &#10; </short>
          <long> &#10; @param 'message_t* ONE msg'&#10; @return the maximum number of retry attempts for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bf5ca68" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetryDelay" ref="0x10bf5c2a0" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketLink.nc">
        <documentation loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketLink.nc">
          <short>&#10; Set a delay between each retry attempt&#10; </short>
          <long>&#10; Set a delay between each retry attempt&#10; @param msg&#10; @param retryDelay the delay betweeen retry attempts, in milliseconds&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bf5db48" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="retryDelay" ref="0x10bf5c020" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasDelivered" ref="0x10bf58b70" loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketLink.nc">
        <documentation loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return TRUE if the message was delivered.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bf58900" loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioChannel" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioChannel.nc">
      <function event="" provided="0" name="setChannelDone" ref="0x10bf71020" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioChannel.nc">
        <documentation loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioChannel.nc">
          <short>&#10; This event is signaled exactly once for each sucessfully posted state &#10; setChannel command when it is completed.</short>
          <long>&#10; This event is signaled exactly once for each sucessfully posted state &#10; setChannel command when it is completed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x10bf737a8" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioChannel.nc">
        <documentation loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioChannel.nc">
          <short>&#10; Sets the current channel.</short>
          <long>&#10; Sets the current channel. Returns EBUSY if the stack is unable&#10; to change the channel this time (some other operation is in progress),&#10; EALREADY if the selected channel is already set, SUCCESS otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x10bf73538" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioChannel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x10bf717f8" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioChannel.nc">
        <documentation loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioChannel.nc">
          <short>&#10; Returns the currently selected channel.</short>
          <long>&#10; Returns the currently selected channel.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioChannel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Resource.nc">
      <documentation loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2007-04-15 20:05:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x10bfb8780" loc="110:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Resource.nc">
        <documentation loc="94:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x10bfba760" loc="87:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Resource.nc">
        <documentation loc="80:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x10bf8cdd0" loc="78:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Resource.nc">
        <documentation loc="68:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x10bfb8020" loc="92:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Resource.nc">
        <documentation loc="89:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x10bfb71d8" loc="118:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Resource.nc">
        <documentation loc="112:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154Packet" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Packet.nc">
      <function command="" provided="0" name="source" ref="0x10bfb45b8" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x10bf8b6a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfb4348" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x10bfb5258" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x10bf8b6a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x10bfb5c08" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_saddr_t" ref="0x10bf8b6a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfb5998" loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x10bfb1020" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x10bf8b6a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfb2938" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x10bfb2ca8" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x10bf8b6a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x10bfb22a0" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x10bf8b6a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfb4c80" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x10bfb2020" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x10bf8b6a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="pan" ref="0x10bfb02d0" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x10bf8b228"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfb0060" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPan" ref="0x10bfae020" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_panid_t" ref="0x10bf8b228"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfb0948" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x10bfb0ca8" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Packet.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_panid_t" ref="0x10bf8b228"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x10bfb1940" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfb16d0" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localPan" ref="0x10bfae728" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Packet.nc">
        <interfacedef-ref qname="Ieee154Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="ieee154_panid_t" ref="0x10bf8b228"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154Send" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Send.nc">
      <function command="" provided="0" name="send" ref="0x10bf8adc0" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Send.nc">
        <documentation loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param msg    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x10bf8b6a0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x10bf8a4c0" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="ieee154_saddr_t" ref="0x10bf8b6a0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x10bf8a820" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x10bf8ab30" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x10bf852d8" loc="111:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Send.nc">
        <documentation loc="102:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  msg    the packet&#10; @return        the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bf86be8" loc="111:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x10bf85020" loc="111:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x10bf863e0" loc="99:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Send.nc">
        <documentation loc="89:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x10bf89b98" loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Send.nc">
        <documentation loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  msg     the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bf89928" loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x10bf88ab0" loc="86:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Send.nc">
        <documentation loc="74:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  msg   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bf88508" loc="86:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x10bf88830" loc="86:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Ieee154Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="DummyConfig" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyConfig.nc">
      <function command="" provided="0" name="nothing" ref="0x10bfe3930" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyConfig.nc">
        <documentation loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/DummyConfig.nc">
          <short>&#10; We need to put something here, but this is not going to get called&#10;</short>
        </documentation>
        <interfacedef-ref qname="DummyConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TrafficMonitorConfig" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TrafficMonitorConfig.nc">
      <function event="" provided="0" name="getNeighborAverage" ref="0x10bfe93e0" loc="68:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TrafficMonitorConfig.nc">
        <documentation loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TrafficMonitorConfig.nc">
          <short>&#10; Returns the averaged (exponential decay) number of neighbors &#10; whose messages this component receives during one update period.</short>
          <long>&#10; Returns the averaged (exponential decay) number of neighbors &#10; whose messages this component receives during one update period.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="channelError" ref="0x10bfeca48" loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TrafficMonitorConfig.nc">
        <documentation loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TrafficMonitorConfig.nc">
          <short>&#10; This event should be fired if we notice some anomalies in the operation&#10; of the channel, such as not receiving acknowledgements, missing&#10; sequence numbers or packets with corrupted CRC.</short>
          <long>&#10; This event should be fired if we notice some anomalies in the operation&#10; of the channel, such as not receiving acknowledgements, missing&#10; sequence numbers or packets with corrupted CRC.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUpdatePeriod" ref="0x10bff4d58" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TrafficMonitorConfig.nc">
        <documentation loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TrafficMonitorConfig.nc">
          <short>&#10; Returns the frequency (in milliseconds) when the traffic averages&#10; should be updated.</short>
          <long>&#10; Returns the frequency (in milliseconds) when the traffic averages&#10; should be updated. &#10;</long>
        </documentation>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannelTime" ref="0x10bfed820" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TrafficMonitorConfig.nc">
        <documentation loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TrafficMonitorConfig.nc">
          <short>&#10; Returns the amount of time this message has occupied the channel.</short>
          <long>&#10; Returns the amount of time this message has occupied the channel.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfed5b0" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TrafficMonitorConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="getErrorAverage" ref="0x10bfe9c40" loc="73:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TrafficMonitorConfig.nc">
        <documentation loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TrafficMonitorConfig.nc">
          <short>&#10; Returns the averaged error events during one update period.</short>
        </documentation>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="getTransmitAverage" ref="0x10bfea378" loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TrafficMonitorConfig.nc">
        <documentation loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TrafficMonitorConfig.nc">
          <short>&#10; Returns the averaged (exponential decay) transmit channel time &#10; during one update period.</short>
        </documentation>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSender" ref="0x10bfec2d0" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TrafficMonitorConfig.nc">
        <documentation loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TrafficMonitorConfig.nc">
          <short>&#10; Returns the sender address of the message so we can calculate the&#10; average number of neighbors that send messages per update period.</short>
        </documentation>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfec060" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TrafficMonitorConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="getReceiveAverage" ref="0x10bfeab50" loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TrafficMonitorConfig.nc">
        <documentation loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/TrafficMonitorConfig.nc">
          <short>&#10; Returns the averaged (exponential decay) receive channel time &#10; during one update period.</short>
          <long>&#10; Returns the averaged (exponential decay) receive channel time &#10; during one update period.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TrafficMonitorConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageConfig" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
      <function command="" provided="0" name="group" ref="0x10bfd96e0" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
        <documentation loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.group *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x10b789b50"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfd9470" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="checkFrame" ref="0x10c011d20" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
        <documentation loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
          <short>&#10; Check if the packet is properly formatted, and if the user &#10; forgot to call Packet.clear then format it properly.</short>
          <long>&#10; Check if the packet is properly formatted, and if the user &#10; forgot to call Packet.clear then format it properly.&#10; Return SUCCESS if the frame is now properly set up, &#10; or FAIL of the send operation should be aborted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c011ab0" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x10bfda0a8" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
        <documentation loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.source *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfdcdd8" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x10bfe79c0" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
        <documentation loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.destination *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfe7750" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x10bfdad38" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
        <documentation loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setSource *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfda780" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x10bfdaab8" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x10bfdc6b8" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
        <documentation loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setDestination *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfdc100" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x10bfdc438" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x10c011388" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
        <documentation loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
          <short> Same as AMPacket.setGroup *</short>
        </documentation>
        <interfacedef-ref qname="ActiveMessageConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x10b789b50"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfd9db0" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x10c011108" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/ActiveMessageConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x10b789b50"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SlottedCollisionConfig" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SlottedCollisionConfig.nc">
      <function command="" provided="0" name="getInitialDelay" ref="0x10bfe2360" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SlottedCollisionConfig.nc">
        <documentation loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SlottedCollisionConfig.nc">
          <short>&#10; This command should return the approximate transmit delay between&#10; setting an alarm, waiting for the fire event, calling send and&#10; obtaining the timestamp for the transmitted message.</short>
          <long>&#10; This command should return the approximate transmit delay between&#10; setting an alarm, waiting for the fire event, calling send and&#10; obtaining the timestamp for the transmitted message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getScheduleExponent" ref="0x10bfe2c58" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SlottedCollisionConfig.nc">
        <documentation loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SlottedCollisionConfig.nc">
          <short>&#10; Must return a binary exponent so that the collision avoidance layer&#10; can assign slots in the range of [0, 1 &#60;&#60; exponent) of size collision&#10; window.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getCollisionWindowLength" ref="0x10bfdfe10" loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SlottedCollisionConfig.nc">
        <documentation loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SlottedCollisionConfig.nc">
          <short>&#10; Returns the size of the collision window for this received message.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfdfba0" loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitTime" ref="0x10bfe1708" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SlottedCollisionConfig.nc">
        <documentation loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SlottedCollisionConfig.nc">
          <short>&#10; This command must return the time when the message was transmitted.</short>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfe1498" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCollisionWindowStart" ref="0x10bfdf290" loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SlottedCollisionConfig.nc">
        <documentation loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SlottedCollisionConfig.nc">
          <short>&#10; Returns the start of the collision window for this received message,&#10; so transmit times in this range would be considered possible collisions.</short>
          <long>&#10; Returns the start of the collision window for this received message,&#10; so transmit times in this range would be considered possible collisions.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SlottedCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfdf020" loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SlottedCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioAlarm" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarm.nc">
      <function event="" provided="0" name="fired" ref="0x10c02cc10" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarm.nc">
        <documentation loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarm.nc">
          <short>&#10; This event is fired when the specified timeout period expires.</short>
          <long>&#10; This event is fired when the specified timeout period expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="wait" ref="0x10c02ed98" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarm.nc">
        <documentation loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarm.nc">
          <short>&#10; Waits till the specified timeout period expires.</short>
          <long>&#10; Waits till the specified timeout period expires. The alarm must be free.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="timeout" ref="0x10c02eb28" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarm.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x10c02c508" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarm.nc">
        <documentation loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarm.nc">
          <short>&#10; Cancels the running alarm.</short>
          <long>&#10; Cancels the running alarm. The alarm must be pending.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isFree" ref="0x10c02e360" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarm.nc">
        <documentation loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarm.nc">
          <short>&#10; Returns TRUE if the alarm is free and ready to be used.</short>
          <long>&#10; Returns TRUE if the alarm is free and ready to be used. Once the alarm&#10; is free, it cannot become nonfree in the same tasklet block. Note,&#10; if the alarm is currently set (even if for ourselves) then it is not free.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNow" ref="0x10c02b3e0" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarm.nc">
        <documentation loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioAlarm.nc">
          <short>&#10; Returns the current time as measured by the radio stack.</short>
          <long>&#10; Returns the current time as measured by the radio stack.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioAlarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioPacket" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioPacket.nc">
      <function command="" provided="0" name="clear" ref="0x10c025520" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioPacket.nc">
        <documentation loc="56:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioPacket.nc">
          <short>&#10; Clears all metadata and sets all default values in the headers.</short>
          <long>&#10; Clears all metadata and sets all default values in the headers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c0252b0" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x10c029af0" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioPacket.nc">
        <documentation loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioPacket.nc">
          <short>&#10; Returns the length of the payload.</short>
          <long>&#10; Returns the length of the payload. The payload starts right&#10; after th header.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c029880" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x10c0260d8" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioPacket.nc">
        <documentation loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioPacket.nc">
          <short>&#10; Returns the maximum length that can be set for this message.</short>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x10c0278f8" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioPacket.nc">
        <documentation loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioPacket.nc">
          <short>&#10; Sets the length of the payload.</short>
          <long>&#10; Sets the length of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c027348" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x10c027678" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="headerLength" ref="0x10c029020" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioPacket.nc">
        <documentation loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioPacket.nc">
          <short>&#10; This command returns the length of the header.</short>
          <long>&#10; This command returns the length of the header. The header&#10; starts at the first byte of the message_t structure &#10; (some layers may add dummy bytes to allign the payload to&#10; the msg->data section).&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bff6d70" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="metadataLength" ref="0x10c026af0" loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioPacket.nc">
        <documentation loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioPacket.nc">
          <short>&#10; Returns the length of the metadata section.</short>
          <long>&#10; Returns the length of the metadata section. The metadata section&#10; is at the very end of the message_t structure and grows downwards.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c026880" loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RF230DriverConfig" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverConfig.nc">
      <function command="" provided="0" name="maxPayloadLength" ref="0x10bfc9328" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverConfig.nc">
        <documentation loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the maximum length of the PHY payload including the &#10; length field but not counting the FCF field.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="headerLength" ref="0x10bfccb58" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverConfig.nc">
        <documentation loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the length of a dummy header to align the payload properly.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfcc8e8" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="metadataLength" ref="0x10bfc9d70" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverConfig.nc">
        <documentation loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns the length of a dummy metadata section to align the&#10; metadata section properly.</short>
          <long>&#10; Returns the length of a dummy metadata section to align the&#10; metadata section properly.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfc9b00" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="headerPreloadLength" ref="0x10bfc75d0" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverConfig.nc">
        <documentation loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverConfig.nc">
          <short>&#10; Gets the number of bytes we should read before the RadioReceive.header&#10; event is fired.</short>
          <long>&#10; Gets the number of bytes we should read before the RadioReceive.header&#10; event is fired. If the length of the packet is less than this amount, &#10; then that event is fired earlier. The header length must be at least one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresRssiCca" ref="0x10bfc6108" loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverConfig.nc">
        <documentation loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverConfig.nc">
          <short>&#10; Returns TRUE if before sending this message we should make sure that&#10; the channel is clear via a very basic (and quick) RSSI check.</short>
        </documentation>
        <interfacedef-ref qname="RF230DriverConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfc7e68" loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/rf230/RF230DriverConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CsmaConfig" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/CsmaConfig.nc">
      <function command="" provided="0" name="requiresSoftwareCCA" ref="0x10bfc5998" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/CsmaConfig.nc">
        <documentation loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/CsmaConfig.nc">
          <short>&#10; This command is called when the message is transmitted to&#10; check if it needs software clear channel assesment.</short>
          <long>&#10; This command is called when the message is transmitted to&#10; check if it needs software clear channel assesment.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfc5728" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/CsmaConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SoftwareAckConfig" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
      <function command="" provided="0" name="reportChannelError" ref="0x10bfbed68" loc="75:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
        <documentation loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
          <short>&#10; This command is called when a sent packet did not receive an&#10; acknowledgement.</short>
          <long>&#10; This command is called when a sent packet did not receive an&#10; acknowledgement.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckPacket" ref="0x10bfbe600" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
        <documentation loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
          <short>&#10; Creates an acknowledgement packet for the given data packet.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x10bfbe020" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x10bfbe380" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckWait" ref="0x10bfc2290" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
        <documentation loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the layer should wait for a software acknowledgement&#10; to be received after this packet was transmitted.</short>
          <long>&#10; Returns TRUE if the layer should wait for a software acknowledgement&#10; to be received after this packet was transmitted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfc2020" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAckPacket" ref="0x10bfc2d30" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
        <documentation loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the received packet is an acknowledgement packet.</short>
          <long>&#10; Returns TRUE if the received packet is an acknowledgement packet.&#10; The AckedSend layer will filter out all received acknowledgement&#10; packets and uses  only the matching one for the acknowledgement.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfc2ac0" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verifyAckPacket" ref="0x10bfc1be0" loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
        <documentation loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet.</short>
          <long>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet. The acknowledgement packect was already verified &#10; to be a valid acknowledgement packet via the isAckPacket command.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x10bfc1600" loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x10bfc1960" loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAckTimeout" ref="0x10bfcba30" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
        <documentation loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns the acknowledgement timeout (in the radio clock units),&#10; in which a sent packet must be acknowledged.</short>
          <long>&#10; Returns the acknowledgement timeout (in the radio clock units),&#10; in which a sent packet must be acknowledged.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAckRequired" ref="0x10bfc47f0" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
        <documentation loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
          <short>&#10; Sets the flag in the message indicating to the receiver whether&#10; the message should be acknowledged.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfc4278" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x10bfc4570" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckReply" ref="0x10bfc0718" loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
        <documentation loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
          <short>&#10; Returns TRUE if the received packet needs software acknowledgements&#10; to be sent back to the sender.</short>
        </documentation>
        <interfacedef-ref qname="SoftwareAckConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfc04a8" loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/SoftwareAckConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ieee154PacketLayer" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
      <documentation loc="27:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <short>&#10; This interface encapsulates IEEE 802.15.4 intrapan data frames with &#10; 16-bit destination pan, source and destination addresses.</short>
        <long>&#10; This interface encapsulates IEEE 802.15.4 intrapan data frames with &#10; 16-bit destination pan, source and destination addresses. It also &#10; supports 6LowPan interoperability mode, and acknowledgement frames.&#10; Note, that this interface does not support the CRC-16 value, which&#10; should be verified before the data can be trusted.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getDestPan" ref="0x10bfffa28" loc="120:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="116:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; returns the destination PAN id, values &#60;= 255 are tinyos groups,&#10; valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfff7b8" loc="120:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckReply" ref="0x10bff8d78" loc="157:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="153:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destionation address is this node.</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bff8b08" loc="157:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setFCF" ref="0x10c00a020" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the frame control field.</short>
          <long>&#10; Sets the frame control field. This method should not be used, &#10; createDataFrame and createAckFrame should be used instead.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c00ca08" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="fcf" ref="0x10c00cd28" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAckFrame" ref="0x10c008020" loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the message is an acknowledgement frame supported&#10; by this interface (based on the value of the FCF).</short>
          <long>&#10; Returns TRUE if the message is an acknowledgement frame supported&#10; by this interface (based on the value of the FCF).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c009ce8" loc="64:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDSN" ref="0x10c000290" loc="109:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="106:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the data sequence number&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c000020" loc="109:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createDataFrame" ref="0x10c0094e8" loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the FCF to create a data frame supported by this interface.</short>
          <long>&#10; Sets the FCF to create a data frame supported by this interface.&#10; You may call setAckRequired and setFramePending commands after this.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c009278" loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDSN" ref="0x10bfff040" loc="114:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="111:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the data sequence number&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c000a88" loc="114:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dsn" ref="0x10c000d98" loc="114:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckReply" ref="0x10c0078b8" loc="77:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Creates an acknowledgement packet for the given data packet.</short>
          <long>&#10; Creates an acknowledgement packet for the given data packet.&#10; This also sets the DSN value. The data message must be a &#10; data frame, the ack message will be overwritten.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x10c0072d8" loc="77:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x10c007638" loc="77:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSrcAddr" ref="0x10bff9748" loc="145:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="142:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the source address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bff9198" loc="145:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x10bff94c8" loc="145:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSrcAddr" ref="0x10bffba20" loc="140:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="137:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the source address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bffb7b0" loc="140:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isDataFrame" ref="0x10c00aa60" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the message is a data frame supported by &#10; this interface (based on the value of the FCF).</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c00a7f0" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="verifyAckReply" ref="0x10c005720" loc="83:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="79:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet.</short>
          <long>&#10; Returns TRUE if the acknowledgement packet corresponds to the&#10; data packet. The data message must be a data packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x10c005140" loc="83:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x10c0054a0" loc="83:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAckRequired" ref="0x10c004290" loc="88:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="85:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the ACK required field is set in the FCF.</short>
          <long>&#10; Returns TRUE if the ACK required field is set in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c004020" loc="88:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="requiresAckWait" ref="0x10bff8290" loc="151:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="147:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destination address is not the broadcast address.</short>
          <long>&#10; Returns TRUE if the packet is a data packet, the ACK_REQ field&#10; is set and the destination address is not the broadcast address.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bff8020" loc="151:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="createAckFrame" ref="0x10c008aa8" loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the FCF to create an acknowledgement frame supported by&#10; this interface.</short>
          <long>&#10; Sets the FCF to create an acknowledgement frame supported by&#10; this interface. You may call setFramePending after this.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c008838" loc="70:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setFramePending" ref="0x10c001818" loc="104:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="101:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the frame pending field in the FCF.</short>
          <long>&#10; Sets the frame pending field in the FCF.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c001278" loc="104:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pending" ref="0x10c001598" loc="104:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestAddr" ref="0x10bffb020" loc="135:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="132:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the destination address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bffc9d0" loc="135:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x10bffcd00" loc="135:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestPan" ref="0x10bffd798" loc="125:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="122:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the destination PAN id, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bffd1f8" loc="125:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="pan" ref="0x10bffd518" loc="125:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setAckRequired" ref="0x10c003020" loc="94:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="90:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Sets the ACK required field in the FCF, should never be set&#10; for acknowledgement frames.</short>
          <long>&#10; Sets the ACK required field in the FCF, should never be set&#10; for acknowledgement frames.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c004a30" loc="94:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x10c004d28" loc="94:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getFCF" ref="0x10c00c290" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the frame control field.</short>
          <long>&#10; Returns the frame control field. This method should not be used, &#10; isDataFrame and isAckFrame should be used instead.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c00c020" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDestAddr" ref="0x10bffc290" loc="130:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="127:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns the destination address, valid only for data frames&#10;</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bffc020" loc="130:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getFramePending" ref="0x10c003aa8" loc="99:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
        <documentation loc="96:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
          <short>&#10; Returns TRUE if the frame pending field is set in the FCF.</short>
        </documentation>
        <interfacedef-ref qname="Ieee154PacketLayer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c003838" loc="99:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/Ieee154PacketLayer.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UniqueConfig" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueConfig.nc">
      <function command="" provided="0" name="setSequenceNumber" ref="0x10bff27a8" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueConfig.nc">
        <documentation loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueConfig.nc">
          <short>&#10; Sets the sequence number of the packet.</short>
          <long>&#10; Sets the sequence number of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bff21f8" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="number" ref="0x10bff2528" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueConfig.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reportChannelError" ref="0x10bff0020" loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueConfig.nc">
        <documentation loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueConfig.nc">
          <short>&#10; This command is called when the unqiue layer detects a missing (jump &#10; in the data sequence number) or a duplicate packet.</short>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSequenceNumber" ref="0x10bff3020" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueConfig.nc">
        <documentation loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueConfig.nc">
          <short>&#10; Returns the sequence number of the packet.</short>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfcac58" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSender" ref="0x10bff3a10" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueConfig.nc">
        <documentation loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueConfig.nc">
          <short>&#10; Returns the sender of the packet.</short>
          <long>&#10; Returns the sender of the packet. &#10;</long>
        </documentation>
        <interfacedef-ref qname="UniqueConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bff37a0" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/UniqueConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RandomCollisionConfig" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionConfig.nc">
      <function command="" provided="0" name="getCongestionBackoff" ref="0x10bfe58c0" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionConfig.nc">
        <documentation loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the amount of maximum backoff when there is congestion&#10; (the channel was busy for the first try)&#10;</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfe5650" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getInitialBackoff" ref="0x10bfeedc8" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionConfig.nc">
        <documentation loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the initial amount of maximum backoff for this message.</short>
          <long>&#10; Returns the initial amount of maximum backoff for this message.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfeeb58" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMinimumBackoff" ref="0x10bfe40d8" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionConfig.nc">
        <documentation loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionConfig.nc">
          <short>&#10; Returns the minimum ticks before the message could be sent.</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitBarrier" ref="0x10bfe4b28" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionConfig.nc">
        <documentation loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionConfig.nc">
          <short>&#10; The provided message was just received, and this command should return &#10; the time till no transmission should be initiated.</short>
        </documentation>
        <interfacedef-ref qname="RandomCollisionConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10bfe48b8" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/layers/RandomCollisionConfig.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Tasklet" loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Tasklet.nc">
      <documentation loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Tasklet.nc">
        <short>&#10; This interface is useful in building state machines when the state &#10; transitions should be executed atomically but with interrupts enabled.</short>
        <long>&#10; This interface is useful in building state machines when the state &#10; transitions should be executed atomically but with interrupts enabled. &#10; All state transitions should take place in the run event handler or&#10; in blocks protected by the suspend and resume commands.&#10;</long>
      </documentation>
      <function command="" provided="0" name="schedule" ref="0x10c09fa18" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Tasklet.nc">
        <documentation loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Tasklet.nc">
          <short>&#10; Makes sure that the run event is called at least once more.</short>
          <long>&#10; Makes sure that the run event is called at least once more. If the &#10; run event is currently not executing, then it  is called immediately &#10; and this command returns only after the completion of the run event. &#10; If the run event is currently executed, then this method returns at &#10; once, and makes sure that the run event is called once more when &#10; it is finished. If this method is called from a task, then by the &#10; above rules, the run event will be called from a task as well.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="suspend" ref="0x10c09e328" loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Tasklet.nc">
        <documentation loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Tasklet.nc">
          <short>&#10; Enters a critical section of the code and meakes sure that the&#10; run event is not called while in this section.</short>
          <long>&#10; Enters a critical section of the code and meakes sure that the&#10; run event is not called while in this section. No long running&#10; computation should be called from the critical session, and&#10; in particular no user event should be fired. This call is only&#10; possible from task context, otherwise we cannot guarantee that&#10; the run event is not currently running. The suspend calls&#10; can be nested. It is very important that the same number of&#10; resume commands must be called in all control paths, e.g. be very&#10; careful with the return and break commands.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resume" ref="0x10c09ec40" loc="68:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Tasklet.nc">
        <documentation loc="63:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Tasklet.nc">
          <short>&#10; Leaves the critical section.</short>
          <long>&#10; Leaves the critical section. This call is conly possible from &#10; task context. If there were scheduled executions of the run&#10; event, then those will be called before this command returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="run" ref="0x10c09f328" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Tasklet.nc">
        <documentation loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Tasklet.nc">
          <short>&#10; This method is executed atomically.</short>
        </documentation>
        <interfacedef-ref qname="Tasklet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BareSend" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/BareSend.nc">
      <function command="" provided="0" name="send" ref="0x10c0b1020" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/BareSend.nc">
        <documentation loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/BareSend.nc">
          <short>&#10; Starts the transmission of the given message.</short>
          <long>&#10; Starts the transmission of the given message. This command must not&#10; be called while another send is in progress (so one must wait for the&#10; sendDone event). Returns EBUSY if a reception is in progress or for&#10; some other reason the request cannot be temporarily satisfied (e.g.&#10; the SPI bus access could not be acquired). In this case the send &#10; command could be retried from a task. Returns SUCCESS if the &#10; transmission could be started. In this case sendDone will be fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c0b4cb0" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x10c0afad0" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/BareSend.nc">
        <documentation loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/BareSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c0af860" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x10c0af020" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/BareSend.nc">
        <documentation loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/BareSend.nc">
          <short>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command.</short>
          <long>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command. If the returned error code is SUCCESS, then &#10; the message was sent (may not have been acknowledged), otherwise &#10; the message was not transmitted over the air.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c0b18e0" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/BareSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x10c0b1c08" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/BareSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BareReceive" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/BareReceive.nc">
      <function event="" provided="0" name="receive" ref="0x10c0ad520" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/BareReceive.nc">
        <documentation loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/BareReceive.nc">
          <short>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event.</short>
          <long>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event. The usual owner rules &#10; apply to the message pointers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BareReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
              <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c0ad278" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/BareReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x10c0d9800" loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x10c0d7710" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x10c0d7020" loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x10b789b50"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x10c0d9020" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x10b789b50"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x10c0dc9b0" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x10b789b50"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x10c0dcce8" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceRequested.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.4 $&#10; @date $Date: 2006-12-12 18:23:15 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x10c149880" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceRequested.nc">
        <documentation loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x10c147178" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceRequested.nc">
        <documentation loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceConfigure.nc">
      <documentation loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x10c1437d0" loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x10c143020" loc="49:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ArbiterInfo.nc">
      <documentation loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x10c14be50" loc="80:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="73:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x10c145688" loc="88:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="82:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceQueue.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2009-04-15 03:01:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x10c179620" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceQueue.nc">
        <documentation loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x10c142820"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x10c1793b0" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x10c142820"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x10c17b688" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceQueue.nc">
        <documentation loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x10c17a290" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceQueue.nc">
        <documentation loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x10c142820"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x10c17a020" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x10c142820"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x10c17ab30" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceQueue.nc">
        <documentation loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x10c142820"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioReceive" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioReceive.nc">
      <function event="" provided="0" name="receive" ref="0x10c297020" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioReceive.nc">
        <documentation loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioReceive.nc">
          <short>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event.</short>
          <long>&#10; Signals the reception of a message, but only for those messages for&#10; which SUCCESS was returned in the header event. The usual owner rules &#10; apply to the message pointers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
              <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c298c08" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="header" ref="0x10c2982d0" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioReceive.nc">
        <documentation loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioReceive.nc">
          <short>&#10; This event is fired when the header is received/downloaded and the &#10; higher layers are consulted whether it needs to be downloaded and &#10; further processed.</short>
          <long>&#10; This event is fired when the header is received/downloaded and the &#10; higher layers are consulted whether it needs to be downloaded and &#10; further processed. Return FALSE if the message should be discarded.&#10; In particular, the message buffer layer returns FALSE if there is&#10; no space for a new message, so this message will not get acknowledged.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c298060" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioReceive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="NeighborhoodFlag" loc="30:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodFlag.nc">
      <documentation loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodFlag.nc">
        <short>&#10; This interface provides one bit storage for each neighbor in a very&#10; fast and conveint way (without using shifts for example).</short>
        <long>&#10; This interface provides one bit storage for each neighbor in a very&#10; fast and conveint way (without using shifts for example). &#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x10c286020" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodFlag.nc">
        <documentation loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodFlag.nc">
          <short>&#10; Clears the flag for the given index.</short>
          <long>&#10; Clears the flag for the given index. The flag is automatically&#10; cleared after the Neighborhood.evicted event is fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="index" ref="0x10c287d48" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearAll" ref="0x10c286790" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodFlag.nc">
        <documentation loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodFlag.nc">
          <short>&#10; Clears the flag for all indices&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x10c28fd18" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodFlag.nc">
        <documentation loc="32:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodFlag.nc">
          <short>&#10; Returns the value of the flag for the given index&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="index" ref="0x10c28faa8" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x10c287690" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodFlag.nc">
        <documentation loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodFlag.nc">
          <short>&#10; Sets the flag for the given index&#10;</short>
        </documentation>
        <interfacedef-ref qname="NeighborhoodFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="index" ref="0x10c287420" loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/NeighborhoodFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Neighborhood" loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Neighborhood.nc">
      <documentation loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Neighborhood.nc">
        <short>&#10; Every component maintains its own neighborhood data.</short>
        <long>&#10; Every component maintains its own neighborhood data. The Neighboorhood&#10; component maintains only the nodeids and ages of the neighbors, and&#10; evicts old entries from the table when necessary.&#10;</long>
      </documentation>
      <function command="" provided="0" name="getAge" ref="0x10c28c030" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Neighborhood.nc">
        <documentation loc="40:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Neighborhood.nc">
          <short>&#10; Returns the age of the given entry.</short>
          <long>&#10; Returns the age of the given entry. The age is incremented by one&#10; every time a new node is inserted into the neighborhood table that&#10; is not already at the very end. If the age would get too large to&#10; fit into a byte, then it is periodically reset to a smaller value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="index" ref="0x10c28dd98" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="insertNode" ref="0x10c28b4e0" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Neighborhood.nc">
        <documentation loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Neighborhood.nc">
          <short>&#10; Adds a new node into the neighborhood table.</short>
          <long>&#10; Adds a new node into the neighborhood table. If this node was already&#10; in the table, then it is just brought to the front (its age is reset&#10; to zero). If the node was not in the table, then the oldest is evicted&#10; and its entry is replaced with this node. The index of the entry&#10; is returned in the range [0, NEIGHBORHOOD-1]. &#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x10c28b270" loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Neighborhood.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNode" ref="0x10c28cad8" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Neighborhood.nc">
        <documentation loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Neighborhood.nc">
          <short>&#10; Returns the node address for the given entry.</short>
          <long>&#10; Returns the node address for the given entry.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="index" ref="0x10c28c868" loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="evicted" ref="0x10c289020" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Neighborhood.nc">
        <documentation loc="62:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Neighborhood.nc">
          <short>&#10; This event is fired when the oldest entry is replaced with a new&#10; node.</short>
          <long>&#10; This event is fired when the oldest entry is replaced with a new&#10; node. The same interface is used by many users, so all of them&#10; will receive this event and can clear the corresponding entry.&#10; After this event is fired, all flags for this entry are cleared&#10; (see the NeighborhoodFlag interface)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="index" ref="0x10c28bd00" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Neighborhood.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIndex" ref="0x10c28d5b0" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Neighborhood.nc">
        <documentation loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Neighborhood.nc">
          <short>&#10; Returns the index of the neighbor in the table.</short>
          <long>&#10; Returns the index of the neighbor in the table. If the node was not &#10; found in the table, then the value NEIGHBORHOOD is  returned, &#10; otherwise an index in the range [0, NEIGHBORHOOD-1] is returned.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Neighborhood"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x10c28d340" loc="38:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/Neighborhood.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x10b788020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioState" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioState.nc">
      <function command="" provided="0" name="turnOff" ref="0x10c373328" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioState.nc">
        <documentation loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioState.nc">
          <short>&#10; Moves to radio into sleep state with the lowest power consumption but &#10; highest wakeup time.</short>
          <long>&#10; Moves to radio into sleep state with the lowest power consumption but &#10; highest wakeup time. The radio cannot send or receive in this state &#10; and releases all access to shared resources (e.g. SPI bus). &#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="turnOn" ref="0x10c372378" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioState.nc">
        <documentation loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioState.nc">
          <short>&#10; Goes into receive state.</short>
          <long>&#10; Goes into receive state. The radio continuously receive messages &#10; and able to transmit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x10c372d80" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioState.nc">
        <documentation loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioState.nc">
          <short>&#10; Sets the current channel.</short>
          <long>&#10; Sets the current channel. Returns EBUSY if the stack is unable&#10; to change the channel this time (some other operation is in progress)&#10; SUCCESS otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x10c372b10" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioState.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="done" ref="0x10c370538" loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioState.nc">
        <documentation loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioState.nc">
          <short>&#10; This event is signaled exactly once for each sucessfully posted state &#10; transition and setChannel command when it is completed.</short>
          <long>&#10; This event is signaled exactly once for each sucessfully posted state &#10; transition and setChannel command when it is completed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="standby" ref="0x10c373b58" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioState.nc">
        <documentation loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioState.nc">
          <short>&#10; The same as the turnOff command, except it is not as deep sleep, and&#10; it is quicker to recover from this state.</short>
          <long>&#10; The same as the turnOff command, except it is not as deep sleep, and&#10; it is quicker to recover from this state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x10c370d68" loc="63:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioState.nc">
        <documentation loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioState.nc">
          <short>&#10; Returns the currently selected channel.</short>
          <long>&#10; Returns the currently selected channel.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioState"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioSend" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioSend.nc">
      <function command="" provided="0" name="send" ref="0x10c32fa00" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioSend.nc">
        <documentation loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioSend.nc">
          <short>&#10; Starts the transmission of the given message.</short>
          <long>&#10; Starts the transmission of the given message. This command must not&#10; be called while another send is in progress (so one must wait for the&#10; sendDone event). Returns EBUSY if a reception is in progress or for&#10; some other reason the request cannot be temporarily satisfied (e.g.&#10; the SPI bus access could not be acquired). In this case the send &#10; command could be retried from a tasklet. Returns SUCCESS if the &#10; transmission could be started. In this case sendDone will be fired.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c32f790" loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="ready" ref="0x10c36dd88" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioSend.nc">
        <documentation loc="47:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioSend.nc">
          <short>&#10; This event is fired when the component is most likely able to accept &#10; a send request.</short>
          <long>&#10; This event is fired when the component is most likely able to accept &#10; a send request. If the send command has returned with a failure, then&#10; this event will be called at least once in the near future.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x10c36d580" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioSend.nc">
        <documentation loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioSend.nc">
          <short>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command.</short>
          <long>&#10; Signals the completion of the send command, exactly once for each &#10; successfull send command. If the returned error code is SUCCESS, then &#10; the message was sent (may not have been acknowledged), otherwise &#10; the message was not transmitted over the air.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x10c36d310" loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioCCA" loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioCCA.nc">
      <function event="" provided="0" name="done" ref="0x10c3a4730" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioCCA.nc">
        <documentation loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioCCA.nc">
          <short>&#10; Signals the completion of the clear channel assesment send command.</short>
          <long>&#10; Signals the completion of the clear channel assesment send command.&#10; SUCCESS means the channel is clear, EBUSY means the channel is not&#10; clear, and FAIL means that the clear channel assesment could not&#10; be finished or the operation was cancelled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x10c3a44c0" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioCCA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x10c3a8d00" loc="33:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioCCA.nc">
        <documentation loc="28:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/RadioCCA.nc">
          <short>&#10; Starts the clear channel assesment procedure.</short>
          <long>&#10; Starts the clear channel assesment procedure. Returns EBUSY if the radio&#10; is currently servicing a clear channel assesment, and SUCCESS otherwise.&#10; The check will be performed only in the RX_READY state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Random.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x10c3c4070" loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Random.nc">
        <documentation loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x10c3c78a8" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Random.nc">
        <documentation loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x10b0fc608"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ParameterInit.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x10c3e8020" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x10c3e8020"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x10c3e8ac8" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ParameterInit.nc">
        <documentation loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x10c3e8020"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x10c3e8858" loc="53:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x10c3e8020"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketFlag" loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketFlag.nc">
      <function command="" provided="0" name="clear" ref="0x10c40a0a8" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketFlag.nc">
        <documentation loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to FALSE&#10;</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c40bdc0" loc="44:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x10c40d020" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketFlag.nc">
        <documentation loc="26:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketFlag.nc">
          <short>&#10; Returns if the flag is set for this message.</short>
          <long>&#10; Returns if the flag is set for this message. &#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c410ce8" loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setValue" ref="0x10c40dd00" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketFlag.nc">
        <documentation loc="31:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to the specified value.</short>
          <long>&#10; Sets the flag in this message to the specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c40d770" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x10c40da80" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketFlag.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x10c40b6c8" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketFlag.nc">
        <documentation loc="36:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketFlag.nc">
          <short>&#10; Sets the flag in this message to TRUE&#10;</short>
        </documentation>
        <interfacedef-ref qname="PacketFlag"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x10c40b458" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/chips/rf2xx/util/PacketFlag.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:51" alignment="I:1"><nx_struct-ref name="message_t" ref="0x10b7a2780"/>
                <typename><typedef-ref name="message_t" ref="0x10b7a1cf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/BusyWait.nc">
      <documentation loc="25:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x10c4f2420" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x10c4f2420"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x10c4f2650" loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10c4f2650"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x10c4f1118" loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/BusyWait.nc">
        <documentation loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10c4f2650"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x10c4f2e78" loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10c4f2650"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioCapture" loc="35:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/GpioCapture.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="captureFallingEdge" ref="0x10c4f6b48" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/GpioCapture.nc">
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x10c4f5bf0" loc="55:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/GpioCapture.nc">
        <documentation loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/GpioCapture.nc">
          <short>&#10; Disable further captures.</short>
          <long>&#10; Disable further captures.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x10c4f54b8" loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/GpioCapture.nc">
        <documentation loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/GpioCapture.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; @param val The value of the 32kHz timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x10c4f5248" loc="50:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/GpioCapture.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="captureRisingEdge" ref="0x10c4f6360" loc="42:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/GpioCapture.nc">
        <documentation loc="37:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/GpioCapture.nc">
          <short> &#10; Enable an edge based timer capture event.</short>
          <long> &#10; Enable an edge based timer capture event.&#10;&#10; @return Whether the timer capture has been enabled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastSpiByte" loc="39:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/FastSpiByte.nc">
      <documentation loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/FastSpiByte.nc">
        <short>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface.</short>
        <long>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface. You may want to&#10; use the following code sequence to write a buffer as fast as possible&#10;&#10;&#9;call FastSpiByte.spiSplitWrite(data[0]); // start the first byte&#10;&#9;for(i = 1; i &#60; length; ++i) {&#10;&#9;   // finish the previous one and write the next one&#10;&#9;  call FastSpiByte.spiSplitReadWrite(data[i]);&#10;&#9;}&#10;&#9;call FastSpiByte.spiSlitRead(); // finish the last byte&#10;&#10; You can also do some useful computation (like calculate a CRC) while the&#10; hardware is sending the byte.&#10;</long>
      </documentation>
      <function command="" provided="0" name="splitWrite" ref="0x10c4fd9e8" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/FastSpiByte.nc">
        <documentation loc="41:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/FastSpiByte.nc">
          <short>&#10; Starts a split-phase SPI data transfer with the given data.</short>
          <long>&#10; Starts a split-phase SPI data transfer with the given data.&#10; A splitRead/splitReadWrite command must follow this command even &#10; if the result is unimportant.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x10c4fd778" loc="46:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitReadWrite" ref="0x10c4fccf0" loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/FastSpiByte.nc">
        <documentation loc="54:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/FastSpiByte.nc">
          <short>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns.</short>
          <long>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns. &#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x10c4fca80" loc="58:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitRead" ref="0x10c4fc258" loc="52:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/FastSpiByte.nc">
        <documentation loc="48:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/FastSpiByte.nc">
          <short>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.</short>
          <long>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x10c4fa720" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/FastSpiByte.nc">
        <documentation loc="60:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/FastSpiByte.nc">
          <short>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.</short>
          <long>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.&#10; (To be consistent, this command could have be named splitWriteRead).&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x10c4fa4b0" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiPacket" loc="43:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SpiPacket.nc">
      <documentation loc="24:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SpiPacket.nc">
        <short>&#10; SPI Packet/buffer interface for sending data over an SPI bus.</short>
        <long>&#10; SPI Packet/buffer interface for sending data over an SPI bus.  This&#10; interface provides a split-phase send command which can be used for&#10; sending, receiving or both. It is a &#34;send&#34; command because reading&#10; from the SPI requires writing bytes. The send call allows NULL&#10; parameters for receive or send only operations. This interface is&#10; for buffer based transfers where the microcontroller is the master&#10; (clocking) device.&#10;&#10; Often, an SPI bus must first be acquired using a Resource interface&#10; before sending commands with SPIPacket. In the case of multiple&#10; devices attached to a single SPI bus, chip select pins are often also&#10; used.&#10;&#10; @author Philip Levis&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.7 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x10c623b88" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SpiPacket.nc">
        <documentation loc="45:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SpiPacket.nc">
          <short>&#10; Send a message over the SPI bus.</short>
          <long>&#10; Send a message over the SPI bus.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' A pointer to the buffer to send over the bus. If this&#10;              parameter is NULL, then the SPI will send zeroes.&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' A pointer to the buffer where received data should&#10;              be stored. If this parameter is NULL, then the SPI will&#10;              discard incoming bytes.&#10; @param len   Length of the message.  Note that non-NULL rxBuf and txBuf&#10;              parameters must be AT LEAST as large as len, or the SPI&#10;              will overflow a buffer.&#10;&#10; @return SUCCESS if the request was accepted for transfer&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x10c623278" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x10c6235d8" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x10c6238f8" loc="59:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x10c61f020" loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SpiPacket.nc">
        <documentation loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SpiPacket.nc">
          <short>&#10; Notification that the send command has completed.</short>
          <long>&#10; Notification that the send command has completed.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' The buffer used for transmission&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' The buffer used for reception&#10; @param len    The request length of the transfer, but not necessarily&#10;               the number of bytes that were actually transferred&#10; @param error  SUCCESS if the operation completed successfully, FAIL&#10;               otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x10c6222b0" loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x10c622610" loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x10c622930" loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x10b0fbb98"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x10c622c78" loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="27:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SpiByte.nc">
      <documentation loc="23:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0x10c5d4020" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SpiByte.nc">
        <documentation loc="29:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0x10c5d7c28" loc="34:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Spi" loc="61:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
      <function command="" provided="0" name="initSlave" ref="0x10c60c328" loc="69:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="68:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into slave mode.</short>
          <long> Initialize the ATmega128 SPI bus into slave mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPolarity" ref="0x10c603c40" loc="109:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpiEnabled" ref="0x10c6077a8" loc="100:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPhase" ref="0x10c602610" loc="111:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sampleOnTrailing" ref="0x10c6023a0" loc="111:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initMaster" ref="0x10c60eba8" loc="66:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into master mode.</short>
          <long> Initialize the ATmega128 SPI bus into master mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterBit" ref="0x10c605338" loc="105:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="isMaster" ref="0x10c6050c8" loc="105:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterrupt" ref="0x10c608020" loc="96:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enabled" ref="0x10c60ac88" loc="96:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x10c60b1d8" loc="80:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="76:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Read the SPI data register &#10; </short>
          <long> &#10; Read the SPI data register &#10; @return last data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterDoubleSpeed" ref="0x10c5fede0" loc="125:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x10c5feb70" loc="125:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptEnabled" ref="0x10c608758" loc="97:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClock" ref="0x10c601690" loc="114:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="speed" ref="0x10c601420" loc="114:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x10c5ff538" loc="120:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPolarity" ref="0x10c603518" loc="108:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="highWhenIdle" ref="0x10c6032a8" loc="108:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterDoubleSpeed" ref="0x10c5fe4a0" loc="124:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDataOrder" ref="0x10c606290" loc="102:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lsbFirst" ref="0x10c606020" loc="102:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x10c60bb30" loc="86:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="82:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Write the SPI data register &#10; </short>
          <long> &#10; Write the SPI data register &#10; @param data   next data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x10c60b8c0" loc="86:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x10c6070a8" loc="99:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="busOn" ref="0x10c608df8" loc="99:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterBitSet" ref="0x10c605b48" loc="106:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPhase" ref="0x10c602d18" loc="112:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClock" ref="0x10c601d80" loc="115:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="hasWriteCollided" ref="0x10c5ffc80" loc="122:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOrderLsbFirst" ref="0x10c6069a8" loc="103:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10b40c7f8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x10c60ca40" loc="72:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="71:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Disable and sleep the ATmega128 SPI bus.</short>
          <long> Disable and sleep the ATmega128 SPI bus. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x10c60a4e0" loc="92:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="88:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
          <short>&#10; Interrupt signalling SPI data cycle is complete.</short>
          <long>&#10; Interrupt signalling SPI data cycle is complete. &#10; @param data   data byte from data register&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x10c60a270" loc="92:/usr/local/Cellar/tinyos/2.1.1/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10b0fb160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="65:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AsyncStdControl.nc">
      <documentation loc="51:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x10c69a8c8" loc="74:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="67:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x10c6990d8" loc="84:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="76:/usr/local/Cellar/tinyos/2.1.1/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10b415e58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
